
C:\Users\MisoPC\Documents\Skola\VRS\Parkovaci_senzor\Debug\Parkovaci_senzor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002978  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000640  08002ab4  08002ab4  00012ab4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080030f4  080030f4  000130f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080030f8  080030f8  000130f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000004  20000000  080030fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000028  20000004  08003100  00020004  2**2
                  ALLOC
  7 ._user_heap_stack 00000400  2000002c  08003100  0002002c  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000732c  00000000  00000000  0002002d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000162f  00000000  00000000  00027359  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000978  00000000  00000000  00028988  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000880  00000000  00000000  00029300  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00003376  00000000  00000000  00029b80  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00002b62  00000000  00000000  0002cef6  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007e  00000000  00000000  0002fa58  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00002744  00000000  00000000  0002fad8  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .stabstr      0000003f  00000000  00000000  0003221c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000004 	.word	0x20000004
 8000158:	00000000 	.word	0x00000000
 800015c:	08002a9c 	.word	0x08002a9c

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000008 	.word	0x20000008
 8000178:	08002a9c 	.word	0x08002a9c

0800017c <strlen>:
 800017c:	4603      	mov	r3, r0
 800017e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000182:	2a00      	cmp	r2, #0
 8000184:	d1fb      	bne.n	800017e <strlen+0x2>
 8000186:	1a18      	subs	r0, r3, r0
 8000188:	3801      	subs	r0, #1
 800018a:	4770      	bx	lr

0800018c <__aeabi_drsub>:
 800018c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000190:	e002      	b.n	8000198 <__adddf3>
 8000192:	bf00      	nop

08000194 <__aeabi_dsub>:
 8000194:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000198 <__adddf3>:
 8000198:	b530      	push	{r4, r5, lr}
 800019a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800019e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001a2:	ea94 0f05 	teq	r4, r5
 80001a6:	bf08      	it	eq
 80001a8:	ea90 0f02 	teqeq	r0, r2
 80001ac:	bf1f      	itttt	ne
 80001ae:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001b2:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001b6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001ba:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001be:	f000 80e2 	beq.w	8000386 <__adddf3+0x1ee>
 80001c2:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001c6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001ca:	bfb8      	it	lt
 80001cc:	426d      	neglt	r5, r5
 80001ce:	dd0c      	ble.n	80001ea <__adddf3+0x52>
 80001d0:	442c      	add	r4, r5
 80001d2:	ea80 0202 	eor.w	r2, r0, r2
 80001d6:	ea81 0303 	eor.w	r3, r1, r3
 80001da:	ea82 0000 	eor.w	r0, r2, r0
 80001de:	ea83 0101 	eor.w	r1, r3, r1
 80001e2:	ea80 0202 	eor.w	r2, r0, r2
 80001e6:	ea81 0303 	eor.w	r3, r1, r3
 80001ea:	2d36      	cmp	r5, #54	; 0x36
 80001ec:	bf88      	it	hi
 80001ee:	bd30      	pophi	{r4, r5, pc}
 80001f0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001f4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001f8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001fc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000200:	d002      	beq.n	8000208 <__adddf3+0x70>
 8000202:	4240      	negs	r0, r0
 8000204:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000208:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 800020c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000210:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000214:	d002      	beq.n	800021c <__adddf3+0x84>
 8000216:	4252      	negs	r2, r2
 8000218:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800021c:	ea94 0f05 	teq	r4, r5
 8000220:	f000 80a7 	beq.w	8000372 <__adddf3+0x1da>
 8000224:	f1a4 0401 	sub.w	r4, r4, #1
 8000228:	f1d5 0e20 	rsbs	lr, r5, #32
 800022c:	db0d      	blt.n	800024a <__adddf3+0xb2>
 800022e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000232:	fa22 f205 	lsr.w	r2, r2, r5
 8000236:	1880      	adds	r0, r0, r2
 8000238:	f141 0100 	adc.w	r1, r1, #0
 800023c:	fa03 f20e 	lsl.w	r2, r3, lr
 8000240:	1880      	adds	r0, r0, r2
 8000242:	fa43 f305 	asr.w	r3, r3, r5
 8000246:	4159      	adcs	r1, r3
 8000248:	e00e      	b.n	8000268 <__adddf3+0xd0>
 800024a:	f1a5 0520 	sub.w	r5, r5, #32
 800024e:	f10e 0e20 	add.w	lr, lr, #32
 8000252:	2a01      	cmp	r2, #1
 8000254:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000258:	bf28      	it	cs
 800025a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800025e:	fa43 f305 	asr.w	r3, r3, r5
 8000262:	18c0      	adds	r0, r0, r3
 8000264:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000268:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800026c:	d507      	bpl.n	800027e <__adddf3+0xe6>
 800026e:	f04f 0e00 	mov.w	lr, #0
 8000272:	f1dc 0c00 	rsbs	ip, ip, #0
 8000276:	eb7e 0000 	sbcs.w	r0, lr, r0
 800027a:	eb6e 0101 	sbc.w	r1, lr, r1
 800027e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000282:	d31b      	bcc.n	80002bc <__adddf3+0x124>
 8000284:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000288:	d30c      	bcc.n	80002a4 <__adddf3+0x10c>
 800028a:	0849      	lsrs	r1, r1, #1
 800028c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000290:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000294:	f104 0401 	add.w	r4, r4, #1
 8000298:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800029c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002a0:	f080 809a 	bcs.w	80003d8 <__adddf3+0x240>
 80002a4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002a8:	bf08      	it	eq
 80002aa:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ae:	f150 0000 	adcs.w	r0, r0, #0
 80002b2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002b6:	ea41 0105 	orr.w	r1, r1, r5
 80002ba:	bd30      	pop	{r4, r5, pc}
 80002bc:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002c0:	4140      	adcs	r0, r0
 80002c2:	eb41 0101 	adc.w	r1, r1, r1
 80002c6:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80002ca:	f1a4 0401 	sub.w	r4, r4, #1
 80002ce:	d1e9      	bne.n	80002a4 <__adddf3+0x10c>
 80002d0:	f091 0f00 	teq	r1, #0
 80002d4:	bf04      	itt	eq
 80002d6:	4601      	moveq	r1, r0
 80002d8:	2000      	moveq	r0, #0
 80002da:	fab1 f381 	clz	r3, r1
 80002de:	bf08      	it	eq
 80002e0:	3320      	addeq	r3, #32
 80002e2:	f1a3 030b 	sub.w	r3, r3, #11
 80002e6:	f1b3 0220 	subs.w	r2, r3, #32
 80002ea:	da0c      	bge.n	8000306 <__adddf3+0x16e>
 80002ec:	320c      	adds	r2, #12
 80002ee:	dd08      	ble.n	8000302 <__adddf3+0x16a>
 80002f0:	f102 0c14 	add.w	ip, r2, #20
 80002f4:	f1c2 020c 	rsb	r2, r2, #12
 80002f8:	fa01 f00c 	lsl.w	r0, r1, ip
 80002fc:	fa21 f102 	lsr.w	r1, r1, r2
 8000300:	e00c      	b.n	800031c <__adddf3+0x184>
 8000302:	f102 0214 	add.w	r2, r2, #20
 8000306:	bfd8      	it	le
 8000308:	f1c2 0c20 	rsble	ip, r2, #32
 800030c:	fa01 f102 	lsl.w	r1, r1, r2
 8000310:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000314:	bfdc      	itt	le
 8000316:	ea41 010c 	orrle.w	r1, r1, ip
 800031a:	4090      	lslle	r0, r2
 800031c:	1ae4      	subs	r4, r4, r3
 800031e:	bfa2      	ittt	ge
 8000320:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000324:	4329      	orrge	r1, r5
 8000326:	bd30      	popge	{r4, r5, pc}
 8000328:	ea6f 0404 	mvn.w	r4, r4
 800032c:	3c1f      	subs	r4, #31
 800032e:	da1c      	bge.n	800036a <__adddf3+0x1d2>
 8000330:	340c      	adds	r4, #12
 8000332:	dc0e      	bgt.n	8000352 <__adddf3+0x1ba>
 8000334:	f104 0414 	add.w	r4, r4, #20
 8000338:	f1c4 0220 	rsb	r2, r4, #32
 800033c:	fa20 f004 	lsr.w	r0, r0, r4
 8000340:	fa01 f302 	lsl.w	r3, r1, r2
 8000344:	ea40 0003 	orr.w	r0, r0, r3
 8000348:	fa21 f304 	lsr.w	r3, r1, r4
 800034c:	ea45 0103 	orr.w	r1, r5, r3
 8000350:	bd30      	pop	{r4, r5, pc}
 8000352:	f1c4 040c 	rsb	r4, r4, #12
 8000356:	f1c4 0220 	rsb	r2, r4, #32
 800035a:	fa20 f002 	lsr.w	r0, r0, r2
 800035e:	fa01 f304 	lsl.w	r3, r1, r4
 8000362:	ea40 0003 	orr.w	r0, r0, r3
 8000366:	4629      	mov	r1, r5
 8000368:	bd30      	pop	{r4, r5, pc}
 800036a:	fa21 f004 	lsr.w	r0, r1, r4
 800036e:	4629      	mov	r1, r5
 8000370:	bd30      	pop	{r4, r5, pc}
 8000372:	f094 0f00 	teq	r4, #0
 8000376:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800037a:	bf06      	itte	eq
 800037c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000380:	3401      	addeq	r4, #1
 8000382:	3d01      	subne	r5, #1
 8000384:	e74e      	b.n	8000224 <__adddf3+0x8c>
 8000386:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800038a:	bf18      	it	ne
 800038c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000390:	d029      	beq.n	80003e6 <__adddf3+0x24e>
 8000392:	ea94 0f05 	teq	r4, r5
 8000396:	bf08      	it	eq
 8000398:	ea90 0f02 	teqeq	r0, r2
 800039c:	d005      	beq.n	80003aa <__adddf3+0x212>
 800039e:	ea54 0c00 	orrs.w	ip, r4, r0
 80003a2:	bf04      	itt	eq
 80003a4:	4619      	moveq	r1, r3
 80003a6:	4610      	moveq	r0, r2
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea91 0f03 	teq	r1, r3
 80003ae:	bf1e      	ittt	ne
 80003b0:	2100      	movne	r1, #0
 80003b2:	2000      	movne	r0, #0
 80003b4:	bd30      	popne	{r4, r5, pc}
 80003b6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003ba:	d105      	bne.n	80003c8 <__adddf3+0x230>
 80003bc:	0040      	lsls	r0, r0, #1
 80003be:	4149      	adcs	r1, r1
 80003c0:	bf28      	it	cs
 80003c2:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003c6:	bd30      	pop	{r4, r5, pc}
 80003c8:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003cc:	bf3c      	itt	cc
 80003ce:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003d2:	bd30      	popcc	{r4, r5, pc}
 80003d4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003d8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003dc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003e0:	f04f 0000 	mov.w	r0, #0
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ea:	bf1a      	itte	ne
 80003ec:	4619      	movne	r1, r3
 80003ee:	4610      	movne	r0, r2
 80003f0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003f4:	bf1c      	itt	ne
 80003f6:	460b      	movne	r3, r1
 80003f8:	4602      	movne	r2, r0
 80003fa:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003fe:	bf06      	itte	eq
 8000400:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000404:	ea91 0f03 	teqeq	r1, r3
 8000408:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	bf00      	nop

08000410 <__aeabi_ui2d>:
 8000410:	f090 0f00 	teq	r0, #0
 8000414:	bf04      	itt	eq
 8000416:	2100      	moveq	r1, #0
 8000418:	4770      	bxeq	lr
 800041a:	b530      	push	{r4, r5, lr}
 800041c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000420:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000424:	f04f 0500 	mov.w	r5, #0
 8000428:	f04f 0100 	mov.w	r1, #0
 800042c:	e750      	b.n	80002d0 <__adddf3+0x138>
 800042e:	bf00      	nop

08000430 <__aeabi_i2d>:
 8000430:	f090 0f00 	teq	r0, #0
 8000434:	bf04      	itt	eq
 8000436:	2100      	moveq	r1, #0
 8000438:	4770      	bxeq	lr
 800043a:	b530      	push	{r4, r5, lr}
 800043c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000440:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000444:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000448:	bf48      	it	mi
 800044a:	4240      	negmi	r0, r0
 800044c:	f04f 0100 	mov.w	r1, #0
 8000450:	e73e      	b.n	80002d0 <__adddf3+0x138>
 8000452:	bf00      	nop

08000454 <__aeabi_f2d>:
 8000454:	0042      	lsls	r2, r0, #1
 8000456:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800045a:	ea4f 0131 	mov.w	r1, r1, rrx
 800045e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000462:	bf1f      	itttt	ne
 8000464:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000468:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800046c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000470:	4770      	bxne	lr
 8000472:	f092 0f00 	teq	r2, #0
 8000476:	bf14      	ite	ne
 8000478:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000484:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000488:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800048c:	e720      	b.n	80002d0 <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_ul2d>:
 8000490:	ea50 0201 	orrs.w	r2, r0, r1
 8000494:	bf08      	it	eq
 8000496:	4770      	bxeq	lr
 8000498:	b530      	push	{r4, r5, lr}
 800049a:	f04f 0500 	mov.w	r5, #0
 800049e:	e00a      	b.n	80004b6 <__aeabi_l2d+0x16>

080004a0 <__aeabi_l2d>:
 80004a0:	ea50 0201 	orrs.w	r2, r0, r1
 80004a4:	bf08      	it	eq
 80004a6:	4770      	bxeq	lr
 80004a8:	b530      	push	{r4, r5, lr}
 80004aa:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004ae:	d502      	bpl.n	80004b6 <__aeabi_l2d+0x16>
 80004b0:	4240      	negs	r0, r0
 80004b2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004b6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ba:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004be:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004c2:	f43f aedc 	beq.w	800027e <__adddf3+0xe6>
 80004c6:	f04f 0203 	mov.w	r2, #3
 80004ca:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004ce:	bf18      	it	ne
 80004d0:	3203      	addne	r2, #3
 80004d2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004d6:	bf18      	it	ne
 80004d8:	3203      	addne	r2, #3
 80004da:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004de:	f1c2 0320 	rsb	r3, r2, #32
 80004e2:	fa00 fc03 	lsl.w	ip, r0, r3
 80004e6:	fa20 f002 	lsr.w	r0, r0, r2
 80004ea:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ee:	ea40 000e 	orr.w	r0, r0, lr
 80004f2:	fa21 f102 	lsr.w	r1, r1, r2
 80004f6:	4414      	add	r4, r2
 80004f8:	e6c1      	b.n	800027e <__adddf3+0xe6>
 80004fa:	bf00      	nop

080004fc <__aeabi_dmul>:
 80004fc:	b570      	push	{r4, r5, r6, lr}
 80004fe:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000502:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000506:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800050a:	bf1d      	ittte	ne
 800050c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000510:	ea94 0f0c 	teqne	r4, ip
 8000514:	ea95 0f0c 	teqne	r5, ip
 8000518:	f000 f8de 	bleq	80006d8 <__aeabi_dmul+0x1dc>
 800051c:	442c      	add	r4, r5
 800051e:	ea81 0603 	eor.w	r6, r1, r3
 8000522:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000526:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800052a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800052e:	bf18      	it	ne
 8000530:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000534:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000538:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800053c:	d038      	beq.n	80005b0 <__aeabi_dmul+0xb4>
 800053e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000542:	f04f 0500 	mov.w	r5, #0
 8000546:	fbe1 e502 	umlal	lr, r5, r1, r2
 800054a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800054e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000552:	f04f 0600 	mov.w	r6, #0
 8000556:	fbe1 5603 	umlal	r5, r6, r1, r3
 800055a:	f09c 0f00 	teq	ip, #0
 800055e:	bf18      	it	ne
 8000560:	f04e 0e01 	orrne.w	lr, lr, #1
 8000564:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000568:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800056c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000570:	d204      	bcs.n	800057c <__aeabi_dmul+0x80>
 8000572:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000576:	416d      	adcs	r5, r5
 8000578:	eb46 0606 	adc.w	r6, r6, r6
 800057c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000580:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000584:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000588:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800058c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000590:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000594:	bf88      	it	hi
 8000596:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800059a:	d81e      	bhi.n	80005da <__aeabi_dmul+0xde>
 800059c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005a0:	bf08      	it	eq
 80005a2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005a6:	f150 0000 	adcs.w	r0, r0, #0
 80005aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ae:	bd70      	pop	{r4, r5, r6, pc}
 80005b0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005b4:	ea46 0101 	orr.w	r1, r6, r1
 80005b8:	ea40 0002 	orr.w	r0, r0, r2
 80005bc:	ea81 0103 	eor.w	r1, r1, r3
 80005c0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005c4:	bfc2      	ittt	gt
 80005c6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005ca:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005ce:	bd70      	popgt	{r4, r5, r6, pc}
 80005d0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005d4:	f04f 0e00 	mov.w	lr, #0
 80005d8:	3c01      	subs	r4, #1
 80005da:	f300 80ab 	bgt.w	8000734 <__aeabi_dmul+0x238>
 80005de:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005e2:	bfde      	ittt	le
 80005e4:	2000      	movle	r0, #0
 80005e6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005ea:	bd70      	pople	{r4, r5, r6, pc}
 80005ec:	f1c4 0400 	rsb	r4, r4, #0
 80005f0:	3c20      	subs	r4, #32
 80005f2:	da35      	bge.n	8000660 <__aeabi_dmul+0x164>
 80005f4:	340c      	adds	r4, #12
 80005f6:	dc1b      	bgt.n	8000630 <__aeabi_dmul+0x134>
 80005f8:	f104 0414 	add.w	r4, r4, #20
 80005fc:	f1c4 0520 	rsb	r5, r4, #32
 8000600:	fa00 f305 	lsl.w	r3, r0, r5
 8000604:	fa20 f004 	lsr.w	r0, r0, r4
 8000608:	fa01 f205 	lsl.w	r2, r1, r5
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000614:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	fa21 f604 	lsr.w	r6, r1, r4
 8000620:	eb42 0106 	adc.w	r1, r2, r6
 8000624:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000628:	bf08      	it	eq
 800062a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062e:	bd70      	pop	{r4, r5, r6, pc}
 8000630:	f1c4 040c 	rsb	r4, r4, #12
 8000634:	f1c4 0520 	rsb	r5, r4, #32
 8000638:	fa00 f304 	lsl.w	r3, r0, r4
 800063c:	fa20 f005 	lsr.w	r0, r0, r5
 8000640:	fa01 f204 	lsl.w	r2, r1, r4
 8000644:	ea40 0002 	orr.w	r0, r0, r2
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000650:	f141 0100 	adc.w	r1, r1, #0
 8000654:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000658:	bf08      	it	eq
 800065a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800065e:	bd70      	pop	{r4, r5, r6, pc}
 8000660:	f1c4 0520 	rsb	r5, r4, #32
 8000664:	fa00 f205 	lsl.w	r2, r0, r5
 8000668:	ea4e 0e02 	orr.w	lr, lr, r2
 800066c:	fa20 f304 	lsr.w	r3, r0, r4
 8000670:	fa01 f205 	lsl.w	r2, r1, r5
 8000674:	ea43 0302 	orr.w	r3, r3, r2
 8000678:	fa21 f004 	lsr.w	r0, r1, r4
 800067c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000680:	fa21 f204 	lsr.w	r2, r1, r4
 8000684:	ea20 0002 	bic.w	r0, r0, r2
 8000688:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800068c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000690:	bf08      	it	eq
 8000692:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000696:	bd70      	pop	{r4, r5, r6, pc}
 8000698:	f094 0f00 	teq	r4, #0
 800069c:	d10f      	bne.n	80006be <__aeabi_dmul+0x1c2>
 800069e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006a2:	0040      	lsls	r0, r0, #1
 80006a4:	eb41 0101 	adc.w	r1, r1, r1
 80006a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006ac:	bf08      	it	eq
 80006ae:	3c01      	subeq	r4, #1
 80006b0:	d0f7      	beq.n	80006a2 <__aeabi_dmul+0x1a6>
 80006b2:	ea41 0106 	orr.w	r1, r1, r6
 80006b6:	f095 0f00 	teq	r5, #0
 80006ba:	bf18      	it	ne
 80006bc:	4770      	bxne	lr
 80006be:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006c2:	0052      	lsls	r2, r2, #1
 80006c4:	eb43 0303 	adc.w	r3, r3, r3
 80006c8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006cc:	bf08      	it	eq
 80006ce:	3d01      	subeq	r5, #1
 80006d0:	d0f7      	beq.n	80006c2 <__aeabi_dmul+0x1c6>
 80006d2:	ea43 0306 	orr.w	r3, r3, r6
 80006d6:	4770      	bx	lr
 80006d8:	ea94 0f0c 	teq	r4, ip
 80006dc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006e0:	bf18      	it	ne
 80006e2:	ea95 0f0c 	teqne	r5, ip
 80006e6:	d00c      	beq.n	8000702 <__aeabi_dmul+0x206>
 80006e8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006ec:	bf18      	it	ne
 80006ee:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006f2:	d1d1      	bne.n	8000698 <__aeabi_dmul+0x19c>
 80006f4:	ea81 0103 	eor.w	r1, r1, r3
 80006f8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006fc:	f04f 0000 	mov.w	r0, #0
 8000700:	bd70      	pop	{r4, r5, r6, pc}
 8000702:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000706:	bf06      	itte	eq
 8000708:	4610      	moveq	r0, r2
 800070a:	4619      	moveq	r1, r3
 800070c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000710:	d019      	beq.n	8000746 <__aeabi_dmul+0x24a>
 8000712:	ea94 0f0c 	teq	r4, ip
 8000716:	d102      	bne.n	800071e <__aeabi_dmul+0x222>
 8000718:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800071c:	d113      	bne.n	8000746 <__aeabi_dmul+0x24a>
 800071e:	ea95 0f0c 	teq	r5, ip
 8000722:	d105      	bne.n	8000730 <__aeabi_dmul+0x234>
 8000724:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000728:	bf1c      	itt	ne
 800072a:	4610      	movne	r0, r2
 800072c:	4619      	movne	r1, r3
 800072e:	d10a      	bne.n	8000746 <__aeabi_dmul+0x24a>
 8000730:	ea81 0103 	eor.w	r1, r1, r3
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800073c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800074a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800074e:	bd70      	pop	{r4, r5, r6, pc}

08000750 <__aeabi_ddiv>:
 8000750:	b570      	push	{r4, r5, r6, lr}
 8000752:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000756:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800075a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800075e:	bf1d      	ittte	ne
 8000760:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000764:	ea94 0f0c 	teqne	r4, ip
 8000768:	ea95 0f0c 	teqne	r5, ip
 800076c:	f000 f8a7 	bleq	80008be <__aeabi_ddiv+0x16e>
 8000770:	eba4 0405 	sub.w	r4, r4, r5
 8000774:	ea81 0e03 	eor.w	lr, r1, r3
 8000778:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800077c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000780:	f000 8088 	beq.w	8000894 <__aeabi_ddiv+0x144>
 8000784:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000788:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800078c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000790:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000794:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000798:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800079c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007a0:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007a4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007a8:	429d      	cmp	r5, r3
 80007aa:	bf08      	it	eq
 80007ac:	4296      	cmpeq	r6, r2
 80007ae:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007b2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007b6:	d202      	bcs.n	80007be <__aeabi_ddiv+0x6e>
 80007b8:	085b      	lsrs	r3, r3, #1
 80007ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80007be:	1ab6      	subs	r6, r6, r2
 80007c0:	eb65 0503 	sbc.w	r5, r5, r3
 80007c4:	085b      	lsrs	r3, r3, #1
 80007c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ca:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007ce:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007d2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007da:	bf22      	ittt	cs
 80007dc:	1ab6      	subcs	r6, r6, r2
 80007de:	4675      	movcs	r5, lr
 80007e0:	ea40 000c 	orrcs.w	r0, r0, ip
 80007e4:	085b      	lsrs	r3, r3, #1
 80007e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ea:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ee:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007f2:	bf22      	ittt	cs
 80007f4:	1ab6      	subcs	r6, r6, r2
 80007f6:	4675      	movcs	r5, lr
 80007f8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	ebb6 0e02 	subs.w	lr, r6, r2
 8000806:	eb75 0e03 	sbcs.w	lr, r5, r3
 800080a:	bf22      	ittt	cs
 800080c:	1ab6      	subcs	r6, r6, r2
 800080e:	4675      	movcs	r5, lr
 8000810:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000814:	085b      	lsrs	r3, r3, #1
 8000816:	ea4f 0232 	mov.w	r2, r2, rrx
 800081a:	ebb6 0e02 	subs.w	lr, r6, r2
 800081e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000822:	bf22      	ittt	cs
 8000824:	1ab6      	subcs	r6, r6, r2
 8000826:	4675      	movcs	r5, lr
 8000828:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800082c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000830:	d018      	beq.n	8000864 <__aeabi_ddiv+0x114>
 8000832:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000836:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800083a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800083e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000842:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000846:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800084a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800084e:	d1c0      	bne.n	80007d2 <__aeabi_ddiv+0x82>
 8000850:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000854:	d10b      	bne.n	800086e <__aeabi_ddiv+0x11e>
 8000856:	ea41 0100 	orr.w	r1, r1, r0
 800085a:	f04f 0000 	mov.w	r0, #0
 800085e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000862:	e7b6      	b.n	80007d2 <__aeabi_ddiv+0x82>
 8000864:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000868:	bf04      	itt	eq
 800086a:	4301      	orreq	r1, r0
 800086c:	2000      	moveq	r0, #0
 800086e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000872:	bf88      	it	hi
 8000874:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000878:	f63f aeaf 	bhi.w	80005da <__aeabi_dmul+0xde>
 800087c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000880:	bf04      	itt	eq
 8000882:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000886:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800088a:	f150 0000 	adcs.w	r0, r0, #0
 800088e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000892:	bd70      	pop	{r4, r5, r6, pc}
 8000894:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000898:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800089c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008a0:	bfc2      	ittt	gt
 80008a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008aa:	bd70      	popgt	{r4, r5, r6, pc}
 80008ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008b0:	f04f 0e00 	mov.w	lr, #0
 80008b4:	3c01      	subs	r4, #1
 80008b6:	e690      	b.n	80005da <__aeabi_dmul+0xde>
 80008b8:	ea45 0e06 	orr.w	lr, r5, r6
 80008bc:	e68d      	b.n	80005da <__aeabi_dmul+0xde>
 80008be:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008c2:	ea94 0f0c 	teq	r4, ip
 80008c6:	bf08      	it	eq
 80008c8:	ea95 0f0c 	teqeq	r5, ip
 80008cc:	f43f af3b 	beq.w	8000746 <__aeabi_dmul+0x24a>
 80008d0:	ea94 0f0c 	teq	r4, ip
 80008d4:	d10a      	bne.n	80008ec <__aeabi_ddiv+0x19c>
 80008d6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008da:	f47f af34 	bne.w	8000746 <__aeabi_dmul+0x24a>
 80008de:	ea95 0f0c 	teq	r5, ip
 80008e2:	f47f af25 	bne.w	8000730 <__aeabi_dmul+0x234>
 80008e6:	4610      	mov	r0, r2
 80008e8:	4619      	mov	r1, r3
 80008ea:	e72c      	b.n	8000746 <__aeabi_dmul+0x24a>
 80008ec:	ea95 0f0c 	teq	r5, ip
 80008f0:	d106      	bne.n	8000900 <__aeabi_ddiv+0x1b0>
 80008f2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008f6:	f43f aefd 	beq.w	80006f4 <__aeabi_dmul+0x1f8>
 80008fa:	4610      	mov	r0, r2
 80008fc:	4619      	mov	r1, r3
 80008fe:	e722      	b.n	8000746 <__aeabi_dmul+0x24a>
 8000900:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000904:	bf18      	it	ne
 8000906:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800090a:	f47f aec5 	bne.w	8000698 <__aeabi_dmul+0x19c>
 800090e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000912:	f47f af0d 	bne.w	8000730 <__aeabi_dmul+0x234>
 8000916:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800091a:	f47f aeeb 	bne.w	80006f4 <__aeabi_dmul+0x1f8>
 800091e:	e712      	b.n	8000746 <__aeabi_dmul+0x24a>

08000920 <__aeabi_d2iz>:
 8000920:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000924:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000928:	d215      	bcs.n	8000956 <__aeabi_d2iz+0x36>
 800092a:	d511      	bpl.n	8000950 <__aeabi_d2iz+0x30>
 800092c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000930:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000934:	d912      	bls.n	800095c <__aeabi_d2iz+0x3c>
 8000936:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800093a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800093e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000942:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000946:	fa23 f002 	lsr.w	r0, r3, r2
 800094a:	bf18      	it	ne
 800094c:	4240      	negne	r0, r0
 800094e:	4770      	bx	lr
 8000950:	f04f 0000 	mov.w	r0, #0
 8000954:	4770      	bx	lr
 8000956:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800095a:	d105      	bne.n	8000968 <__aeabi_d2iz+0x48>
 800095c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000960:	bf08      	it	eq
 8000962:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000966:	4770      	bx	lr
 8000968:	f04f 0000 	mov.w	r0, #0
 800096c:	4770      	bx	lr
 800096e:	bf00      	nop

08000970 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 8000970:	b480      	push	{r7}
 8000972:	b085      	sub	sp, #20
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
  uint8_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 8000978:	2300      	movs	r3, #0
 800097a:	73fb      	strb	r3, [r7, #15]
 800097c:	2300      	movs	r3, #0
 800097e:	73bb      	strb	r3, [r7, #14]
 8000980:	230f      	movs	r3, #15
 8000982:	737b      	strb	r3, [r7, #13]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	78db      	ldrb	r3, [r3, #3]
 8000988:	2b00      	cmp	r3, #0
 800098a:	d038      	beq.n	80009fe <NVIC_Init+0x8e>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 800098c:	4b26      	ldr	r3, [pc, #152]	; (8000a28 <NVIC_Init+0xb8>)
 800098e:	68db      	ldr	r3, [r3, #12]
 8000990:	43db      	mvns	r3, r3
 8000992:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8000996:	0a1b      	lsrs	r3, r3, #8
 8000998:	73fb      	strb	r3, [r7, #15]
    tmppre = (0x4 - tmppriority);
 800099a:	7bfb      	ldrb	r3, [r7, #15]
 800099c:	f1c3 0304 	rsb	r3, r3, #4
 80009a0:	73bb      	strb	r3, [r7, #14]
    tmpsub = tmpsub >> tmppriority;
 80009a2:	7b7a      	ldrb	r2, [r7, #13]
 80009a4:	7bfb      	ldrb	r3, [r7, #15]
 80009a6:	fa42 f303 	asr.w	r3, r2, r3
 80009aa:	737b      	strb	r3, [r7, #13]

    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	785b      	ldrb	r3, [r3, #1]
 80009b0:	461a      	mov	r2, r3
 80009b2:	7bbb      	ldrb	r3, [r7, #14]
 80009b4:	fa02 f303 	lsl.w	r3, r2, r3
 80009b8:	73fb      	strb	r3, [r7, #15]
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	789a      	ldrb	r2, [r3, #2]
 80009be:	7b7b      	ldrb	r3, [r7, #13]
 80009c0:	4013      	ands	r3, r2
 80009c2:	b2da      	uxtb	r2, r3
 80009c4:	7bfb      	ldrb	r3, [r7, #15]
 80009c6:	4313      	orrs	r3, r2
 80009c8:	73fb      	strb	r3, [r7, #15]
    tmppriority = tmppriority << 0x04;
 80009ca:	7bfb      	ldrb	r3, [r7, #15]
 80009cc:	011b      	lsls	r3, r3, #4
 80009ce:	73fb      	strb	r3, [r7, #15]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 80009d0:	4a16      	ldr	r2, [pc, #88]	; (8000a2c <NVIC_Init+0xbc>)
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	781b      	ldrb	r3, [r3, #0]
 80009d6:	4413      	add	r3, r2
 80009d8:	7bfa      	ldrb	r2, [r7, #15]
 80009da:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80009de:	4a13      	ldr	r2, [pc, #76]	; (8000a2c <NVIC_Init+0xbc>)
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	781b      	ldrb	r3, [r3, #0]
 80009e4:	095b      	lsrs	r3, r3, #5
 80009e6:	b2db      	uxtb	r3, r3
 80009e8:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	781b      	ldrb	r3, [r3, #0]
 80009ee:	f003 031f 	and.w	r3, r3, #31
 80009f2:	2101      	movs	r1, #1
 80009f4:	fa01 f303 	lsl.w	r3, r1, r3
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80009f8:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 80009fc:	e00f      	b.n	8000a1e <NVIC_Init+0xae>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80009fe:	490b      	ldr	r1, [pc, #44]	; (8000a2c <NVIC_Init+0xbc>)
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	781b      	ldrb	r3, [r3, #0]
 8000a04:	095b      	lsrs	r3, r3, #5
 8000a06:	b2db      	uxtb	r3, r3
 8000a08:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	781b      	ldrb	r3, [r3, #0]
 8000a0e:	f003 031f 	and.w	r3, r3, #31
 8000a12:	2201      	movs	r2, #1
 8000a14:	409a      	lsls	r2, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000a16:	f100 0320 	add.w	r3, r0, #32
 8000a1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 8000a1e:	bf00      	nop
 8000a20:	3714      	adds	r7, #20
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bc80      	pop	{r7}
 8000a26:	4770      	bx	lr
 8000a28:	e000ed00 	.word	0xe000ed00
 8000a2c:	e000e100 	.word	0xe000e100

08000a30 <EXTI_Init>:
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure
  *   that contains the configuration information for the EXTI peripheral.
  * @retval None
  */
void EXTI_Init(EXTI_InitTypeDef* EXTI_InitStruct)
{
 8000a30:	b480      	push	{r7}
 8000a32:	b085      	sub	sp, #20
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_EXTI_MODE(EXTI_InitStruct->EXTI_Mode));
  assert_param(IS_EXTI_TRIGGER(EXTI_InitStruct->EXTI_Trigger));
  assert_param(IS_EXTI_LINE(EXTI_InitStruct->EXTI_Line));  
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->EXTI_LineCmd));

  tmp = (uint32_t)EXTI_BASE;
 8000a3c:	4b34      	ldr	r3, [pc, #208]	; (8000b10 <EXTI_Init+0xe0>)
 8000a3e:	60fb      	str	r3, [r7, #12]
     
  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	799b      	ldrb	r3, [r3, #6]
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d04f      	beq.n	8000ae8 <EXTI_Init+0xb8>
  {
    /* Clear EXTI line configuration */
    EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
 8000a48:	4931      	ldr	r1, [pc, #196]	; (8000b10 <EXTI_Init+0xe0>)
 8000a4a:	4b31      	ldr	r3, [pc, #196]	; (8000b10 <EXTI_Init+0xe0>)
 8000a4c:	681a      	ldr	r2, [r3, #0]
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	43db      	mvns	r3, r3
 8000a54:	4013      	ands	r3, r2
 8000a56:	600b      	str	r3, [r1, #0]
    EXTI->EMR &= ~EXTI_InitStruct->EXTI_Line;
 8000a58:	492d      	ldr	r1, [pc, #180]	; (8000b10 <EXTI_Init+0xe0>)
 8000a5a:	4b2d      	ldr	r3, [pc, #180]	; (8000b10 <EXTI_Init+0xe0>)
 8000a5c:	685a      	ldr	r2, [r3, #4]
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	43db      	mvns	r3, r3
 8000a64:	4013      	ands	r3, r2
 8000a66:	604b      	str	r3, [r1, #4]
    
    tmp += EXTI_InitStruct->EXTI_Mode;
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	791b      	ldrb	r3, [r3, #4]
 8000a6c:	461a      	mov	r2, r3
 8000a6e:	68fb      	ldr	r3, [r7, #12]
 8000a70:	4413      	add	r3, r2
 8000a72:	60fb      	str	r3, [r7, #12]

    *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 8000a74:	68fb      	ldr	r3, [r7, #12]
 8000a76:	68fa      	ldr	r2, [r7, #12]
 8000a78:	6811      	ldr	r1, [r2, #0]
 8000a7a:	687a      	ldr	r2, [r7, #4]
 8000a7c:	6812      	ldr	r2, [r2, #0]
 8000a7e:	430a      	orrs	r2, r1
 8000a80:	601a      	str	r2, [r3, #0]

    /* Clear Rising Falling edge configuration */
    EXTI->RTSR &= ~EXTI_InitStruct->EXTI_Line;
 8000a82:	4923      	ldr	r1, [pc, #140]	; (8000b10 <EXTI_Init+0xe0>)
 8000a84:	4b22      	ldr	r3, [pc, #136]	; (8000b10 <EXTI_Init+0xe0>)
 8000a86:	689a      	ldr	r2, [r3, #8]
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	43db      	mvns	r3, r3
 8000a8e:	4013      	ands	r3, r2
 8000a90:	608b      	str	r3, [r1, #8]
    EXTI->FTSR &= ~EXTI_InitStruct->EXTI_Line;
 8000a92:	491f      	ldr	r1, [pc, #124]	; (8000b10 <EXTI_Init+0xe0>)
 8000a94:	4b1e      	ldr	r3, [pc, #120]	; (8000b10 <EXTI_Init+0xe0>)
 8000a96:	68da      	ldr	r2, [r3, #12]
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	43db      	mvns	r3, r3
 8000a9e:	4013      	ands	r3, r2
 8000aa0:	60cb      	str	r3, [r1, #12]
    
    /* Select the trigger for the selected external interrupts */
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	795b      	ldrb	r3, [r3, #5]
 8000aa6:	2b10      	cmp	r3, #16
 8000aa8:	d10e      	bne.n	8000ac8 <EXTI_Init+0x98>
    {
      /* Rising Falling edge */
      EXTI->RTSR |= EXTI_InitStruct->EXTI_Line;
 8000aaa:	4919      	ldr	r1, [pc, #100]	; (8000b10 <EXTI_Init+0xe0>)
 8000aac:	4b18      	ldr	r3, [pc, #96]	; (8000b10 <EXTI_Init+0xe0>)
 8000aae:	689a      	ldr	r2, [r3, #8]
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	4313      	orrs	r3, r2
 8000ab6:	608b      	str	r3, [r1, #8]
      EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
 8000ab8:	4915      	ldr	r1, [pc, #84]	; (8000b10 <EXTI_Init+0xe0>)
 8000aba:	4b15      	ldr	r3, [pc, #84]	; (8000b10 <EXTI_Init+0xe0>)
 8000abc:	68da      	ldr	r2, [r3, #12]
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	4313      	orrs	r3, r2
 8000ac4:	60cb      	str	r3, [r1, #12]
    tmp += EXTI_InitStruct->EXTI_Mode;

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
  }
}
 8000ac6:	e01d      	b.n	8000b04 <EXTI_Init+0xd4>
      EXTI->RTSR |= EXTI_InitStruct->EXTI_Line;
      EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
    }
    else
    {
      tmp = (uint32_t)EXTI_BASE;
 8000ac8:	4b11      	ldr	r3, [pc, #68]	; (8000b10 <EXTI_Init+0xe0>)
 8000aca:	60fb      	str	r3, [r7, #12]
      tmp += EXTI_InitStruct->EXTI_Trigger;
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	795b      	ldrb	r3, [r3, #5]
 8000ad0:	461a      	mov	r2, r3
 8000ad2:	68fb      	ldr	r3, [r7, #12]
 8000ad4:	4413      	add	r3, r2
 8000ad6:	60fb      	str	r3, [r7, #12]

      *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 8000ad8:	68fb      	ldr	r3, [r7, #12]
 8000ada:	68fa      	ldr	r2, [r7, #12]
 8000adc:	6811      	ldr	r1, [r2, #0]
 8000ade:	687a      	ldr	r2, [r7, #4]
 8000ae0:	6812      	ldr	r2, [r2, #0]
 8000ae2:	430a      	orrs	r2, r1
 8000ae4:	601a      	str	r2, [r3, #0]
    tmp += EXTI_InitStruct->EXTI_Mode;

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
  }
}
 8000ae6:	e00d      	b.n	8000b04 <EXTI_Init+0xd4>
      *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
    }
  }
  else
  {
    tmp += EXTI_InitStruct->EXTI_Mode;
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	791b      	ldrb	r3, [r3, #4]
 8000aec:	461a      	mov	r2, r3
 8000aee:	68fb      	ldr	r3, [r7, #12]
 8000af0:	4413      	add	r3, r2
 8000af2:	60fb      	str	r3, [r7, #12]

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
 8000af4:	68fb      	ldr	r3, [r7, #12]
 8000af6:	68fa      	ldr	r2, [r7, #12]
 8000af8:	6811      	ldr	r1, [r2, #0]
 8000afa:	687a      	ldr	r2, [r7, #4]
 8000afc:	6812      	ldr	r2, [r2, #0]
 8000afe:	43d2      	mvns	r2, r2
 8000b00:	400a      	ands	r2, r1
 8000b02:	601a      	str	r2, [r3, #0]
  }
}
 8000b04:	bf00      	nop
 8000b06:	3714      	adds	r7, #20
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	bc80      	pop	{r7}
 8000b0c:	4770      	bx	lr
 8000b0e:	bf00      	nop
 8000b10:	40010400 	.word	0x40010400

08000b14 <EXTI_GetITStatus>:
  *   This parameter can be:
  *   EXTI_Linex: External interrupt line x where x(0..23).
  * @retval The new state of EXTI_Line (SET or RESET).
  */
ITStatus EXTI_GetITStatus(uint32_t EXTI_Line)
{
 8000b14:	b480      	push	{r7}
 8000b16:	b085      	sub	sp, #20
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
  ITStatus bitstatus = RESET;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	73fb      	strb	r3, [r7, #15]
  uint32_t enablestatus = 0;
 8000b20:	2300      	movs	r3, #0
 8000b22:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));
  
  enablestatus =  EXTI->IMR & EXTI_Line;
 8000b24:	4b0c      	ldr	r3, [pc, #48]	; (8000b58 <EXTI_GetITStatus+0x44>)
 8000b26:	681a      	ldr	r2, [r3, #0]
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	4013      	ands	r3, r2
 8000b2c:	60bb      	str	r3, [r7, #8]
  if (((EXTI->PR & EXTI_Line) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
 8000b2e:	4b0a      	ldr	r3, [pc, #40]	; (8000b58 <EXTI_GetITStatus+0x44>)
 8000b30:	695a      	ldr	r2, [r3, #20]
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	4013      	ands	r3, r2
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d005      	beq.n	8000b46 <EXTI_GetITStatus+0x32>
 8000b3a:	68bb      	ldr	r3, [r7, #8]
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d002      	beq.n	8000b46 <EXTI_GetITStatus+0x32>
  {
    bitstatus = SET;
 8000b40:	2301      	movs	r3, #1
 8000b42:	73fb      	strb	r3, [r7, #15]
 8000b44:	e001      	b.n	8000b4a <EXTI_GetITStatus+0x36>
  }
  else
  {
    bitstatus = RESET;
 8000b46:	2300      	movs	r3, #0
 8000b48:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000b4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	3714      	adds	r7, #20
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bc80      	pop	{r7}
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop
 8000b58:	40010400 	.word	0x40010400

08000b5c <EXTI_ClearITPendingBit>:
  * @param  EXTI_Line: specifies the EXTI lines to clear.
  *   This parameter can be any combination of EXTI_Linex where x can be (0..23).
  * @retval None
  */
void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	b083      	sub	sp, #12
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->PR = EXTI_Line;
 8000b64:	4a03      	ldr	r2, [pc, #12]	; (8000b74 <EXTI_ClearITPendingBit+0x18>)
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	6153      	str	r3, [r2, #20]
}
 8000b6a:	bf00      	nop
 8000b6c:	370c      	adds	r7, #12
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bc80      	pop	{r7}
 8000b72:	4770      	bx	lr
 8000b74:	40010400 	.word	0x40010400

08000b78 <GPIO_Init>:
  *         peripheral.

  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	b087      	sub	sp, #28
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
 8000b80:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 8000b82:	2300      	movs	r3, #0
 8000b84:	617b      	str	r3, [r7, #20]
 8000b86:	2300      	movs	r3, #0
 8000b88:	613b      	str	r3, [r7, #16]
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000b8e:	2300      	movs	r3, #0
 8000b90:	617b      	str	r3, [r7, #20]
 8000b92:	e07e      	b.n	8000c92 <GPIO_Init+0x11a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 8000b94:	2201      	movs	r2, #1
 8000b96:	697b      	ldr	r3, [r7, #20]
 8000b98:	fa02 f303 	lsl.w	r3, r2, r3
 8000b9c:	613b      	str	r3, [r7, #16]

    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8000b9e:	683b      	ldr	r3, [r7, #0]
 8000ba0:	681a      	ldr	r2, [r3, #0]
 8000ba2:	693b      	ldr	r3, [r7, #16]
 8000ba4:	4013      	ands	r3, r2
 8000ba6:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 8000ba8:	68fa      	ldr	r2, [r7, #12]
 8000baa:	693b      	ldr	r3, [r7, #16]
 8000bac:	429a      	cmp	r2, r3
 8000bae:	d16d      	bne.n	8000c8c <GPIO_Init+0x114>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	681a      	ldr	r2, [r3, #0]
 8000bb4:	697b      	ldr	r3, [r7, #20]
 8000bb6:	005b      	lsls	r3, r3, #1
 8000bb8:	2103      	movs	r1, #3
 8000bba:	fa01 f303 	lsl.w	r3, r1, r3
 8000bbe:	43db      	mvns	r3, r3
 8000bc0:	401a      	ands	r2, r3
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	601a      	str	r2, [r3, #0]

      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	681a      	ldr	r2, [r3, #0]
 8000bca:	683b      	ldr	r3, [r7, #0]
 8000bcc:	791b      	ldrb	r3, [r3, #4]
 8000bce:	4619      	mov	r1, r3
 8000bd0:	697b      	ldr	r3, [r7, #20]
 8000bd2:	005b      	lsls	r3, r3, #1
 8000bd4:	fa01 f303 	lsl.w	r3, r1, r3
 8000bd8:	431a      	orrs	r2, r3
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8000bde:	683b      	ldr	r3, [r7, #0]
 8000be0:	791b      	ldrb	r3, [r3, #4]
 8000be2:	2b01      	cmp	r3, #1
 8000be4:	d003      	beq.n	8000bee <GPIO_Init+0x76>
 8000be6:	683b      	ldr	r3, [r7, #0]
 8000be8:	791b      	ldrb	r3, [r3, #4]
 8000bea:	2b02      	cmp	r3, #2
 8000bec:	d136      	bne.n	8000c5c <GPIO_Init+0xe4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	689a      	ldr	r2, [r3, #8]
 8000bf2:	697b      	ldr	r3, [r7, #20]
 8000bf4:	005b      	lsls	r3, r3, #1
 8000bf6:	2103      	movs	r1, #3
 8000bf8:	fa01 f303 	lsl.w	r3, r1, r3
 8000bfc:	43db      	mvns	r3, r3
 8000bfe:	401a      	ands	r2, r3
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	689a      	ldr	r2, [r3, #8]
 8000c08:	683b      	ldr	r3, [r7, #0]
 8000c0a:	795b      	ldrb	r3, [r3, #5]
 8000c0c:	4619      	mov	r1, r3
 8000c0e:	697b      	ldr	r3, [r7, #20]
 8000c10:	005b      	lsls	r3, r3, #1
 8000c12:	fa01 f303 	lsl.w	r3, r1, r3
 8000c16:	431a      	orrs	r2, r3
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	609a      	str	r2, [r3, #8]

        /*Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration */
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	889b      	ldrh	r3, [r3, #4]
 8000c20:	b29a      	uxth	r2, r3
 8000c22:	697b      	ldr	r3, [r7, #20]
 8000c24:	b29b      	uxth	r3, r3
 8000c26:	2101      	movs	r1, #1
 8000c28:	fa01 f303 	lsl.w	r3, r1, r3
 8000c2c:	b29b      	uxth	r3, r3
 8000c2e:	43db      	mvns	r3, r3
 8000c30:	b29b      	uxth	r3, r3
 8000c32:	4013      	ands	r3, r2
 8000c34:	b29a      	uxth	r2, r3
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	809a      	strh	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	889b      	ldrh	r3, [r3, #4]
 8000c3e:	b29b      	uxth	r3, r3
 8000c40:	b21a      	sxth	r2, r3
 8000c42:	683b      	ldr	r3, [r7, #0]
 8000c44:	799b      	ldrb	r3, [r3, #6]
 8000c46:	4619      	mov	r1, r3
 8000c48:	697b      	ldr	r3, [r7, #20]
 8000c4a:	b29b      	uxth	r3, r3
 8000c4c:	fa01 f303 	lsl.w	r3, r1, r3
 8000c50:	b21b      	sxth	r3, r3
 8000c52:	4313      	orrs	r3, r2
 8000c54:	b21b      	sxth	r3, r3
 8000c56:	b29a      	uxth	r2, r3
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	809a      	strh	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	68da      	ldr	r2, [r3, #12]
 8000c60:	697b      	ldr	r3, [r7, #20]
 8000c62:	b29b      	uxth	r3, r3
 8000c64:	005b      	lsls	r3, r3, #1
 8000c66:	2103      	movs	r1, #3
 8000c68:	fa01 f303 	lsl.w	r3, r1, r3
 8000c6c:	43db      	mvns	r3, r3
 8000c6e:	401a      	ands	r2, r3
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	68da      	ldr	r2, [r3, #12]
 8000c78:	683b      	ldr	r3, [r7, #0]
 8000c7a:	79db      	ldrb	r3, [r3, #7]
 8000c7c:	4619      	mov	r1, r3
 8000c7e:	697b      	ldr	r3, [r7, #20]
 8000c80:	005b      	lsls	r3, r3, #1
 8000c82:	fa01 f303 	lsl.w	r3, r1, r3
 8000c86:	431a      	orrs	r2, r3
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	60da      	str	r2, [r3, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000c8c:	697b      	ldr	r3, [r7, #20]
 8000c8e:	3301      	adds	r3, #1
 8000c90:	617b      	str	r3, [r7, #20]
 8000c92:	697b      	ldr	r3, [r7, #20]
 8000c94:	2b0f      	cmp	r3, #15
 8000c96:	f67f af7d 	bls.w	8000b94 <GPIO_Init+0x1c>
      /* Pull-up Pull down resistor configuration */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
    }
  }
}
 8000c9a:	bf00      	nop
 8000c9c:	371c      	adds	r7, #28
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bc80      	pop	{r7}
 8000ca2:	4770      	bx	lr

08000ca4 <GPIO_PinAFConfig>:
  *        alternate function I/O pins.  
  * @note EVENTOUT is not mapped on PH0, PH1 and PH2.  
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	b085      	sub	sp, #20
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
 8000cac:	460b      	mov	r3, r1
 8000cae:	807b      	strh	r3, [r7, #2]
 8000cb0:	4613      	mov	r3, r2
 8000cb2:	707b      	strb	r3, [r7, #1]
  uint32_t temp = 0x00;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8000cbc:	787a      	ldrb	r2, [r7, #1]
 8000cbe:	887b      	ldrh	r3, [r7, #2]
 8000cc0:	f003 0307 	and.w	r3, r3, #7
 8000cc4:	009b      	lsls	r3, r3, #2
 8000cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cca:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8000ccc:	887b      	ldrh	r3, [r7, #2]
 8000cce:	08db      	lsrs	r3, r3, #3
 8000cd0:	b29b      	uxth	r3, r3
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	887b      	ldrh	r3, [r7, #2]
 8000cd6:	08db      	lsrs	r3, r3, #3
 8000cd8:	b29b      	uxth	r3, r3
 8000cda:	461a      	mov	r2, r3
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	3208      	adds	r2, #8
 8000ce0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000ce4:	887b      	ldrh	r3, [r7, #2]
 8000ce6:	f003 0307 	and.w	r3, r3, #7
 8000cea:	009b      	lsls	r3, r3, #2
 8000cec:	210f      	movs	r1, #15
 8000cee:	fa01 f303 	lsl.w	r3, r1, r3
 8000cf2:	43db      	mvns	r3, r3
 8000cf4:	ea02 0103 	and.w	r1, r2, r3
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	f100 0208 	add.w	r2, r0, #8
 8000cfe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 8000d02:	887b      	ldrh	r3, [r7, #2]
 8000d04:	08db      	lsrs	r3, r3, #3
 8000d06:	b29b      	uxth	r3, r3
 8000d08:	461a      	mov	r2, r3
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	3208      	adds	r2, #8
 8000d0e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000d12:	68fb      	ldr	r3, [r7, #12]
 8000d14:	4313      	orrs	r3, r2
 8000d16:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 8000d18:	887b      	ldrh	r3, [r7, #2]
 8000d1a:	08db      	lsrs	r3, r3, #3
 8000d1c:	b29b      	uxth	r3, r3
 8000d1e:	461a      	mov	r2, r3
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	3208      	adds	r2, #8
 8000d24:	68b9      	ldr	r1, [r7, #8]
 8000d26:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8000d2a:	bf00      	nop
 8000d2c:	3714      	adds	r7, #20
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bc80      	pop	{r7}
 8000d32:	4770      	bx	lr

08000d34 <RCC_AHBPeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHBPeriphClockCmd(uint32_t RCC_AHBPeriph, FunctionalState NewState)
{
 8000d34:	b480      	push	{r7}
 8000d36:	b083      	sub	sp, #12
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
 8000d3c:	460b      	mov	r3, r1
 8000d3e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000d40:	78fb      	ldrb	r3, [r7, #3]
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d006      	beq.n	8000d54 <RCC_AHBPeriphClockCmd+0x20>
  {
    RCC->AHBENR |= RCC_AHBPeriph;
 8000d46:	4909      	ldr	r1, [pc, #36]	; (8000d6c <RCC_AHBPeriphClockCmd+0x38>)
 8000d48:	4b08      	ldr	r3, [pc, #32]	; (8000d6c <RCC_AHBPeriphClockCmd+0x38>)
 8000d4a:	69da      	ldr	r2, [r3, #28]
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	4313      	orrs	r3, r2
 8000d50:	61cb      	str	r3, [r1, #28]
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
  }
}
 8000d52:	e006      	b.n	8000d62 <RCC_AHBPeriphClockCmd+0x2e>
  {
    RCC->AHBENR |= RCC_AHBPeriph;
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
 8000d54:	4905      	ldr	r1, [pc, #20]	; (8000d6c <RCC_AHBPeriphClockCmd+0x38>)
 8000d56:	4b05      	ldr	r3, [pc, #20]	; (8000d6c <RCC_AHBPeriphClockCmd+0x38>)
 8000d58:	69da      	ldr	r2, [r3, #28]
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	43db      	mvns	r3, r3
 8000d5e:	4013      	ands	r3, r2
 8000d60:	61cb      	str	r3, [r1, #28]
  }
}
 8000d62:	bf00      	nop
 8000d64:	370c      	adds	r7, #12
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bc80      	pop	{r7}
 8000d6a:	4770      	bx	lr
 8000d6c:	40023800 	.word	0x40023800

08000d70 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8000d70:	b480      	push	{r7}
 8000d72:	b083      	sub	sp, #12
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
 8000d78:	460b      	mov	r3, r1
 8000d7a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000d7c:	78fb      	ldrb	r3, [r7, #3]
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d006      	beq.n	8000d90 <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8000d82:	4909      	ldr	r1, [pc, #36]	; (8000da8 <RCC_APB2PeriphClockCmd+0x38>)
 8000d84:	4b08      	ldr	r3, [pc, #32]	; (8000da8 <RCC_APB2PeriphClockCmd+0x38>)
 8000d86:	6a1a      	ldr	r2, [r3, #32]
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	4313      	orrs	r3, r2
 8000d8c:	620b      	str	r3, [r1, #32]
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 8000d8e:	e006      	b.n	8000d9e <RCC_APB2PeriphClockCmd+0x2e>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8000d90:	4905      	ldr	r1, [pc, #20]	; (8000da8 <RCC_APB2PeriphClockCmd+0x38>)
 8000d92:	4b05      	ldr	r3, [pc, #20]	; (8000da8 <RCC_APB2PeriphClockCmd+0x38>)
 8000d94:	6a1a      	ldr	r2, [r3, #32]
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	43db      	mvns	r3, r3
 8000d9a:	4013      	ands	r3, r2
 8000d9c:	620b      	str	r3, [r1, #32]
  }
}
 8000d9e:	bf00      	nop
 8000da0:	370c      	adds	r7, #12
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bc80      	pop	{r7}
 8000da6:	4770      	bx	lr
 8000da8:	40023800 	.word	0x40023800

08000dac <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8000dac:	b480      	push	{r7}
 8000dae:	b083      	sub	sp, #12
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
 8000db4:	460b      	mov	r3, r1
 8000db6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000db8:	78fb      	ldrb	r3, [r7, #3]
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d006      	beq.n	8000dcc <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8000dbe:	4909      	ldr	r1, [pc, #36]	; (8000de4 <RCC_APB1PeriphClockCmd+0x38>)
 8000dc0:	4b08      	ldr	r3, [pc, #32]	; (8000de4 <RCC_APB1PeriphClockCmd+0x38>)
 8000dc2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	4313      	orrs	r3, r2
 8000dc8:	624b      	str	r3, [r1, #36]	; 0x24
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 8000dca:	e006      	b.n	8000dda <RCC_APB1PeriphClockCmd+0x2e>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8000dcc:	4905      	ldr	r1, [pc, #20]	; (8000de4 <RCC_APB1PeriphClockCmd+0x38>)
 8000dce:	4b05      	ldr	r3, [pc, #20]	; (8000de4 <RCC_APB1PeriphClockCmd+0x38>)
 8000dd0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	43db      	mvns	r3, r3
 8000dd6:	4013      	ands	r3, r2
 8000dd8:	624b      	str	r3, [r1, #36]	; 0x24
  }
}
 8000dda:	bf00      	nop
 8000ddc:	370c      	adds	r7, #12
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bc80      	pop	{r7}
 8000de2:	4770      	bx	lr
 8000de4:	40023800 	.word	0x40023800

08000de8 <SPI_Init>:
  * @param  SPI_InitStruct: pointer to a SPI_InitTypeDef structure that
  *         contains the configuration information for the specified SPI peripheral.
  * @retval None
  */
void SPI_Init(SPI_TypeDef* SPIx, SPI_InitTypeDef* SPI_InitStruct)
{
 8000de8:	b480      	push	{r7}
 8000dea:	b085      	sub	sp, #20
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
 8000df0:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8000df2:	2300      	movs	r3, #0
 8000df4:	81fb      	strh	r3, [r7, #14]
  assert_param(IS_SPI_FIRST_BIT(SPI_InitStruct->SPI_FirstBit));
  assert_param(IS_SPI_CRC_POLYNOMIAL(SPI_InitStruct->SPI_CRCPolynomial));

/*---------------------------- SPIx CR1 Configuration ------------------------*/
  /* Get the SPIx CR1 value */
  tmpreg = SPIx->CR1;
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	881b      	ldrh	r3, [r3, #0]
 8000dfa:	81fb      	strh	r3, [r7, #14]
  /* Clear BIDIMode, BIDIOE, RxONLY, SSM, SSI, LSBFirst, BR, MSTR, CPOL and CPHA bits */
  tmpreg &= CR1_CLEAR_MASK;
 8000dfc:	89fb      	ldrh	r3, [r7, #14]
 8000dfe:	f403 5341 	and.w	r3, r3, #12352	; 0x3040
 8000e02:	81fb      	strh	r3, [r7, #14]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8000e04:	683b      	ldr	r3, [r7, #0]
 8000e06:	881a      	ldrh	r2, [r3, #0]
 8000e08:	683b      	ldr	r3, [r7, #0]
 8000e0a:	885b      	ldrh	r3, [r3, #2]
 8000e0c:	4313      	orrs	r3, r2
 8000e0e:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 8000e10:	683b      	ldr	r3, [r7, #0]
 8000e12:	889b      	ldrh	r3, [r3, #4]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8000e14:	4313      	orrs	r3, r2
 8000e16:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 8000e18:	683b      	ldr	r3, [r7, #0]
 8000e1a:	88db      	ldrh	r3, [r3, #6]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8000e1c:	4313      	orrs	r3, r2
 8000e1e:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
 8000e20:	683b      	ldr	r3, [r7, #0]
 8000e22:	891b      	ldrh	r3, [r3, #8]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8000e24:	4313      	orrs	r3, r2
 8000e26:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
 8000e28:	683b      	ldr	r3, [r7, #0]
 8000e2a:	895b      	ldrh	r3, [r3, #10]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8000e2c:	4313      	orrs	r3, r2
 8000e2e:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
 8000e30:	683b      	ldr	r3, [r7, #0]
 8000e32:	899b      	ldrh	r3, [r3, #12]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8000e34:	4313      	orrs	r3, r2
 8000e36:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
 8000e38:	683b      	ldr	r3, [r7, #0]
 8000e3a:	89db      	ldrh	r3, [r3, #14]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8000e3c:	4313      	orrs	r3, r2
 8000e3e:	b29a      	uxth	r2, r3
 8000e40:	89fb      	ldrh	r3, [r7, #14]
 8000e42:	4313      	orrs	r3, r2
 8000e44:	81fb      	strh	r3, [r7, #14]
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
  /* Write to SPIx CR1 */
  SPIx->CR1 = tmpreg;
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	89fa      	ldrh	r2, [r7, #14]
 8000e4a:	801a      	strh	r2, [r3, #0]

  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  SPIx->I2SCFGR &= (uint16_t)~((uint16_t)SPI_I2SCFGR_I2SMOD);
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	8b9b      	ldrh	r3, [r3, #28]
 8000e50:	b29b      	uxth	r3, r3
 8000e52:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000e56:	b29a      	uxth	r2, r3
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	839a      	strh	r2, [r3, #28]
/*---------------------------- SPIx CRCPOLY Configuration --------------------*/
  /* Write to SPIx CRCPOLY */
  SPIx->CRCPR = SPI_InitStruct->SPI_CRCPolynomial;
 8000e5c:	683b      	ldr	r3, [r7, #0]
 8000e5e:	8a1a      	ldrh	r2, [r3, #16]
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	821a      	strh	r2, [r3, #16]
}
 8000e64:	bf00      	nop
 8000e66:	3714      	adds	r7, #20
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bc80      	pop	{r7}
 8000e6c:	4770      	bx	lr
 8000e6e:	bf00      	nop

08000e70 <SPI_Cmd>:
  * @param  NewState: new state of the SPIx peripheral. 
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 8000e70:	b480      	push	{r7}
 8000e72:	b083      	sub	sp, #12
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
 8000e78:	460b      	mov	r3, r1
 8000e7a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000e7c:	78fb      	ldrb	r3, [r7, #3]
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d008      	beq.n	8000e94 <SPI_Cmd+0x24>
  {
    /* Enable the selected SPI peripheral */
    SPIx->CR1 |= SPI_CR1_SPE;
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	881b      	ldrh	r3, [r3, #0]
 8000e86:	b29b      	uxth	r3, r3
 8000e88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e8c:	b29a      	uxth	r2, r3
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the selected SPI peripheral */
    SPIx->CR1 &= (uint16_t)~((uint16_t)SPI_CR1_SPE);
  }
}
 8000e92:	e007      	b.n	8000ea4 <SPI_Cmd+0x34>
    SPIx->CR1 |= SPI_CR1_SPE;
  }
  else
  {
    /* Disable the selected SPI peripheral */
    SPIx->CR1 &= (uint16_t)~((uint16_t)SPI_CR1_SPE);
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	881b      	ldrh	r3, [r3, #0]
 8000e98:	b29b      	uxth	r3, r3
 8000e9a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000e9e:	b29a      	uxth	r2, r3
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	801a      	strh	r2, [r3, #0]
  }
}
 8000ea4:	bf00      	nop
 8000ea6:	370c      	adds	r7, #12
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	bc80      	pop	{r7}
 8000eac:	4770      	bx	lr
 8000eae:	bf00      	nop

08000eb0 <SPI_I2S_GetFlagStatus>:
  *     @arg I2S_FLAG_UDR: Underrun Error flag.
  *     @arg I2S_FLAG_CHSIDE: Channel Side flag.
  * @retval The new state of SPI_I2S_FLAG (SET or RESET).
  */
FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	b085      	sub	sp, #20
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
 8000eb8:	460b      	mov	r3, r1
 8000eba:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));
  
  /* Check the status of the specified SPI flag */
  if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	891b      	ldrh	r3, [r3, #8]
 8000ec4:	b29a      	uxth	r2, r3
 8000ec6:	887b      	ldrh	r3, [r7, #2]
 8000ec8:	4013      	ands	r3, r2
 8000eca:	b29b      	uxth	r3, r3
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d002      	beq.n	8000ed6 <SPI_I2S_GetFlagStatus+0x26>
  {
    /* SPI_I2S_FLAG is set */
    bitstatus = SET;
 8000ed0:	2301      	movs	r3, #1
 8000ed2:	73fb      	strb	r3, [r7, #15]
 8000ed4:	e001      	b.n	8000eda <SPI_I2S_GetFlagStatus+0x2a>
  }
  else
  {
    /* SPI_I2S_FLAG is reset */
    bitstatus = RESET;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the SPI_I2S_FLAG status */
  return  bitstatus;
 8000eda:	7bfb      	ldrb	r3, [r7, #15]
}
 8000edc:	4618      	mov	r0, r3
 8000ede:	3714      	adds	r7, #20
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bc80      	pop	{r7}
 8000ee4:	4770      	bx	lr
 8000ee6:	bf00      	nop

08000ee8 <SYSCFG_EXTILineConfig>:
  * @param  EXTI_PinSourcex: specifies the EXTI line to be configured.
  *         This parameter can be EXTI_PinSourcex where x can be (0..15).
  * @retval None
  */
void SYSCFG_EXTILineConfig(uint8_t EXTI_PortSourceGPIOx, uint8_t EXTI_PinSourcex)
{
 8000ee8:	b490      	push	{r4, r7}
 8000eea:	b084      	sub	sp, #16
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	4603      	mov	r3, r0
 8000ef0:	460a      	mov	r2, r1
 8000ef2:	71fb      	strb	r3, [r7, #7]
 8000ef4:	4613      	mov	r3, r2
 8000ef6:	71bb      	strb	r3, [r7, #6]
  uint32_t tmp = 0x00;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_EXTI_PORT_SOURCE(EXTI_PortSourceGPIOx));
  assert_param(IS_EXTI_PIN_SOURCE(EXTI_PinSourcex));
  
  tmp = ((uint32_t)0x0F) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03));
 8000efc:	79bb      	ldrb	r3, [r7, #6]
 8000efe:	f003 0303 	and.w	r3, r3, #3
 8000f02:	009b      	lsls	r3, r3, #2
 8000f04:	220f      	movs	r2, #15
 8000f06:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0a:	60fb      	str	r3, [r7, #12]
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] &= ~tmp;
 8000f0c:	4916      	ldr	r1, [pc, #88]	; (8000f68 <SYSCFG_EXTILineConfig+0x80>)
 8000f0e:	79bb      	ldrb	r3, [r7, #6]
 8000f10:	089b      	lsrs	r3, r3, #2
 8000f12:	b2db      	uxtb	r3, r3
 8000f14:	4618      	mov	r0, r3
 8000f16:	4a14      	ldr	r2, [pc, #80]	; (8000f68 <SYSCFG_EXTILineConfig+0x80>)
 8000f18:	79bb      	ldrb	r3, [r7, #6]
 8000f1a:	089b      	lsrs	r3, r3, #2
 8000f1c:	b2db      	uxtb	r3, r3
 8000f1e:	3302      	adds	r3, #2
 8000f20:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	43db      	mvns	r3, r3
 8000f28:	401a      	ands	r2, r3
 8000f2a:	1c83      	adds	r3, r0, #2
 8000f2c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] |= (((uint32_t)EXTI_PortSourceGPIOx) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03)));
 8000f30:	480d      	ldr	r0, [pc, #52]	; (8000f68 <SYSCFG_EXTILineConfig+0x80>)
 8000f32:	79bb      	ldrb	r3, [r7, #6]
 8000f34:	089b      	lsrs	r3, r3, #2
 8000f36:	b2db      	uxtb	r3, r3
 8000f38:	461c      	mov	r4, r3
 8000f3a:	4a0b      	ldr	r2, [pc, #44]	; (8000f68 <SYSCFG_EXTILineConfig+0x80>)
 8000f3c:	79bb      	ldrb	r3, [r7, #6]
 8000f3e:	089b      	lsrs	r3, r3, #2
 8000f40:	b2db      	uxtb	r3, r3
 8000f42:	3302      	adds	r3, #2
 8000f44:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000f48:	79f9      	ldrb	r1, [r7, #7]
 8000f4a:	79bb      	ldrb	r3, [r7, #6]
 8000f4c:	f003 0303 	and.w	r3, r3, #3
 8000f50:	009b      	lsls	r3, r3, #2
 8000f52:	fa01 f303 	lsl.w	r3, r1, r3
 8000f56:	431a      	orrs	r2, r3
 8000f58:	1ca3      	adds	r3, r4, #2
 8000f5a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 8000f5e:	bf00      	nop
 8000f60:	3710      	adds	r7, #16
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bc90      	pop	{r4, r7}
 8000f66:	4770      	bx	lr
 8000f68:	40010000 	.word	0x40010000

08000f6c <TIM_TimeBaseInit>:
  *         structure that contains the configuration information for
  *         the specified TIM peripheral.
  * @retval None
  */
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	b085      	sub	sp, #20
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
 8000f74:	6039      	str	r1, [r7, #0]
  uint16_t tmpcr1 = 0;
 8000f76:	2300      	movs	r3, #0
 8000f78:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	881b      	ldrh	r3, [r3, #0]
 8000f7e:	81fb      	strh	r3, [r7, #14]

  if(((TIMx) == TIM2) || ((TIMx) == TIM3) || ((TIMx) == TIM4) || ((TIMx) == TIM5))
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000f86:	d00b      	beq.n	8000fa0 <TIM_TimeBaseInit+0x34>
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	4a1c      	ldr	r2, [pc, #112]	; (8000ffc <TIM_TimeBaseInit+0x90>)
 8000f8c:	4293      	cmp	r3, r2
 8000f8e:	d007      	beq.n	8000fa0 <TIM_TimeBaseInit+0x34>
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	4a1b      	ldr	r2, [pc, #108]	; (8001000 <TIM_TimeBaseInit+0x94>)
 8000f94:	4293      	cmp	r3, r2
 8000f96:	d003      	beq.n	8000fa0 <TIM_TimeBaseInit+0x34>
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	4a1a      	ldr	r2, [pc, #104]	; (8001004 <TIM_TimeBaseInit+0x98>)
 8000f9c:	4293      	cmp	r3, r2
 8000f9e:	d108      	bne.n	8000fb2 <TIM_TimeBaseInit+0x46>
  {											
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~((uint16_t)(TIM_CR1_DIR | TIM_CR1_CMS)));
 8000fa0:	89fb      	ldrh	r3, [r7, #14]
 8000fa2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000fa6:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	885a      	ldrh	r2, [r3, #2]
 8000fac:	89fb      	ldrh	r3, [r7, #14]
 8000fae:	4313      	orrs	r3, r2
 8000fb0:	81fb      	strh	r3, [r7, #14]
  }
 
  if(((TIMx) != TIM6) && ((TIMx) != TIM7))
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	4a14      	ldr	r2, [pc, #80]	; (8001008 <TIM_TimeBaseInit+0x9c>)
 8000fb6:	4293      	cmp	r3, r2
 8000fb8:	d00c      	beq.n	8000fd4 <TIM_TimeBaseInit+0x68>
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	4a13      	ldr	r2, [pc, #76]	; (800100c <TIM_TimeBaseInit+0xa0>)
 8000fbe:	4293      	cmp	r3, r2
 8000fc0:	d008      	beq.n	8000fd4 <TIM_TimeBaseInit+0x68>
  {
    /* Set the clock division */
    tmpcr1 &= (uint16_t)(~((uint16_t)TIM_CR1_CKD));
 8000fc2:	89fb      	ldrh	r3, [r7, #14]
 8000fc4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000fc8:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 8000fca:	683b      	ldr	r3, [r7, #0]
 8000fcc:	891a      	ldrh	r2, [r3, #8]
 8000fce:	89fb      	ldrh	r3, [r7, #14]
 8000fd0:	4313      	orrs	r3, r2
 8000fd2:	81fb      	strh	r3, [r7, #14]
  }

  TIMx->CR1 = tmpcr1;
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	89fa      	ldrh	r2, [r7, #14]
 8000fd8:	801a      	strh	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	685a      	ldr	r2, [r3, #4]
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	62da      	str	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 8000fe2:	683b      	ldr	r3, [r7, #0]
 8000fe4:	881a      	ldrh	r2, [r3, #0]
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	851a      	strh	r2, [r3, #40]	; 0x28
    
  /* Generate an update event to reload the Prescaler value immediatly */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;          
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	2201      	movs	r2, #1
 8000fee:	829a      	strh	r2, [r3, #20]
}
 8000ff0:	bf00      	nop
 8000ff2:	3714      	adds	r7, #20
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bc80      	pop	{r7}
 8000ff8:	4770      	bx	lr
 8000ffa:	bf00      	nop
 8000ffc:	40000400 	.word	0x40000400
 8001000:	40000800 	.word	0x40000800
 8001004:	40000c00 	.word	0x40000c00
 8001008:	40001000 	.word	0x40001000
 800100c:	40001400 	.word	0x40001400

08001010 <TIM_SetCounter>:
  * @param  TIMx: where x can be 2 to 11 to select the TIM peripheral.
  * @param  Counter: specifies the Counter register new value.
  * @retval None
  */
void TIM_SetCounter(TIM_TypeDef* TIMx, uint32_t Counter)
{
 8001010:	b480      	push	{r7}
 8001012:	b083      	sub	sp, #12
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
 8001018:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
   assert_param(IS_TIM_ALL_PERIPH(TIMx));
   
  /* Set the Counter Register value */
  TIMx->CNT = Counter;
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	683a      	ldr	r2, [r7, #0]
 800101e:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001020:	bf00      	nop
 8001022:	370c      	adds	r7, #12
 8001024:	46bd      	mov	sp, r7
 8001026:	bc80      	pop	{r7}
 8001028:	4770      	bx	lr
 800102a:	bf00      	nop

0800102c <TIM_GetCounter>:
  * @brief  Gets the TIMx Counter value.
  * @param  TIMx: where x can be 2 to 11 to select the TIM peripheral.
  * @retval Counter Register value.
  */
uint32_t TIM_GetCounter(TIM_TypeDef* TIMx)
{
 800102c:	b480      	push	{r7}
 800102e:	b083      	sub	sp, #12
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  
  /* Get the Counter Register value */
  return TIMx->CNT;
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 8001038:	4618      	mov	r0, r3
 800103a:	370c      	adds	r7, #12
 800103c:	46bd      	mov	sp, r7
 800103e:	bc80      	pop	{r7}
 8001040:	4770      	bx	lr
 8001042:	bf00      	nop

08001044 <TIM_ARRPreloadConfig>:
  * @param  NewState: new state of the TIMx peripheral Preload register
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ARRPreloadConfig(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8001044:	b480      	push	{r7}
 8001046:	b083      	sub	sp, #12
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
 800104c:	460b      	mov	r3, r1
 800104e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8001050:	78fb      	ldrb	r3, [r7, #3]
 8001052:	2b00      	cmp	r3, #0
 8001054:	d008      	beq.n	8001068 <TIM_ARRPreloadConfig+0x24>
  {
    /* Set the ARR Preload Bit */
    TIMx->CR1 |= TIM_CR1_ARPE;
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	881b      	ldrh	r3, [r3, #0]
 800105a:	b29b      	uxth	r3, r3
 800105c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001060:	b29a      	uxth	r2, r3
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Reset the ARR Preload Bit */
    TIMx->CR1 &= (uint16_t)~((uint16_t)TIM_CR1_ARPE);
  }
}
 8001066:	e007      	b.n	8001078 <TIM_ARRPreloadConfig+0x34>
    TIMx->CR1 |= TIM_CR1_ARPE;
  }
  else
  {
    /* Reset the ARR Preload Bit */
    TIMx->CR1 &= (uint16_t)~((uint16_t)TIM_CR1_ARPE);
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	881b      	ldrh	r3, [r3, #0]
 800106c:	b29b      	uxth	r3, r3
 800106e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001072:	b29a      	uxth	r2, r3
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	801a      	strh	r2, [r3, #0]
  }
}
 8001078:	bf00      	nop
 800107a:	370c      	adds	r7, #12
 800107c:	46bd      	mov	sp, r7
 800107e:	bc80      	pop	{r7}
 8001080:	4770      	bx	lr
 8001082:	bf00      	nop

08001084 <TIM_Cmd>:
  * @param  NewState: new state of the TIMx peripheral.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8001084:	b480      	push	{r7}
 8001086:	b083      	sub	sp, #12
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
 800108c:	460b      	mov	r3, r1
 800108e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8001090:	78fb      	ldrb	r3, [r7, #3]
 8001092:	2b00      	cmp	r3, #0
 8001094:	d008      	beq.n	80010a8 <TIM_Cmd+0x24>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	881b      	ldrh	r3, [r3, #0]
 800109a:	b29b      	uxth	r3, r3
 800109c:	f043 0301 	orr.w	r3, r3, #1
 80010a0:	b29a      	uxth	r2, r3
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)(~((uint16_t)TIM_CR1_CEN));
  }
}
 80010a6:	e007      	b.n	80010b8 <TIM_Cmd+0x34>
    TIMx->CR1 |= TIM_CR1_CEN;
  }
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)(~((uint16_t)TIM_CR1_CEN));
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	881b      	ldrh	r3, [r3, #0]
 80010ac:	b29b      	uxth	r3, r3
 80010ae:	f023 0301 	bic.w	r3, r3, #1
 80010b2:	b29a      	uxth	r2, r3
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	801a      	strh	r2, [r3, #0]
  }
}
 80010b8:	bf00      	nop
 80010ba:	370c      	adds	r7, #12
 80010bc:	46bd      	mov	sp, r7
 80010be:	bc80      	pop	{r7}
 80010c0:	4770      	bx	lr
 80010c2:	bf00      	nop

080010c4 <TIM_OC1Init>:
  *         that contains the configuration information for the specified TIM 
  *         peripheral.
  * @retval None
  */
void TIM_OC1Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 80010c4:	b480      	push	{r7}
 80010c6:	b085      	sub	sp, #20
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
 80010cc:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0;
 80010ce:	2300      	movs	r3, #0
 80010d0:	81fb      	strh	r3, [r7, #14]
 80010d2:	2300      	movs	r3, #0
 80010d4:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)(~(uint16_t)TIM_CCER_CC1E);
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	8c1b      	ldrh	r3, [r3, #32]
 80010da:	b29b      	uxth	r3, r3
 80010dc:	f023 0301 	bic.w	r3, r3, #1
 80010e0:	b29a      	uxth	r2, r3
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	8c1b      	ldrh	r3, [r3, #32]
 80010ea:	81bb      	strh	r3, [r7, #12]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	8b1b      	ldrh	r3, [r3, #24]
 80010f0:	81fb      	strh	r3, [r7, #14]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_OC1M));
 80010f2:	89fb      	ldrh	r3, [r7, #14]
 80010f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80010f8:	81fb      	strh	r3, [r7, #14]
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_CC1S));
 80010fa:	89fb      	ldrh	r3, [r7, #14]
 80010fc:	f023 0303 	bic.w	r3, r3, #3
 8001100:	81fb      	strh	r3, [r7, #14]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	881a      	ldrh	r2, [r3, #0]
 8001106:	89fb      	ldrh	r3, [r7, #14]
 8001108:	4313      	orrs	r3, r2
 800110a:	81fb      	strh	r3, [r7, #14]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC1P));
 800110c:	89bb      	ldrh	r3, [r7, #12]
 800110e:	f023 0302 	bic.w	r3, r3, #2
 8001112:	81bb      	strh	r3, [r7, #12]
  /* Set the Output Compare Polarity */
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	891a      	ldrh	r2, [r3, #8]
 8001118:	89bb      	ldrh	r3, [r7, #12]
 800111a:	4313      	orrs	r3, r2
 800111c:	81bb      	strh	r3, [r7, #12]
  
  /* Set the Output State */
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
 800111e:	683b      	ldr	r3, [r7, #0]
 8001120:	885a      	ldrh	r2, [r3, #2]
 8001122:	89bb      	ldrh	r3, [r7, #12]
 8001124:	4313      	orrs	r3, r2
 8001126:	81bb      	strh	r3, [r7, #12]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = TIM_OCInitStruct->TIM_Pulse;
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	685a      	ldr	r2, [r3, #4]
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	635a      	str	r2, [r3, #52]	; 0x34
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	89fa      	ldrh	r2, [r7, #14]
 8001134:	831a      	strh	r2, [r3, #24]
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	89ba      	ldrh	r2, [r7, #12]
 800113a:	841a      	strh	r2, [r3, #32]
}
 800113c:	bf00      	nop
 800113e:	3714      	adds	r7, #20
 8001140:	46bd      	mov	sp, r7
 8001142:	bc80      	pop	{r7}
 8001144:	4770      	bx	lr
 8001146:	bf00      	nop

08001148 <TIM_OC1PreloadConfig>:
  *     @arg TIM_OCPreload_Enable: Enable TIM output compare Preload
  *     @arg TIM_OCPreload_Disable: Disable TIM output compare Preload
  * @retval None
  */
void TIM_OC1PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 8001148:	b480      	push	{r7}
 800114a:	b085      	sub	sp, #20
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
 8001150:	460b      	mov	r3, r1
 8001152:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
 8001154:	2300      	movs	r3, #0
 8001156:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));
  
  tmpccmr1 = TIMx->CCMR1;
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	8b1b      	ldrh	r3, [r3, #24]
 800115c:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC1PE Bit */
  tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC1PE);
 800115e:	89fb      	ldrh	r3, [r7, #14]
 8001160:	f023 0308 	bic.w	r3, r3, #8
 8001164:	81fb      	strh	r3, [r7, #14]
  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr1 |= TIM_OCPreload;
 8001166:	89fa      	ldrh	r2, [r7, #14]
 8001168:	887b      	ldrh	r3, [r7, #2]
 800116a:	4313      	orrs	r3, r2
 800116c:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	89fa      	ldrh	r2, [r7, #14]
 8001172:	831a      	strh	r2, [r3, #24]
}
 8001174:	bf00      	nop
 8001176:	3714      	adds	r7, #20
 8001178:	46bd      	mov	sp, r7
 800117a:	bc80      	pop	{r7}
 800117c:	4770      	bx	lr
 800117e:	bf00      	nop

08001180 <TIM_ITConfig>:
  * @param  NewState: new state of the TIM interrupts.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ITConfig(TIM_TypeDef* TIMx, uint16_t TIM_IT, FunctionalState NewState)
{  
 8001180:	b480      	push	{r7}
 8001182:	b083      	sub	sp, #12
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
 8001188:	460b      	mov	r3, r1
 800118a:	807b      	strh	r3, [r7, #2]
 800118c:	4613      	mov	r3, r2
 800118e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8001190:	787b      	ldrb	r3, [r7, #1]
 8001192:	2b00      	cmp	r3, #0
 8001194:	d008      	beq.n	80011a8 <TIM_ITConfig+0x28>
  {
    /* Enable the Interrupt sources */
    TIMx->DIER |= TIM_IT;
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	899b      	ldrh	r3, [r3, #12]
 800119a:	b29a      	uxth	r2, r3
 800119c:	887b      	ldrh	r3, [r7, #2]
 800119e:	4313      	orrs	r3, r2
 80011a0:	b29a      	uxth	r2, r3
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the Interrupt sources */
    TIMx->DIER &= (uint16_t)~TIM_IT;
  }
}
 80011a6:	e009      	b.n	80011bc <TIM_ITConfig+0x3c>
    TIMx->DIER |= TIM_IT;
  }
  else
  {
    /* Disable the Interrupt sources */
    TIMx->DIER &= (uint16_t)~TIM_IT;
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	899b      	ldrh	r3, [r3, #12]
 80011ac:	b29a      	uxth	r2, r3
 80011ae:	887b      	ldrh	r3, [r7, #2]
 80011b0:	43db      	mvns	r3, r3
 80011b2:	b29b      	uxth	r3, r3
 80011b4:	4013      	ands	r3, r2
 80011b6:	b29a      	uxth	r2, r3
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	819a      	strh	r2, [r3, #12]
  }
}
 80011bc:	bf00      	nop
 80011be:	370c      	adds	r7, #12
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bc80      	pop	{r7}
 80011c4:	4770      	bx	lr
 80011c6:	bf00      	nop

080011c8 <TIM_GetITStatus>:
  * @note TIM10 and TIM11 can have only update interrupt or TIM_FLAG_CC1
  *     interrupt      
  * @retval The new state of the TIM_IT(SET or RESET).
  */
ITStatus TIM_GetITStatus(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 80011c8:	b480      	push	{r7}
 80011ca:	b085      	sub	sp, #20
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
 80011d0:	460b      	mov	r3, r1
 80011d2:	807b      	strh	r3, [r7, #2]
  ITStatus bitstatus = RESET;  
 80011d4:	2300      	movs	r3, #0
 80011d6:	73fb      	strb	r3, [r7, #15]
  uint16_t itstatus = 0x0, itenable = 0x0;
 80011d8:	2300      	movs	r3, #0
 80011da:	81bb      	strh	r3, [r7, #12]
 80011dc:	2300      	movs	r3, #0
 80011de:	817b      	strh	r3, [r7, #10]
  
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_IT(TIM_IT));
   
  itstatus = TIMx->SR & TIM_IT;
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	8a1b      	ldrh	r3, [r3, #16]
 80011e4:	b29a      	uxth	r2, r3
 80011e6:	887b      	ldrh	r3, [r7, #2]
 80011e8:	4013      	ands	r3, r2
 80011ea:	81bb      	strh	r3, [r7, #12]
  
  itenable = TIMx->DIER & TIM_IT;
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	899b      	ldrh	r3, [r3, #12]
 80011f0:	b29a      	uxth	r2, r3
 80011f2:	887b      	ldrh	r3, [r7, #2]
 80011f4:	4013      	ands	r3, r2
 80011f6:	817b      	strh	r3, [r7, #10]
  if ((itstatus != (uint16_t)RESET) && (itenable != (uint16_t)RESET))
 80011f8:	89bb      	ldrh	r3, [r7, #12]
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d005      	beq.n	800120a <TIM_GetITStatus+0x42>
 80011fe:	897b      	ldrh	r3, [r7, #10]
 8001200:	2b00      	cmp	r3, #0
 8001202:	d002      	beq.n	800120a <TIM_GetITStatus+0x42>
  {
    bitstatus = SET;
 8001204:	2301      	movs	r3, #1
 8001206:	73fb      	strb	r3, [r7, #15]
 8001208:	e001      	b.n	800120e <TIM_GetITStatus+0x46>
  }
  else
  {
    bitstatus = RESET;
 800120a:	2300      	movs	r3, #0
 800120c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800120e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001210:	4618      	mov	r0, r3
 8001212:	3714      	adds	r7, #20
 8001214:	46bd      	mov	sp, r7
 8001216:	bc80      	pop	{r7}
 8001218:	4770      	bx	lr
 800121a:	bf00      	nop

0800121c <TIM_ClearITPendingBit>:
  * @note TIM10 and TIM11 can have only update interrupt or TIM_IT_CC1
  *     interrupt        
  * @retval None
  */
void TIM_ClearITPendingBit(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 800121c:	b480      	push	{r7}
 800121e:	b083      	sub	sp, #12
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
 8001224:	460b      	mov	r3, r1
 8001226:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
   
  /* Clear the IT pending Bit */
  TIMx->SR = (uint16_t)~TIM_IT;
 8001228:	887b      	ldrh	r3, [r7, #2]
 800122a:	43db      	mvns	r3, r3
 800122c:	b29a      	uxth	r2, r3
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	821a      	strh	r2, [r3, #16]
}
 8001232:	bf00      	nop
 8001234:	370c      	adds	r7, #12
 8001236:	46bd      	mov	sp, r7
 8001238:	bc80      	pop	{r7}
 800123a:	4770      	bx	lr

0800123c <Delay>:
#include <string.h>
#include <displej/font5x8.h>
#include <displej/ili9163.h> // https://cdn-shop.adafruit.com/datasheets/ILI9341.pdf
#include <displej/spi.h>

void Delay(uint16_t n) {
 800123c:	b480      	push	{r7}
 800123e:	b085      	sub	sp, #20
 8001240:	af00      	add	r7, sp, #0
 8001242:	4603      	mov	r3, r0
 8001244:	80fb      	strh	r3, [r7, #6]
	uint32_t nl = n * 2;
 8001246:	88fb      	ldrh	r3, [r7, #6]
 8001248:	005b      	lsls	r3, r3, #1
 800124a:	60fb      	str	r3, [r7, #12]
	while (nl--)
 800124c:	bf00      	nop
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	1e5a      	subs	r2, r3, #1
 8001252:	60fa      	str	r2, [r7, #12]
 8001254:	2b00      	cmp	r3, #0
 8001256:	d1fa      	bne.n	800124e <Delay+0x12>
		;

	return;
 8001258:	bf00      	nop
}
 800125a:	3714      	adds	r7, #20
 800125c:	46bd      	mov	sp, r7
 800125e:	bc80      	pop	{r7}
 8001260:	4770      	bx	lr
 8001262:	bf00      	nop

08001264 <lcdReset>:
// Low-level LCD driving functions --------------------------------------------------------------------------

// Reset the LCD hardware
void lcdReset(void) {
 8001264:	b580      	push	{r7, lr}
 8001266:	af00      	add	r7, sp, #0
	// Reset pin is active low (0 = reset, 1 = ready)
	res_reset();
 8001268:	f000 fc42 	bl	8001af0 <res_reset>
	Delay(10000);
 800126c:	f242 7010 	movw	r0, #10000	; 0x2710
 8001270:	f7ff ffe4 	bl	800123c <Delay>

	res_set();
 8001274:	f000 fc30 	bl	8001ad8 <res_set>
	Delay(10000);
 8001278:	f242 7010 	movw	r0, #10000	; 0x2710
 800127c:	f7ff ffde 	bl	800123c <Delay>
}
 8001280:	bf00      	nop
 8001282:	bd80      	pop	{r7, pc}

08001284 <lcdWriteCommand>:

void lcdWriteCommand(uint8_t address) {
 8001284:	b580      	push	{r7, lr}
 8001286:	b082      	sub	sp, #8
 8001288:	af00      	add	r7, sp, #0
 800128a:	4603      	mov	r3, r0
 800128c:	71fb      	strb	r3, [r7, #7]
	cd_reset();
 800128e:	f000 fbf9 	bl	8001a84 <cd_reset>

	readWriteSPI1(address);
 8001292:	79fb      	ldrb	r3, [r7, #7]
 8001294:	4618      	mov	r0, r3
 8001296:	f000 fb73 	bl	8001980 <readWriteSPI1>
}
 800129a:	bf00      	nop
 800129c:	3708      	adds	r7, #8
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop

080012a4 <lcdWriteParameter>:

void lcdWriteParameter(uint8_t parameter) {
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b082      	sub	sp, #8
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	4603      	mov	r3, r0
 80012ac:	71fb      	strb	r3, [r7, #7]
	cd_set();
 80012ae:	f000 fbdd 	bl	8001a6c <cd_set>

	readWriteSPI1(parameter);
 80012b2:	79fb      	ldrb	r3, [r7, #7]
 80012b4:	4618      	mov	r0, r3
 80012b6:	f000 fb63 	bl	8001980 <readWriteSPI1>
}
 80012ba:	bf00      	nop
 80012bc:	3708      	adds	r7, #8
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop

080012c4 <lcdWriteData>:

void lcdWriteData(uint8_t dataByte1, uint8_t dataByte2) {
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b082      	sub	sp, #8
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	4603      	mov	r3, r0
 80012cc:	460a      	mov	r2, r1
 80012ce:	71fb      	strb	r3, [r7, #7]
 80012d0:	4613      	mov	r3, r2
 80012d2:	71bb      	strb	r3, [r7, #6]
	cd_set();
 80012d4:	f000 fbca 	bl	8001a6c <cd_set>

	readWriteSPI1(dataByte1);
 80012d8:	79fb      	ldrb	r3, [r7, #7]
 80012da:	4618      	mov	r0, r3
 80012dc:	f000 fb50 	bl	8001980 <readWriteSPI1>
	readWriteSPI1(dataByte2);
 80012e0:	79bb      	ldrb	r3, [r7, #6]
 80012e2:	4618      	mov	r0, r3
 80012e4:	f000 fb4c 	bl	8001980 <readWriteSPI1>
}
 80012e8:	bf00      	nop
 80012ea:	3708      	adds	r7, #8
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}

080012f0 <lcdInitialise>:

// Initialise the display with the require screen orientation
void lcdInitialise(uint8_t orientation) {
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b082      	sub	sp, #8
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	4603      	mov	r3, r0
 80012f8:	71fb      	strb	r3, [r7, #7]
	// Set up the IO ports for communication with the LCD

	initSPI1();
 80012fa:	f000 faf1 	bl	80018e0 <initSPI1>
	initCD_Pin();
 80012fe:	f000 fb97 	bl	8001a30 <initCD_Pin>
	initCS_Pin();
 8001302:	f000 fb61 	bl	80019c8 <initCS_Pin>
	initRES_Pin();
 8001306:	f000 fbc9 	bl	8001a9c <initRES_Pin>

	device_Select();
 800130a:	f000 fb79 	bl	8001a00 <device_Select>
	// Hardware reset the LCD
	lcdReset();
 800130e:	f7ff ffa9 	bl	8001264 <lcdReset>

	lcdWriteCommand(EXIT_SLEEP_MODE);
 8001312:	2011      	movs	r0, #17
 8001314:	f7ff ffb6 	bl	8001284 <lcdWriteCommand>
	Delay(10000); // Wait for the screen to wake up
 8001318:	f242 7010 	movw	r0, #10000	; 0x2710
 800131c:	f7ff ff8e 	bl	800123c <Delay>

	lcdWriteCommand(SET_PIXEL_FORMAT);
 8001320:	203a      	movs	r0, #58	; 0x3a
 8001322:	f7ff ffaf 	bl	8001284 <lcdWriteCommand>
	lcdWriteParameter(0x05); // 16 bits per pixel
 8001326:	2005      	movs	r0, #5
 8001328:	f7ff ffbc 	bl	80012a4 <lcdWriteParameter>

	lcdWriteCommand(SET_GAMMA_CURVE);
 800132c:	2026      	movs	r0, #38	; 0x26
 800132e:	f7ff ffa9 	bl	8001284 <lcdWriteCommand>
	lcdWriteParameter(0x04); // Select gamma curve 3
 8001332:	2004      	movs	r0, #4
 8001334:	f7ff ffb6 	bl	80012a4 <lcdWriteParameter>

	lcdWriteCommand(GAM_R_SEL);
 8001338:	20f2      	movs	r0, #242	; 0xf2
 800133a:	f7ff ffa3 	bl	8001284 <lcdWriteCommand>
	lcdWriteParameter(0x01); // Gamma adjustment enabled
 800133e:	2001      	movs	r0, #1
 8001340:	f7ff ffb0 	bl	80012a4 <lcdWriteParameter>

	lcdWriteCommand(POSITIVE_GAMMA_CORRECT);
 8001344:	20e0      	movs	r0, #224	; 0xe0
 8001346:	f7ff ff9d 	bl	8001284 <lcdWriteCommand>
	lcdWriteParameter(0x3f); // 1st Parameter
 800134a:	203f      	movs	r0, #63	; 0x3f
 800134c:	f7ff ffaa 	bl	80012a4 <lcdWriteParameter>
	lcdWriteParameter(0x25); // 2nd Parameter
 8001350:	2025      	movs	r0, #37	; 0x25
 8001352:	f7ff ffa7 	bl	80012a4 <lcdWriteParameter>
	lcdWriteParameter(0x1c); // 3rd Parameter
 8001356:	201c      	movs	r0, #28
 8001358:	f7ff ffa4 	bl	80012a4 <lcdWriteParameter>
	lcdWriteParameter(0x1e); // 4th Parameter
 800135c:	201e      	movs	r0, #30
 800135e:	f7ff ffa1 	bl	80012a4 <lcdWriteParameter>
	lcdWriteParameter(0x20); // 5th Parameter
 8001362:	2020      	movs	r0, #32
 8001364:	f7ff ff9e 	bl	80012a4 <lcdWriteParameter>
	lcdWriteParameter(0x12); // 6th Parameter
 8001368:	2012      	movs	r0, #18
 800136a:	f7ff ff9b 	bl	80012a4 <lcdWriteParameter>
	lcdWriteParameter(0x2a); // 7th Parameter
 800136e:	202a      	movs	r0, #42	; 0x2a
 8001370:	f7ff ff98 	bl	80012a4 <lcdWriteParameter>
	lcdWriteParameter(0x90); // 8th Parameter
 8001374:	2090      	movs	r0, #144	; 0x90
 8001376:	f7ff ff95 	bl	80012a4 <lcdWriteParameter>
	lcdWriteParameter(0x24); // 9th Parameter
 800137a:	2024      	movs	r0, #36	; 0x24
 800137c:	f7ff ff92 	bl	80012a4 <lcdWriteParameter>
	lcdWriteParameter(0x11); // 10th Parameter
 8001380:	2011      	movs	r0, #17
 8001382:	f7ff ff8f 	bl	80012a4 <lcdWriteParameter>
	lcdWriteParameter(0x00); // 11th Parameter
 8001386:	2000      	movs	r0, #0
 8001388:	f7ff ff8c 	bl	80012a4 <lcdWriteParameter>
	lcdWriteParameter(0x00); // 12th Parameter
 800138c:	2000      	movs	r0, #0
 800138e:	f7ff ff89 	bl	80012a4 <lcdWriteParameter>
	lcdWriteParameter(0x00); // 13th Parameter
 8001392:	2000      	movs	r0, #0
 8001394:	f7ff ff86 	bl	80012a4 <lcdWriteParameter>
	lcdWriteParameter(0x00); // 14th Parameter
 8001398:	2000      	movs	r0, #0
 800139a:	f7ff ff83 	bl	80012a4 <lcdWriteParameter>
	lcdWriteParameter(0x00); // 15th Parameter
 800139e:	2000      	movs	r0, #0
 80013a0:	f7ff ff80 	bl	80012a4 <lcdWriteParameter>

	lcdWriteCommand(NEGATIVE_GAMMA_CORRECT);
 80013a4:	20e1      	movs	r0, #225	; 0xe1
 80013a6:	f7ff ff6d 	bl	8001284 <lcdWriteCommand>
	lcdWriteParameter(0x20); // 1st Parameter
 80013aa:	2020      	movs	r0, #32
 80013ac:	f7ff ff7a 	bl	80012a4 <lcdWriteParameter>
	lcdWriteParameter(0x20); // 2nd Parameter
 80013b0:	2020      	movs	r0, #32
 80013b2:	f7ff ff77 	bl	80012a4 <lcdWriteParameter>
	lcdWriteParameter(0x20); // 3rd Parameter
 80013b6:	2020      	movs	r0, #32
 80013b8:	f7ff ff74 	bl	80012a4 <lcdWriteParameter>
	lcdWriteParameter(0x20); // 4th Parameter
 80013bc:	2020      	movs	r0, #32
 80013be:	f7ff ff71 	bl	80012a4 <lcdWriteParameter>
	lcdWriteParameter(0x05); // 5th Parameter
 80013c2:	2005      	movs	r0, #5
 80013c4:	f7ff ff6e 	bl	80012a4 <lcdWriteParameter>
	lcdWriteParameter(0x00); // 6th Parameter
 80013c8:	2000      	movs	r0, #0
 80013ca:	f7ff ff6b 	bl	80012a4 <lcdWriteParameter>
	lcdWriteParameter(0x15); // 7th Parameter
 80013ce:	2015      	movs	r0, #21
 80013d0:	f7ff ff68 	bl	80012a4 <lcdWriteParameter>
	lcdWriteParameter(0xa7); // 8th Parameter
 80013d4:	20a7      	movs	r0, #167	; 0xa7
 80013d6:	f7ff ff65 	bl	80012a4 <lcdWriteParameter>
	lcdWriteParameter(0x3d); // 9th Parameter
 80013da:	203d      	movs	r0, #61	; 0x3d
 80013dc:	f7ff ff62 	bl	80012a4 <lcdWriteParameter>
	lcdWriteParameter(0x18); // 10th Parameter
 80013e0:	2018      	movs	r0, #24
 80013e2:	f7ff ff5f 	bl	80012a4 <lcdWriteParameter>
	lcdWriteParameter(0x25); // 11th Parameter
 80013e6:	2025      	movs	r0, #37	; 0x25
 80013e8:	f7ff ff5c 	bl	80012a4 <lcdWriteParameter>
	lcdWriteParameter(0x2a); // 12th Parameter
 80013ec:	202a      	movs	r0, #42	; 0x2a
 80013ee:	f7ff ff59 	bl	80012a4 <lcdWriteParameter>
	lcdWriteParameter(0x2b); // 13th Parameter
 80013f2:	202b      	movs	r0, #43	; 0x2b
 80013f4:	f7ff ff56 	bl	80012a4 <lcdWriteParameter>
	lcdWriteParameter(0x2b); // 14th Parameter
 80013f8:	202b      	movs	r0, #43	; 0x2b
 80013fa:	f7ff ff53 	bl	80012a4 <lcdWriteParameter>
	lcdWriteParameter(0x3a); // 15th Parameter
 80013fe:	203a      	movs	r0, #58	; 0x3a
 8001400:	f7ff ff50 	bl	80012a4 <lcdWriteParameter>

	lcdWriteCommand(FRAME_RATE_CONTROL1);
 8001404:	20b1      	movs	r0, #177	; 0xb1
 8001406:	f7ff ff3d 	bl	8001284 <lcdWriteCommand>
	lcdWriteParameter(0x08); // DIVA = 8
 800140a:	2008      	movs	r0, #8
 800140c:	f7ff ff4a 	bl	80012a4 <lcdWriteParameter>
	lcdWriteParameter(0x08); // VPA = 8
 8001410:	2008      	movs	r0, #8
 8001412:	f7ff ff47 	bl	80012a4 <lcdWriteParameter>

	lcdWriteCommand(DISPLAY_INVERSION);
 8001416:	20b4      	movs	r0, #180	; 0xb4
 8001418:	f7ff ff34 	bl	8001284 <lcdWriteCommand>
	lcdWriteParameter(0x07); // NLA = 1, NLB = 1, NLC = 1 (all on Frame Inversion)
 800141c:	2007      	movs	r0, #7
 800141e:	f7ff ff41 	bl	80012a4 <lcdWriteParameter>

	lcdWriteCommand(POWER_CONTROL1);
 8001422:	20c0      	movs	r0, #192	; 0xc0
 8001424:	f7ff ff2e 	bl	8001284 <lcdWriteCommand>
	lcdWriteParameter(0x0a); // VRH = 10:  GVDD = 4.30
 8001428:	200a      	movs	r0, #10
 800142a:	f7ff ff3b 	bl	80012a4 <lcdWriteParameter>
	lcdWriteParameter(0x02); // VC = 2: VCI1 = 2.65
 800142e:	2002      	movs	r0, #2
 8001430:	f7ff ff38 	bl	80012a4 <lcdWriteParameter>

	lcdWriteCommand(POWER_CONTROL2);
 8001434:	20c1      	movs	r0, #193	; 0xc1
 8001436:	f7ff ff25 	bl	8001284 <lcdWriteCommand>
	lcdWriteParameter(0x02); // BT = 2: AVDD = 2xVCI1, VCL = -1xVCI1, VGH = 5xVCI1, VGL = -2xVCI1
 800143a:	2002      	movs	r0, #2
 800143c:	f7ff ff32 	bl	80012a4 <lcdWriteParameter>

	lcdWriteCommand(VCOM_CONTROL1);
 8001440:	20c5      	movs	r0, #197	; 0xc5
 8001442:	f7ff ff1f 	bl	8001284 <lcdWriteCommand>
	lcdWriteParameter(0x50); // VMH = 80: VCOMH voltage = 4.5
 8001446:	2050      	movs	r0, #80	; 0x50
 8001448:	f7ff ff2c 	bl	80012a4 <lcdWriteParameter>
	lcdWriteParameter(0x5b); // VML = 91: VCOML voltage = -0.225
 800144c:	205b      	movs	r0, #91	; 0x5b
 800144e:	f7ff ff29 	bl	80012a4 <lcdWriteParameter>

	lcdWriteCommand(VCOM_OFFSET_CONTROL);
 8001452:	20c7      	movs	r0, #199	; 0xc7
 8001454:	f7ff ff16 	bl	8001284 <lcdWriteCommand>
	lcdWriteParameter(0x40); // nVM = 0, VMF = 64: VCOMH output = VMH, VCOML output = VML
 8001458:	2040      	movs	r0, #64	; 0x40
 800145a:	f7ff ff23 	bl	80012a4 <lcdWriteParameter>

	// Select display orientation
	lcdWriteCommand(SET_ADDRESS_MODE);
 800145e:	2036      	movs	r0, #54	; 0x36
 8001460:	f7ff ff10 	bl	8001284 <lcdWriteCommand>
	lcdWriteParameter(orientation);
 8001464:	79fb      	ldrb	r3, [r7, #7]
 8001466:	4618      	mov	r0, r3
 8001468:	f7ff ff1c 	bl	80012a4 <lcdWriteParameter>

	// Set the display to on
	lcdWriteCommand(SET_DISPLAY_ON);
 800146c:	2029      	movs	r0, #41	; 0x29
 800146e:	f7ff ff09 	bl	8001284 <lcdWriteCommand>
	lcdWriteCommand(WRITE_MEMORY_START);
 8001472:	202c      	movs	r0, #44	; 0x2c
 8001474:	f7ff ff06 	bl	8001284 <lcdWriteCommand>
	device_Unselect();
 8001478:	f000 face 	bl	8001a18 <device_Unselect>
}
 800147c:	bf00      	nop
 800147e:	3708      	adds	r7, #8
 8001480:	46bd      	mov	sp, r7
 8001482:	bd80      	pop	{r7, pc}

08001484 <lcdDisplayPossitionAndSize>:

void lcdDisplayPossitionAndSize(uint16_t x, uint16_t y, uint16_t width,
		uint16_t height) {
 8001484:	b590      	push	{r4, r7, lr}
 8001486:	b083      	sub	sp, #12
 8001488:	af00      	add	r7, sp, #0
 800148a:	4604      	mov	r4, r0
 800148c:	4608      	mov	r0, r1
 800148e:	4611      	mov	r1, r2
 8001490:	461a      	mov	r2, r3
 8001492:	4623      	mov	r3, r4
 8001494:	80fb      	strh	r3, [r7, #6]
 8001496:	4603      	mov	r3, r0
 8001498:	80bb      	strh	r3, [r7, #4]
 800149a:	460b      	mov	r3, r1
 800149c:	807b      	strh	r3, [r7, #2]
 800149e:	4613      	mov	r3, r2
 80014a0:	803b      	strh	r3, [r7, #0]
	lcdWriteCommand(SET_COLUMN_ADDRESS);
 80014a2:	202a      	movs	r0, #42	; 0x2a
 80014a4:	f7ff feee 	bl	8001284 <lcdWriteCommand>
	lcdWriteParameter((x + LCD_X_OFFSET) >> 8);
 80014a8:	88fb      	ldrh	r3, [r7, #6]
 80014aa:	3320      	adds	r3, #32
 80014ac:	121b      	asrs	r3, r3, #8
 80014ae:	b2db      	uxtb	r3, r3
 80014b0:	4618      	mov	r0, r3
 80014b2:	f7ff fef7 	bl	80012a4 <lcdWriteParameter>
	lcdWriteParameter((x + LCD_X_OFFSET));
 80014b6:	88fb      	ldrh	r3, [r7, #6]
 80014b8:	b2db      	uxtb	r3, r3
 80014ba:	3320      	adds	r3, #32
 80014bc:	b2db      	uxtb	r3, r3
 80014be:	4618      	mov	r0, r3
 80014c0:	f7ff fef0 	bl	80012a4 <lcdWriteParameter>
	lcdWriteParameter((x + width + LCD_X_OFFSET) >> 8);
 80014c4:	88fa      	ldrh	r2, [r7, #6]
 80014c6:	887b      	ldrh	r3, [r7, #2]
 80014c8:	4413      	add	r3, r2
 80014ca:	3320      	adds	r3, #32
 80014cc:	121b      	asrs	r3, r3, #8
 80014ce:	b2db      	uxtb	r3, r3
 80014d0:	4618      	mov	r0, r3
 80014d2:	f7ff fee7 	bl	80012a4 <lcdWriteParameter>
	lcdWriteParameter((x + width + LCD_X_OFFSET));
 80014d6:	88fb      	ldrh	r3, [r7, #6]
 80014d8:	b2da      	uxtb	r2, r3
 80014da:	887b      	ldrh	r3, [r7, #2]
 80014dc:	b2db      	uxtb	r3, r3
 80014de:	4413      	add	r3, r2
 80014e0:	b2db      	uxtb	r3, r3
 80014e2:	3320      	adds	r3, #32
 80014e4:	b2db      	uxtb	r3, r3
 80014e6:	4618      	mov	r0, r3
 80014e8:	f7ff fedc 	bl	80012a4 <lcdWriteParameter>

	// Set the page address to 0-127
	lcdWriteCommand(SET_PAGE_ADDRESS);
 80014ec:	202b      	movs	r0, #43	; 0x2b
 80014ee:	f7ff fec9 	bl	8001284 <lcdWriteCommand>
	lcdWriteParameter((y + LCD_Y_OFFSET) >> 8);
 80014f2:	88bb      	ldrh	r3, [r7, #4]
 80014f4:	121b      	asrs	r3, r3, #8
 80014f6:	b2db      	uxtb	r3, r3
 80014f8:	4618      	mov	r0, r3
 80014fa:	f7ff fed3 	bl	80012a4 <lcdWriteParameter>
	lcdWriteParameter((y + LCD_Y_OFFSET));
 80014fe:	88bb      	ldrh	r3, [r7, #4]
 8001500:	b2db      	uxtb	r3, r3
 8001502:	4618      	mov	r0, r3
 8001504:	f7ff fece 	bl	80012a4 <lcdWriteParameter>
	lcdWriteParameter((y + height + LCD_Y_OFFSET) >> 8);
 8001508:	88ba      	ldrh	r2, [r7, #4]
 800150a:	883b      	ldrh	r3, [r7, #0]
 800150c:	4413      	add	r3, r2
 800150e:	121b      	asrs	r3, r3, #8
 8001510:	b2db      	uxtb	r3, r3
 8001512:	4618      	mov	r0, r3
 8001514:	f7ff fec6 	bl	80012a4 <lcdWriteParameter>
	lcdWriteParameter((y + height + LCD_Y_OFFSET));
 8001518:	88bb      	ldrh	r3, [r7, #4]
 800151a:	b2da      	uxtb	r2, r3
 800151c:	883b      	ldrh	r3, [r7, #0]
 800151e:	b2db      	uxtb	r3, r3
 8001520:	4413      	add	r3, r2
 8001522:	b2db      	uxtb	r3, r3
 8001524:	4618      	mov	r0, r3
 8001526:	f7ff febd 	bl	80012a4 <lcdWriteParameter>
}
 800152a:	bf00      	nop
 800152c:	370c      	adds	r7, #12
 800152e:	46bd      	mov	sp, r7
 8001530:	bd90      	pop	{r4, r7, pc}
 8001532:	bf00      	nop

08001534 <lcdClearDisplay>:

// LCD graphics functions -----------------------------------------------------------------------------------
void lcdClearDisplay(uint16_t colour) {
 8001534:	b580      	push	{r7, lr}
 8001536:	b084      	sub	sp, #16
 8001538:	af00      	add	r7, sp, #0
 800153a:	4603      	mov	r3, r0
 800153c:	80fb      	strh	r3, [r7, #6]
	uint16_t pixel;
	device_Select();
 800153e:	f000 fa5f 	bl	8001a00 <device_Select>

	lcdDisplayPossitionAndSize(0, 0, LCD_WIDTH, LCD_HEIGHT);
 8001542:	2380      	movs	r3, #128	; 0x80
 8001544:	2280      	movs	r2, #128	; 0x80
 8001546:	2100      	movs	r1, #0
 8001548:	2000      	movs	r0, #0
 800154a:	f7ff ff9b 	bl	8001484 <lcdDisplayPossitionAndSize>
	// Plot the pixels
	lcdWriteCommand(WRITE_MEMORY_START);
 800154e:	202c      	movs	r0, #44	; 0x2c
 8001550:	f7ff fe98 	bl	8001284 <lcdWriteCommand>
	for (pixel = 0; pixel < (LCD_WIDTH * LCD_HEIGHT); pixel++)
 8001554:	2300      	movs	r3, #0
 8001556:	81fb      	strh	r3, [r7, #14]
 8001558:	e00c      	b.n	8001574 <lcdClearDisplay+0x40>
		lcdWriteData(colour >> 8, colour);
 800155a:	88fb      	ldrh	r3, [r7, #6]
 800155c:	0a1b      	lsrs	r3, r3, #8
 800155e:	b29b      	uxth	r3, r3
 8001560:	b2db      	uxtb	r3, r3
 8001562:	88fa      	ldrh	r2, [r7, #6]
 8001564:	b2d2      	uxtb	r2, r2
 8001566:	4611      	mov	r1, r2
 8001568:	4618      	mov	r0, r3
 800156a:	f7ff feab 	bl	80012c4 <lcdWriteData>
	device_Select();

	lcdDisplayPossitionAndSize(0, 0, LCD_WIDTH, LCD_HEIGHT);
	// Plot the pixels
	lcdWriteCommand(WRITE_MEMORY_START);
	for (pixel = 0; pixel < (LCD_WIDTH * LCD_HEIGHT); pixel++)
 800156e:	89fb      	ldrh	r3, [r7, #14]
 8001570:	3301      	adds	r3, #1
 8001572:	81fb      	strh	r3, [r7, #14]
 8001574:	89fb      	ldrh	r3, [r7, #14]
 8001576:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800157a:	d3ee      	bcc.n	800155a <lcdClearDisplay+0x26>
		lcdWriteData(colour >> 8, colour);
	device_Unselect();
 800157c:	f000 fa4c 	bl	8001a18 <device_Unselect>

}
 8001580:	bf00      	nop
 8001582:	3710      	adds	r7, #16
 8001584:	46bd      	mov	sp, r7
 8001586:	bd80      	pop	{r7, pc}

08001588 <lcdPlot>:

void lcdPlot(uint8_t x, uint8_t y, uint16_t colour) {
 8001588:	b580      	push	{r7, lr}
 800158a:	b082      	sub	sp, #8
 800158c:	af00      	add	r7, sp, #0
 800158e:	4603      	mov	r3, r0
 8001590:	71fb      	strb	r3, [r7, #7]
 8001592:	460b      	mov	r3, r1
 8001594:	71bb      	strb	r3, [r7, #6]
 8001596:	4613      	mov	r3, r2
 8001598:	80bb      	strh	r3, [r7, #4]
	device_Select();
 800159a:	f000 fa31 	bl	8001a00 <device_Select>

	lcdDisplayPossitionAndSize(x, y, 1, 1);
 800159e:	79fb      	ldrb	r3, [r7, #7]
 80015a0:	b298      	uxth	r0, r3
 80015a2:	79bb      	ldrb	r3, [r7, #6]
 80015a4:	b299      	uxth	r1, r3
 80015a6:	2301      	movs	r3, #1
 80015a8:	2201      	movs	r2, #1
 80015aa:	f7ff ff6b 	bl	8001484 <lcdDisplayPossitionAndSize>

	// Plot the point
	lcdWriteCommand(WRITE_MEMORY_START);
 80015ae:	202c      	movs	r0, #44	; 0x2c
 80015b0:	f7ff fe68 	bl	8001284 <lcdWriteCommand>
	lcdWriteData(colour >> 8, colour);
 80015b4:	88bb      	ldrh	r3, [r7, #4]
 80015b6:	0a1b      	lsrs	r3, r3, #8
 80015b8:	b29b      	uxth	r3, r3
 80015ba:	b2db      	uxtb	r3, r3
 80015bc:	88ba      	ldrh	r2, [r7, #4]
 80015be:	b2d2      	uxtb	r2, r2
 80015c0:	4611      	mov	r1, r2
 80015c2:	4618      	mov	r0, r3
 80015c4:	f7ff fe7e 	bl	80012c4 <lcdWriteData>
	device_Unselect();
 80015c8:	f000 fa26 	bl	8001a18 <device_Unselect>

}
 80015cc:	bf00      	nop
 80015ce:	3708      	adds	r7, #8
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bd80      	pop	{r7, pc}

080015d4 <lcdLine>:

// Draw a line from x0, y0 to x1, y1
// Note:	This is a version of Bresenham's line drawing algorithm
//			It only draws lines from left to right!
void lcdLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint16_t colour) {
 80015d4:	b590      	push	{r4, r7, lr}
 80015d6:	b087      	sub	sp, #28
 80015d8:	af00      	add	r7, sp, #0
 80015da:	4604      	mov	r4, r0
 80015dc:	4608      	mov	r0, r1
 80015de:	4611      	mov	r1, r2
 80015e0:	461a      	mov	r2, r3
 80015e2:	4623      	mov	r3, r4
 80015e4:	80fb      	strh	r3, [r7, #6]
 80015e6:	4603      	mov	r3, r0
 80015e8:	80bb      	strh	r3, [r7, #4]
 80015ea:	460b      	mov	r3, r1
 80015ec:	807b      	strh	r3, [r7, #2]
 80015ee:	4613      	mov	r3, r2
 80015f0:	803b      	strh	r3, [r7, #0]
	int16_t dy = y1 - y0;
 80015f2:	883a      	ldrh	r2, [r7, #0]
 80015f4:	88bb      	ldrh	r3, [r7, #4]
 80015f6:	1ad3      	subs	r3, r2, r3
 80015f8:	b29b      	uxth	r3, r3
 80015fa:	82fb      	strh	r3, [r7, #22]
	int16_t dx = x1 - x0;
 80015fc:	887a      	ldrh	r2, [r7, #2]
 80015fe:	88fb      	ldrh	r3, [r7, #6]
 8001600:	1ad3      	subs	r3, r2, r3
 8001602:	b29b      	uxth	r3, r3
 8001604:	82bb      	strh	r3, [r7, #20]
	int16_t stepx, stepy;
	device_Select();
 8001606:	f000 f9fb 	bl	8001a00 <device_Select>
	if (dy < 0) {
 800160a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800160e:	2b00      	cmp	r3, #0
 8001610:	da07      	bge.n	8001622 <lcdLine+0x4e>
		dy = -dy;
 8001612:	8afb      	ldrh	r3, [r7, #22]
 8001614:	425b      	negs	r3, r3
 8001616:	b29b      	uxth	r3, r3
 8001618:	82fb      	strh	r3, [r7, #22]
		stepy = -1;
 800161a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800161e:	823b      	strh	r3, [r7, #16]
 8001620:	e001      	b.n	8001626 <lcdLine+0x52>
	} else
		stepy = 1;
 8001622:	2301      	movs	r3, #1
 8001624:	823b      	strh	r3, [r7, #16]

	if (dx < 0) {
 8001626:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800162a:	2b00      	cmp	r3, #0
 800162c:	da07      	bge.n	800163e <lcdLine+0x6a>
		dx = -dx;
 800162e:	8abb      	ldrh	r3, [r7, #20]
 8001630:	425b      	negs	r3, r3
 8001632:	b29b      	uxth	r3, r3
 8001634:	82bb      	strh	r3, [r7, #20]
		stepx = -1;
 8001636:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800163a:	827b      	strh	r3, [r7, #18]
 800163c:	e001      	b.n	8001642 <lcdLine+0x6e>
	} else
		stepx = 1;
 800163e:	2301      	movs	r3, #1
 8001640:	827b      	strh	r3, [r7, #18]

	dy <<= 1; 							// dy is now 2*dy
 8001642:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001646:	005b      	lsls	r3, r3, #1
 8001648:	82fb      	strh	r3, [r7, #22]
	dx <<= 1; 							// dx is now 2*dx
 800164a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800164e:	005b      	lsls	r3, r3, #1
 8001650:	82bb      	strh	r3, [r7, #20]

	lcdPlot(x0, y0, colour);
 8001652:	88fb      	ldrh	r3, [r7, #6]
 8001654:	b2db      	uxtb	r3, r3
 8001656:	88ba      	ldrh	r2, [r7, #4]
 8001658:	b2d1      	uxtb	r1, r2
 800165a:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800165c:	4618      	mov	r0, r3
 800165e:	f7ff ff93 	bl	8001588 <lcdPlot>

	if (dx > dy) {
 8001662:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8001666:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800166a:	429a      	cmp	r2, r3
 800166c:	dd2e      	ble.n	80016cc <lcdLine+0xf8>
		int fraction = dy - (dx >> 1);	// same as 2*dy - dx
 800166e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001672:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8001676:	1052      	asrs	r2, r2, #1
 8001678:	b212      	sxth	r2, r2
 800167a:	1a9b      	subs	r3, r3, r2
 800167c:	60fb      	str	r3, [r7, #12]
		while (x0 != x1) {
 800167e:	e01e      	b.n	80016be <lcdLine+0xea>
			if (fraction >= 0) {
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	2b00      	cmp	r3, #0
 8001684:	db09      	blt.n	800169a <lcdLine+0xc6>
				y0 += stepy;
 8001686:	88ba      	ldrh	r2, [r7, #4]
 8001688:	8a3b      	ldrh	r3, [r7, #16]
 800168a:	4413      	add	r3, r2
 800168c:	b29b      	uxth	r3, r3
 800168e:	80bb      	strh	r3, [r7, #4]
				fraction -= dx; 		// same as fraction -= 2*dx
 8001690:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001694:	68fa      	ldr	r2, [r7, #12]
 8001696:	1ad3      	subs	r3, r2, r3
 8001698:	60fb      	str	r3, [r7, #12]
			}

			x0 += stepx;
 800169a:	88fa      	ldrh	r2, [r7, #6]
 800169c:	8a7b      	ldrh	r3, [r7, #18]
 800169e:	4413      	add	r3, r2
 80016a0:	b29b      	uxth	r3, r3
 80016a2:	80fb      	strh	r3, [r7, #6]
			fraction += dy; 				// same as fraction -= 2*dy
 80016a4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80016a8:	68fa      	ldr	r2, [r7, #12]
 80016aa:	4413      	add	r3, r2
 80016ac:	60fb      	str	r3, [r7, #12]
			lcdPlot(x0, y0, colour);
 80016ae:	88fb      	ldrh	r3, [r7, #6]
 80016b0:	b2db      	uxtb	r3, r3
 80016b2:	88ba      	ldrh	r2, [r7, #4]
 80016b4:	b2d1      	uxtb	r1, r2
 80016b6:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80016b8:	4618      	mov	r0, r3
 80016ba:	f7ff ff65 	bl	8001588 <lcdPlot>

	lcdPlot(x0, y0, colour);

	if (dx > dy) {
		int fraction = dy - (dx >> 1);	// same as 2*dy - dx
		while (x0 != x1) {
 80016be:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80016c2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80016c6:	429a      	cmp	r2, r3
 80016c8:	d1da      	bne.n	8001680 <lcdLine+0xac>
 80016ca:	e02d      	b.n	8001728 <lcdLine+0x154>
			x0 += stepx;
			fraction += dy; 				// same as fraction -= 2*dy
			lcdPlot(x0, y0, colour);
		}
	} else {
		int fraction = dx - (dy >> 1);
 80016cc:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80016d0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80016d4:	1052      	asrs	r2, r2, #1
 80016d6:	b212      	sxth	r2, r2
 80016d8:	1a9b      	subs	r3, r3, r2
 80016da:	60bb      	str	r3, [r7, #8]
		while (y0 != y1) {
 80016dc:	e01e      	b.n	800171c <lcdLine+0x148>
			if (fraction >= 0) {
 80016de:	68bb      	ldr	r3, [r7, #8]
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	db09      	blt.n	80016f8 <lcdLine+0x124>
				x0 += stepx;
 80016e4:	88fa      	ldrh	r2, [r7, #6]
 80016e6:	8a7b      	ldrh	r3, [r7, #18]
 80016e8:	4413      	add	r3, r2
 80016ea:	b29b      	uxth	r3, r3
 80016ec:	80fb      	strh	r3, [r7, #6]
				fraction -= dy;
 80016ee:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80016f2:	68ba      	ldr	r2, [r7, #8]
 80016f4:	1ad3      	subs	r3, r2, r3
 80016f6:	60bb      	str	r3, [r7, #8]
			}

			y0 += stepy;
 80016f8:	88ba      	ldrh	r2, [r7, #4]
 80016fa:	8a3b      	ldrh	r3, [r7, #16]
 80016fc:	4413      	add	r3, r2
 80016fe:	b29b      	uxth	r3, r3
 8001700:	80bb      	strh	r3, [r7, #4]
			fraction += dx;
 8001702:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001706:	68ba      	ldr	r2, [r7, #8]
 8001708:	4413      	add	r3, r2
 800170a:	60bb      	str	r3, [r7, #8]
			lcdPlot(x0, y0, colour);
 800170c:	88fb      	ldrh	r3, [r7, #6]
 800170e:	b2db      	uxtb	r3, r3
 8001710:	88ba      	ldrh	r2, [r7, #4]
 8001712:	b2d1      	uxtb	r1, r2
 8001714:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001716:	4618      	mov	r0, r3
 8001718:	f7ff ff36 	bl	8001588 <lcdPlot>
			fraction += dy; 				// same as fraction -= 2*dy
			lcdPlot(x0, y0, colour);
		}
	} else {
		int fraction = dx - (dy >> 1);
		while (y0 != y1) {
 800171c:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001720:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001724:	429a      	cmp	r2, r3
 8001726:	d1da      	bne.n	80016de <lcdLine+0x10a>
			y0 += stepy;
			fraction += dx;
			lcdPlot(x0, y0, colour);
		}
	}
	device_Unselect();
 8001728:	f000 f976 	bl	8001a18 <device_Unselect>
}
 800172c:	bf00      	nop
 800172e:	371c      	adds	r7, #28
 8001730:	46bd      	mov	sp, r7
 8001732:	bd90      	pop	{r4, r7, pc}

08001734 <lcdPutCh>:

// LCD text manipulation functions --------------------------------------------------------------------------
#define pgm_read_byte_near(address_short) (uint16_t)(address_short)
// Plot a character at the specified x, y co-ordinates (top left hand corner of character)
void lcdPutCh(unsigned char character, uint8_t x, uint8_t y, uint16_t fgColour,
		uint16_t bgColour) {
 8001734:	b590      	push	{r4, r7, lr}
 8001736:	b085      	sub	sp, #20
 8001738:	af00      	add	r7, sp, #0
 800173a:	4604      	mov	r4, r0
 800173c:	4608      	mov	r0, r1
 800173e:	4611      	mov	r1, r2
 8001740:	461a      	mov	r2, r3
 8001742:	4623      	mov	r3, r4
 8001744:	71fb      	strb	r3, [r7, #7]
 8001746:	4603      	mov	r3, r0
 8001748:	71bb      	strb	r3, [r7, #6]
 800174a:	460b      	mov	r3, r1
 800174c:	717b      	strb	r3, [r7, #5]
 800174e:	4613      	mov	r3, r2
 8001750:	807b      	strh	r3, [r7, #2]
	uint8_t row, column;

	device_Select();
 8001752:	f000 f955 	bl	8001a00 <device_Select>

		lcdDisplayPossitionAndSize(x, y, 5, 8);
 8001756:	79bb      	ldrb	r3, [r7, #6]
 8001758:	b298      	uxth	r0, r3
 800175a:	797b      	ldrb	r3, [r7, #5]
 800175c:	b299      	uxth	r1, r3
 800175e:	2308      	movs	r3, #8
 8001760:	2205      	movs	r2, #5
 8001762:	f7ff fe8f 	bl	8001484 <lcdDisplayPossitionAndSize>

	lcdWriteCommand(WRITE_MEMORY_START);
 8001766:	202c      	movs	r0, #44	; 0x2c
 8001768:	f7ff fd8c 	bl	8001284 <lcdWriteCommand>

	// Plot the font data
	for (row = 0; row < 8; row++) {
 800176c:	2300      	movs	r3, #0
 800176e:	73fb      	strb	r3, [r7, #15]
 8001770:	e032      	b.n	80017d8 <lcdPutCh+0xa4>
		for (column = 0; column < 6; column++) {
 8001772:	2300      	movs	r3, #0
 8001774:	73bb      	strb	r3, [r7, #14]
 8001776:	e029      	b.n	80017cc <lcdPutCh+0x98>

				if ((font5x8[character][column]) & (1 << row))
 8001778:	79fa      	ldrb	r2, [r7, #7]
 800177a:	7bb9      	ldrb	r1, [r7, #14]
 800177c:	481b      	ldr	r0, [pc, #108]	; (80017ec <lcdPutCh+0xb8>)
 800177e:	4613      	mov	r3, r2
 8001780:	005b      	lsls	r3, r3, #1
 8001782:	4413      	add	r3, r2
 8001784:	005b      	lsls	r3, r3, #1
 8001786:	4403      	add	r3, r0
 8001788:	440b      	add	r3, r1
 800178a:	781b      	ldrb	r3, [r3, #0]
 800178c:	461a      	mov	r2, r3
 800178e:	7bfb      	ldrb	r3, [r7, #15]
 8001790:	fa42 f303 	asr.w	r3, r2, r3
 8001794:	f003 0301 	and.w	r3, r3, #1
 8001798:	2b00      	cmp	r3, #0
 800179a:	d00a      	beq.n	80017b2 <lcdPutCh+0x7e>
					lcdWriteData(fgColour >> 8, fgColour);
 800179c:	887b      	ldrh	r3, [r7, #2]
 800179e:	0a1b      	lsrs	r3, r3, #8
 80017a0:	b29b      	uxth	r3, r3
 80017a2:	b2db      	uxtb	r3, r3
 80017a4:	887a      	ldrh	r2, [r7, #2]
 80017a6:	b2d2      	uxtb	r2, r2
 80017a8:	4611      	mov	r1, r2
 80017aa:	4618      	mov	r0, r3
 80017ac:	f7ff fd8a 	bl	80012c4 <lcdWriteData>
 80017b0:	e009      	b.n	80017c6 <lcdPutCh+0x92>
				else
					lcdWriteData(bgColour >> 8, bgColour);
 80017b2:	8c3b      	ldrh	r3, [r7, #32]
 80017b4:	0a1b      	lsrs	r3, r3, #8
 80017b6:	b29b      	uxth	r3, r3
 80017b8:	b2db      	uxtb	r3, r3
 80017ba:	8c3a      	ldrh	r2, [r7, #32]
 80017bc:	b2d2      	uxtb	r2, r2
 80017be:	4611      	mov	r1, r2
 80017c0:	4618      	mov	r0, r3
 80017c2:	f7ff fd7f 	bl	80012c4 <lcdWriteData>

	lcdWriteCommand(WRITE_MEMORY_START);

	// Plot the font data
	for (row = 0; row < 8; row++) {
		for (column = 0; column < 6; column++) {
 80017c6:	7bbb      	ldrb	r3, [r7, #14]
 80017c8:	3301      	adds	r3, #1
 80017ca:	73bb      	strb	r3, [r7, #14]
 80017cc:	7bbb      	ldrb	r3, [r7, #14]
 80017ce:	2b05      	cmp	r3, #5
 80017d0:	d9d2      	bls.n	8001778 <lcdPutCh+0x44>
		lcdDisplayPossitionAndSize(x, y, 5, 8);

	lcdWriteCommand(WRITE_MEMORY_START);

	// Plot the font data
	for (row = 0; row < 8; row++) {
 80017d2:	7bfb      	ldrb	r3, [r7, #15]
 80017d4:	3301      	adds	r3, #1
 80017d6:	73fb      	strb	r3, [r7, #15]
 80017d8:	7bfb      	ldrb	r3, [r7, #15]
 80017da:	2b07      	cmp	r3, #7
 80017dc:	d9c9      	bls.n	8001772 <lcdPutCh+0x3e>
					lcdWriteData(fgColour >> 8, fgColour);
				else
					lcdWriteData(bgColour >> 8, bgColour);
		}
	}
	device_Unselect();
 80017de:	f000 f91b 	bl	8001a18 <device_Unselect>
}
 80017e2:	bf00      	nop
 80017e4:	3714      	adds	r7, #20
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd90      	pop	{r4, r7, pc}
 80017ea:	bf00      	nop
 80017ec:	08002af4 	.word	0x08002af4

080017f0 <decodeRgbValue>:

// Translates a 3 byte RGB value into a 2 byte value for the LCD (values should be 0-31)
uint16_t decodeRgbValue(uint8_t r, uint8_t g, uint8_t b) {
 80017f0:	b480      	push	{r7}
 80017f2:	b083      	sub	sp, #12
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	4603      	mov	r3, r0
 80017f8:	71fb      	strb	r3, [r7, #7]
 80017fa:	460b      	mov	r3, r1
 80017fc:	71bb      	strb	r3, [r7, #6]
 80017fe:	4613      	mov	r3, r2
 8001800:	717b      	strb	r3, [r7, #5]
	return (b << 11) | (g << 6) | (r);
 8001802:	797b      	ldrb	r3, [r7, #5]
 8001804:	02db      	lsls	r3, r3, #11
 8001806:	b21a      	sxth	r2, r3
 8001808:	79bb      	ldrb	r3, [r7, #6]
 800180a:	019b      	lsls	r3, r3, #6
 800180c:	b21b      	sxth	r3, r3
 800180e:	4313      	orrs	r3, r2
 8001810:	b21a      	sxth	r2, r3
 8001812:	79fb      	ldrb	r3, [r7, #7]
 8001814:	b21b      	sxth	r3, r3
 8001816:	4313      	orrs	r3, r2
 8001818:	b21b      	sxth	r3, r3
 800181a:	b29b      	uxth	r3, r3
}
 800181c:	4618      	mov	r0, r3
 800181e:	370c      	adds	r7, #12
 8001820:	46bd      	mov	sp, r7
 8001822:	bc80      	pop	{r7}
 8001824:	4770      	bx	lr
 8001826:	bf00      	nop

08001828 <lcdTextX>:

// This routine takes a row number from 0 to 20 and
// returns the x coordinate on the screen (0-127) to make
// it easy to place text
uint8_t lcdTextX(uint8_t x) {
 8001828:	b480      	push	{r7}
 800182a:	b083      	sub	sp, #12
 800182c:	af00      	add	r7, sp, #0
 800182e:	4603      	mov	r3, r0
 8001830:	71fb      	strb	r3, [r7, #7]
	return x * 6;
 8001832:	79fb      	ldrb	r3, [r7, #7]
 8001834:	461a      	mov	r2, r3
 8001836:	0052      	lsls	r2, r2, #1
 8001838:	4413      	add	r3, r2
 800183a:	005b      	lsls	r3, r3, #1
 800183c:	b2db      	uxtb	r3, r3
}
 800183e:	4618      	mov	r0, r3
 8001840:	370c      	adds	r7, #12
 8001842:	46bd      	mov	sp, r7
 8001844:	bc80      	pop	{r7}
 8001846:	4770      	bx	lr

08001848 <lcdTextY>:

// This routine takes a column number from 0 to 20 and
// returns the y coordinate on the screen (0-127) to make
// it easy to place text
uint8_t lcdTextY(uint8_t y) {
 8001848:	b480      	push	{r7}
 800184a:	b083      	sub	sp, #12
 800184c:	af00      	add	r7, sp, #0
 800184e:	4603      	mov	r3, r0
 8001850:	71fb      	strb	r3, [r7, #7]
	return y * 8+1;
 8001852:	79fb      	ldrb	r3, [r7, #7]
 8001854:	00db      	lsls	r3, r3, #3
 8001856:	b2db      	uxtb	r3, r3
 8001858:	3301      	adds	r3, #1
 800185a:	b2db      	uxtb	r3, r3
}
 800185c:	4618      	mov	r0, r3
 800185e:	370c      	adds	r7, #12
 8001860:	46bd      	mov	sp, r7
 8001862:	bc80      	pop	{r7}
 8001864:	4770      	bx	lr
 8001866:	bf00      	nop

08001868 <lcdPutS>:

// Plot a string of characters to the LCD
void lcdPutS(const char *string, uint8_t x, uint8_t y, uint16_t fgColour,
		uint16_t bgColour) {
 8001868:	b590      	push	{r4, r7, lr}
 800186a:	b087      	sub	sp, #28
 800186c:	af02      	add	r7, sp, #8
 800186e:	6078      	str	r0, [r7, #4]
 8001870:	4608      	mov	r0, r1
 8001872:	4611      	mov	r1, r2
 8001874:	461a      	mov	r2, r3
 8001876:	4603      	mov	r3, r0
 8001878:	70fb      	strb	r3, [r7, #3]
 800187a:	460b      	mov	r3, r1
 800187c:	70bb      	strb	r3, [r7, #2]
 800187e:	4613      	mov	r3, r2
 8001880:	803b      	strh	r3, [r7, #0]
	uint8_t origin = x;
 8001882:	78fb      	ldrb	r3, [r7, #3]
 8001884:	73bb      	strb	r3, [r7, #14]
	uint8_t characterNumber;
	for (characterNumber = 0; characterNumber < strlen(string);
 8001886:	2300      	movs	r3, #0
 8001888:	73fb      	strb	r3, [r7, #15]
 800188a:	e01c      	b.n	80018c6 <lcdPutS+0x5e>
			characterNumber++) {
		// Check if we are out of bounds and move to
		// the next line if we are
		if (x > 121) {
 800188c:	78fb      	ldrb	r3, [r7, #3]
 800188e:	2b79      	cmp	r3, #121	; 0x79
 8001890:	d904      	bls.n	800189c <lcdPutS+0x34>
			x = origin;
 8001892:	7bbb      	ldrb	r3, [r7, #14]
 8001894:	70fb      	strb	r3, [r7, #3]
			y += 8;
 8001896:	78bb      	ldrb	r3, [r7, #2]
 8001898:	3308      	adds	r3, #8
 800189a:	70bb      	strb	r3, [r7, #2]
		}

		// If we move past the bottom of the screen just exit
		if (y > 153)
 800189c:	78bb      	ldrb	r3, [r7, #2]
 800189e:	2b99      	cmp	r3, #153	; 0x99
 80018a0:	d819      	bhi.n	80018d6 <lcdPutS+0x6e>
			break;

		// Plot the current character
		lcdPutCh(string[characterNumber], x, y, fgColour, bgColour);
 80018a2:	7bfb      	ldrb	r3, [r7, #15]
 80018a4:	687a      	ldr	r2, [r7, #4]
 80018a6:	4413      	add	r3, r2
 80018a8:	7818      	ldrb	r0, [r3, #0]
 80018aa:	883c      	ldrh	r4, [r7, #0]
 80018ac:	78ba      	ldrb	r2, [r7, #2]
 80018ae:	78f9      	ldrb	r1, [r7, #3]
 80018b0:	8c3b      	ldrh	r3, [r7, #32]
 80018b2:	9300      	str	r3, [sp, #0]
 80018b4:	4623      	mov	r3, r4
 80018b6:	f7ff ff3d 	bl	8001734 <lcdPutCh>
		x += 6;
 80018ba:	78fb      	ldrb	r3, [r7, #3]
 80018bc:	3306      	adds	r3, #6
 80018be:	70fb      	strb	r3, [r7, #3]
void lcdPutS(const char *string, uint8_t x, uint8_t y, uint16_t fgColour,
		uint16_t bgColour) {
	uint8_t origin = x;
	uint8_t characterNumber;
	for (characterNumber = 0; characterNumber < strlen(string);
			characterNumber++) {
 80018c0:	7bfb      	ldrb	r3, [r7, #15]
 80018c2:	3301      	adds	r3, #1
 80018c4:	73fb      	strb	r3, [r7, #15]
// Plot a string of characters to the LCD
void lcdPutS(const char *string, uint8_t x, uint8_t y, uint16_t fgColour,
		uint16_t bgColour) {
	uint8_t origin = x;
	uint8_t characterNumber;
	for (characterNumber = 0; characterNumber < strlen(string);
 80018c6:	7bfc      	ldrb	r4, [r7, #15]
 80018c8:	6878      	ldr	r0, [r7, #4]
 80018ca:	f7fe fc57 	bl	800017c <strlen>
 80018ce:	4603      	mov	r3, r0
 80018d0:	429c      	cmp	r4, r3
 80018d2:	d3db      	bcc.n	800188c <lcdPutS+0x24>

		// Plot the current character
		lcdPutCh(string[characterNumber], x, y, fgColour, bgColour);
		x += 6;
	}
}
 80018d4:	e000      	b.n	80018d8 <lcdPutS+0x70>
			y += 8;
		}

		// If we move past the bottom of the screen just exit
		if (y > 153)
			break;
 80018d6:	bf00      	nop

		// Plot the current character
		lcdPutCh(string[characterNumber], x, y, fgColour, bgColour);
		x += 6;
	}
}
 80018d8:	bf00      	nop
 80018da:	3714      	adds	r7, #20
 80018dc:	46bd      	mov	sp, r7
 80018de:	bd90      	pop	{r4, r7, pc}

080018e0 <initSPI1>:
#include <displej/spi.h>

//TODO rework to STM32L mcu's

void initSPI1(void)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b088      	sub	sp, #32
 80018e4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;

	RCC_APB2PeriphClockCmd(RCC_APB2Periph_SPI1, ENABLE);
 80018e6:	2101      	movs	r1, #1
 80018e8:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80018ec:	f7ff fa40 	bl	8000d70 <RCC_APB2PeriphClockCmd>
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA, ENABLE);
 80018f0:	2101      	movs	r1, #1
 80018f2:	2001      	movs	r0, #1
 80018f4:	f7ff fa1e 	bl	8000d34 <RCC_AHBPeriphClockCmd>

	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 80018f8:	2302      	movs	r3, #2
 80018fa:	773b      	strb	r3, [r7, #28]
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 80018fc:	2300      	movs	r3, #0
 80018fe:	77bb      	strb	r3, [r7, #30]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_40MHz;
 8001900:	2303      	movs	r3, #3
 8001902:	777b      	strb	r3, [r7, #29]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8001904:	2300      	movs	r3, #0
 8001906:	77fb      	strb	r3, [r7, #31]

	//PA5 - SPI1_SCK
	//PA6 - SPI1_MISO
	//PA7 - SPI1_MOSI
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_5|GPIO_Pin_6|GPIO_Pin_7;
 8001908:	23e0      	movs	r3, #224	; 0xe0
 800190a:	61bb      	str	r3, [r7, #24]
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 800190c:	f107 0318 	add.w	r3, r7, #24
 8001910:	4619      	mov	r1, r3
 8001912:	4819      	ldr	r0, [pc, #100]	; (8001978 <initSPI1+0x98>)
 8001914:	f7ff f930 	bl	8000b78 <GPIO_Init>

	GPIO_PinAFConfig(GPIOA, GPIO_PinSource5, GPIO_AF_SPI1);
 8001918:	2205      	movs	r2, #5
 800191a:	2105      	movs	r1, #5
 800191c:	4816      	ldr	r0, [pc, #88]	; (8001978 <initSPI1+0x98>)
 800191e:	f7ff f9c1 	bl	8000ca4 <GPIO_PinAFConfig>
	GPIO_PinAFConfig(GPIOA, GPIO_PinSource6, GPIO_AF_SPI1);
 8001922:	2205      	movs	r2, #5
 8001924:	2106      	movs	r1, #6
 8001926:	4814      	ldr	r0, [pc, #80]	; (8001978 <initSPI1+0x98>)
 8001928:	f7ff f9bc 	bl	8000ca4 <GPIO_PinAFConfig>
	GPIO_PinAFConfig(GPIOA, GPIO_PinSource7, GPIO_AF_SPI1);
 800192c:	2205      	movs	r2, #5
 800192e:	2107      	movs	r1, #7
 8001930:	4811      	ldr	r0, [pc, #68]	; (8001978 <initSPI1+0x98>)
 8001932:	f7ff f9b7 	bl	8000ca4 <GPIO_PinAFConfig>

	SPI_InitTypeDef  SPI_InitStructure;
	SPI_InitStructure.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_2;
 8001936:	2300      	movs	r3, #0
 8001938:	823b      	strh	r3, [r7, #16]
	SPI_InitStructure.SPI_CPHA = SPI_CPHA_1Edge;
 800193a:	2300      	movs	r3, #0
 800193c:	81bb      	strh	r3, [r7, #12]
	SPI_InitStructure.SPI_CPOL = SPI_CPOL_Low;
 800193e:	2300      	movs	r3, #0
 8001940:	817b      	strh	r3, [r7, #10]
	SPI_InitStructure.SPI_CRCPolynomial = SPI_CRC_Rx;
 8001942:	2301      	movs	r3, #1
 8001944:	82bb      	strh	r3, [r7, #20]
	SPI_InitStructure.SPI_DataSize = SPI_DataSize_8b;
 8001946:	2300      	movs	r3, #0
 8001948:	813b      	strh	r3, [r7, #8]
	SPI_InitStructure.SPI_Direction = SPI_Direction_2Lines_FullDuplex;
 800194a:	2300      	movs	r3, #0
 800194c:	80bb      	strh	r3, [r7, #4]
	SPI_InitStructure.SPI_FirstBit = SPI_FirstBit_MSB;
 800194e:	2300      	movs	r3, #0
 8001950:	827b      	strh	r3, [r7, #18]
	SPI_InitStructure.SPI_Mode = SPI_Mode_Master;
 8001952:	f44f 7382 	mov.w	r3, #260	; 0x104
 8001956:	80fb      	strh	r3, [r7, #6]
	SPI_InitStructure.SPI_NSS = SPI_NSS_Soft;
 8001958:	f44f 7300 	mov.w	r3, #512	; 0x200
 800195c:	81fb      	strh	r3, [r7, #14]

	/* Apply SPI configuration after enabling it */
	SPI_Init(SPI1, &SPI_InitStructure);
 800195e:	1d3b      	adds	r3, r7, #4
 8001960:	4619      	mov	r1, r3
 8001962:	4806      	ldr	r0, [pc, #24]	; (800197c <initSPI1+0x9c>)
 8001964:	f7ff fa40 	bl	8000de8 <SPI_Init>
	/* SPI Peripheral Enable */
	SPI_Cmd(SPI1, ENABLE);
 8001968:	2101      	movs	r1, #1
 800196a:	4804      	ldr	r0, [pc, #16]	; (800197c <initSPI1+0x9c>)
 800196c:	f7ff fa80 	bl	8000e70 <SPI_Cmd>
}
 8001970:	bf00      	nop
 8001972:	3720      	adds	r7, #32
 8001974:	46bd      	mov	sp, r7
 8001976:	bd80      	pop	{r7, pc}
 8001978:	40020000 	.word	0x40020000
 800197c:	40013000 	.word	0x40013000

08001980 <readWriteSPI1>:

unsigned char readWriteSPI1(unsigned char txData)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b084      	sub	sp, #16
 8001984:	af00      	add	r7, sp, #0
 8001986:	4603      	mov	r3, r0
 8001988:	71fb      	strb	r3, [r7, #7]
	unsigned char  rxData;

	SPI1->DR = txData;
 800198a:	4b0e      	ldr	r3, [pc, #56]	; (80019c4 <readWriteSPI1+0x44>)
 800198c:	79fa      	ldrb	r2, [r7, #7]
 800198e:	b292      	uxth	r2, r2
 8001990:	819a      	strh	r2, [r3, #12]
	// wait until TXE = 1
	while(SPI_I2S_GetFlagStatus(SPI1,SPI_I2S_FLAG_TXE) != SET);
 8001992:	bf00      	nop
 8001994:	2102      	movs	r1, #2
 8001996:	480b      	ldr	r0, [pc, #44]	; (80019c4 <readWriteSPI1+0x44>)
 8001998:	f7ff fa8a 	bl	8000eb0 <SPI_I2S_GetFlagStatus>
 800199c:	4603      	mov	r3, r0
 800199e:	2b01      	cmp	r3, #1
 80019a0:	d1f8      	bne.n	8001994 <readWriteSPI1+0x14>
	// wait until RXNE = 1
	while(SPI_I2S_GetFlagStatus(SPI1,SPI_I2S_FLAG_RXNE) != SET);
 80019a2:	bf00      	nop
 80019a4:	2101      	movs	r1, #1
 80019a6:	4807      	ldr	r0, [pc, #28]	; (80019c4 <readWriteSPI1+0x44>)
 80019a8:	f7ff fa82 	bl	8000eb0 <SPI_I2S_GetFlagStatus>
 80019ac:	4603      	mov	r3, r0
 80019ae:	2b01      	cmp	r3, #1
 80019b0:	d1f8      	bne.n	80019a4 <readWriteSPI1+0x24>
	// read the rx buff to clear the RXNE flag (garbage)
	rxData = SPI1->DR;
 80019b2:	4b04      	ldr	r3, [pc, #16]	; (80019c4 <readWriteSPI1+0x44>)
 80019b4:	899b      	ldrh	r3, [r3, #12]
 80019b6:	b29b      	uxth	r3, r3
 80019b8:	73fb      	strb	r3, [r7, #15]

	return rxData;
 80019ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80019bc:	4618      	mov	r0, r3
 80019be:	3710      	adds	r7, #16
 80019c0:	46bd      	mov	sp, r7
 80019c2:	bd80      	pop	{r7, pc}
 80019c4:	40013000 	.word	0x40013000

080019c8 <initCS_Pin>:

void initCS_Pin(void)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b082      	sub	sp, #8
 80019cc:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOC, ENABLE);
 80019ce:	2101      	movs	r1, #1
 80019d0:	2004      	movs	r0, #4
 80019d2:	f7ff f9af 	bl	8000d34 <RCC_AHBPeriphClockCmd>

	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 80019d6:	2300      	movs	r3, #0
 80019d8:	71bb      	strb	r3, [r7, #6]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_40MHz;
 80019da:	2303      	movs	r3, #3
 80019dc:	717b      	strb	r3, [r7, #5]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 80019de:	2300      	movs	r3, #0
 80019e0:	71fb      	strb	r3, [r7, #7]
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_7;
 80019e2:	2380      	movs	r3, #128	; 0x80
 80019e4:	603b      	str	r3, [r7, #0]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 80019e6:	2301      	movs	r3, #1
 80019e8:	713b      	strb	r3, [r7, #4]
	GPIO_Init(GPIOC, &GPIO_InitStructure);
 80019ea:	463b      	mov	r3, r7
 80019ec:	4619      	mov	r1, r3
 80019ee:	4803      	ldr	r0, [pc, #12]	; (80019fc <initCS_Pin+0x34>)
 80019f0:	f7ff f8c2 	bl	8000b78 <GPIO_Init>
}
 80019f4:	bf00      	nop
 80019f6:	3708      	adds	r7, #8
 80019f8:	46bd      	mov	sp, r7
 80019fa:	bd80      	pop	{r7, pc}
 80019fc:	40020800 	.word	0x40020800

08001a00 <device_Select>:

void device_Select(void)
{
 8001a00:	b480      	push	{r7}
 8001a02:	af00      	add	r7, sp, #0
	GPIOB->BSRRH = GPIO_Pin_7;
 8001a04:	4b03      	ldr	r3, [pc, #12]	; (8001a14 <device_Select+0x14>)
 8001a06:	2280      	movs	r2, #128	; 0x80
 8001a08:	835a      	strh	r2, [r3, #26]
}
 8001a0a:	bf00      	nop
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	bc80      	pop	{r7}
 8001a10:	4770      	bx	lr
 8001a12:	bf00      	nop
 8001a14:	40020400 	.word	0x40020400

08001a18 <device_Unselect>:

void device_Unselect(void)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	af00      	add	r7, sp, #0
	GPIOB->BSRRL = GPIO_Pin_7;
 8001a1c:	4b03      	ldr	r3, [pc, #12]	; (8001a2c <device_Unselect+0x14>)
 8001a1e:	2280      	movs	r2, #128	; 0x80
 8001a20:	831a      	strh	r2, [r3, #24]
}
 8001a22:	bf00      	nop
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bc80      	pop	{r7}
 8001a28:	4770      	bx	lr
 8001a2a:	bf00      	nop
 8001a2c:	40020400 	.word	0x40020400

08001a30 <initCD_Pin>:

void initCD_Pin(void)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b082      	sub	sp, #8
 8001a34:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA, ENABLE);
 8001a36:	2101      	movs	r1, #1
 8001a38:	2001      	movs	r0, #1
 8001a3a:	f7ff f97b 	bl	8000d34 <RCC_AHBPeriphClockCmd>

	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	71bb      	strb	r3, [r7, #6]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_40MHz;
 8001a42:	2303      	movs	r3, #3
 8001a44:	717b      	strb	r3, [r7, #5]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8001a46:	2300      	movs	r3, #0
 8001a48:	71fb      	strb	r3, [r7, #7]
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_8;
 8001a4a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a4e:	603b      	str	r3, [r7, #0]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8001a50:	2301      	movs	r3, #1
 8001a52:	713b      	strb	r3, [r7, #4]
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 8001a54:	463b      	mov	r3, r7
 8001a56:	4619      	mov	r1, r3
 8001a58:	4803      	ldr	r0, [pc, #12]	; (8001a68 <initCD_Pin+0x38>)
 8001a5a:	f7ff f88d 	bl	8000b78 <GPIO_Init>
}
 8001a5e:	bf00      	nop
 8001a60:	3708      	adds	r7, #8
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bd80      	pop	{r7, pc}
 8001a66:	bf00      	nop
 8001a68:	40020000 	.word	0x40020000

08001a6c <cd_set>:

void cd_set(void)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	af00      	add	r7, sp, #0
	GPIOA->BSRRL = GPIO_Pin_8;
 8001a70:	4b03      	ldr	r3, [pc, #12]	; (8001a80 <cd_set+0x14>)
 8001a72:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001a76:	831a      	strh	r2, [r3, #24]
}
 8001a78:	bf00      	nop
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bc80      	pop	{r7}
 8001a7e:	4770      	bx	lr
 8001a80:	40020000 	.word	0x40020000

08001a84 <cd_reset>:

void cd_reset(void)
{
 8001a84:	b480      	push	{r7}
 8001a86:	af00      	add	r7, sp, #0
	GPIOA->BSRRH = GPIO_Pin_8;
 8001a88:	4b03      	ldr	r3, [pc, #12]	; (8001a98 <cd_reset+0x14>)
 8001a8a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001a8e:	835a      	strh	r2, [r3, #26]
}
 8001a90:	bf00      	nop
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bc80      	pop	{r7}
 8001a96:	4770      	bx	lr
 8001a98:	40020000 	.word	0x40020000

08001a9c <initRES_Pin>:

void initRES_Pin(void)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b082      	sub	sp, #8
 8001aa0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA, ENABLE);
 8001aa2:	2101      	movs	r1, #1
 8001aa4:	2001      	movs	r0, #1
 8001aa6:	f7ff f945 	bl	8000d34 <RCC_AHBPeriphClockCmd>

	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	71bb      	strb	r3, [r7, #6]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_40MHz;
 8001aae:	2303      	movs	r3, #3
 8001ab0:	717b      	strb	r3, [r7, #5]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	71fb      	strb	r3, [r7, #7]
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_9;
 8001ab6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001aba:	603b      	str	r3, [r7, #0]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8001abc:	2301      	movs	r3, #1
 8001abe:	713b      	strb	r3, [r7, #4]
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 8001ac0:	463b      	mov	r3, r7
 8001ac2:	4619      	mov	r1, r3
 8001ac4:	4803      	ldr	r0, [pc, #12]	; (8001ad4 <initRES_Pin+0x38>)
 8001ac6:	f7ff f857 	bl	8000b78 <GPIO_Init>
}
 8001aca:	bf00      	nop
 8001acc:	3708      	adds	r7, #8
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}
 8001ad2:	bf00      	nop
 8001ad4:	40020000 	.word	0x40020000

08001ad8 <res_set>:

void res_set(void)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	af00      	add	r7, sp, #0
	GPIOA->BSRRL = GPIO_Pin_9;
 8001adc:	4b03      	ldr	r3, [pc, #12]	; (8001aec <res_set+0x14>)
 8001ade:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ae2:	831a      	strh	r2, [r3, #24]
}
 8001ae4:	bf00      	nop
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bc80      	pop	{r7}
 8001aea:	4770      	bx	lr
 8001aec:	40020000 	.word	0x40020000

08001af0 <res_reset>:

void res_reset(void)
{
 8001af0:	b480      	push	{r7}
 8001af2:	af00      	add	r7, sp, #0
	GPIOA->BSRRH = GPIO_Pin_9;
 8001af4:	4b03      	ldr	r3, [pc, #12]	; (8001b04 <res_reset+0x14>)
 8001af6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001afa:	835a      	strh	r2, [r3, #26]
}
 8001afc:	bf00      	nop
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bc80      	pop	{r7}
 8001b02:	4770      	bx	lr
 8001b04:	40020000 	.word	0x40020000

08001b08 <main>:
void TIM4_IRQHandler(void);
void EXTI1_IRQHandler(void);
void Buzzer(int value[3]);

int main(void)
{
 8001b08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b0a:	b095      	sub	sp, #84	; 0x54
 8001b0c:	af02      	add	r7, sp, #8
	int osx1=0,osx2=0,osx3=0,starax1=0,starax2=0,starax3=0,desatine=0;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	647b      	str	r3, [r7, #68]	; 0x44
 8001b12:	2300      	movs	r3, #0
 8001b14:	643b      	str	r3, [r7, #64]	; 0x40
 8001b16:	2300      	movs	r3, #0
 8001b18:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	63bb      	str	r3, [r7, #56]	; 0x38
 8001b1e:	2300      	movs	r3, #0
 8001b20:	637b      	str	r3, [r7, #52]	; 0x34
 8001b22:	2300      	movs	r3, #0
 8001b24:	633b      	str	r3, [r7, #48]	; 0x30
 8001b26:	2300      	movs	r3, #0
 8001b28:	627b      	str	r3, [r7, #36]	; 0x24
	double vysledok = 0.0;
 8001b2a:	f04f 0300 	mov.w	r3, #0
 8001b2e:	f04f 0400 	mov.w	r4, #0
 8001b32:	e9c7 3406 	strd	r3, r4, [r7, #24]
	char hodnota[6] = "abcdef";
 8001b36:	4ab5      	ldr	r2, [pc, #724]	; (8001e0c <main+0x304>)
 8001b38:	f107 0310 	add.w	r3, r7, #16
 8001b3c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001b40:	6018      	str	r0, [r3, #0]
 8001b42:	3304      	adds	r3, #4
 8001b44:	8019      	strh	r1, [r3, #0]
	int index = 0, dlzka = 0;
 8001b46:	2300      	movs	r3, #0
 8001b48:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	62bb      	str	r3, [r7, #40]	; 0x28
	int cele[3];

	lcdInitialise(LCD_ORIENTATION1);
 8001b4e:	2060      	movs	r0, #96	; 0x60
 8001b50:	f7ff fbce 	bl	80012f0 <lcdInitialise>
	lcdClearDisplay(decodeRgbValue(255, 255, 255));
 8001b54:	22ff      	movs	r2, #255	; 0xff
 8001b56:	21ff      	movs	r1, #255	; 0xff
 8001b58:	20ff      	movs	r0, #255	; 0xff
 8001b5a:	f7ff fe49 	bl	80017f0 <decodeRgbValue>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	4618      	mov	r0, r3
 8001b62:	f7ff fce7 	bl	8001534 <lcdClearDisplay>
	Ultrasonic_init();
 8001b66:	f000 fc7d 	bl	8002464 <Ultrasonic_init>
	Init_Buzzer(); // nefunguje kvoli vnutornym hodinam
 8001b6a:	f000 fc01 	bl	8002370 <Init_Buzzer>


	lcdPutS("Prvy snimac: ", lcdTextX(0), lcdTextY(0), decodeRgbValue(0, 0, 0), decodeRgbValue(31, 31, 31));
 8001b6e:	2000      	movs	r0, #0
 8001b70:	f7ff fe5a 	bl	8001828 <lcdTextX>
 8001b74:	4603      	mov	r3, r0
 8001b76:	461c      	mov	r4, r3
 8001b78:	2000      	movs	r0, #0
 8001b7a:	f7ff fe65 	bl	8001848 <lcdTextY>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	461d      	mov	r5, r3
 8001b82:	2200      	movs	r2, #0
 8001b84:	2100      	movs	r1, #0
 8001b86:	2000      	movs	r0, #0
 8001b88:	f7ff fe32 	bl	80017f0 <decodeRgbValue>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	461e      	mov	r6, r3
 8001b90:	221f      	movs	r2, #31
 8001b92:	211f      	movs	r1, #31
 8001b94:	201f      	movs	r0, #31
 8001b96:	f7ff fe2b 	bl	80017f0 <decodeRgbValue>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	9300      	str	r3, [sp, #0]
 8001b9e:	4633      	mov	r3, r6
 8001ba0:	462a      	mov	r2, r5
 8001ba2:	4621      	mov	r1, r4
 8001ba4:	489a      	ldr	r0, [pc, #616]	; (8001e10 <main+0x308>)
 8001ba6:	f7ff fe5f 	bl	8001868 <lcdPutS>
	lcdPutS("Druhy snimac:", lcdTextX(0), lcdTextY(1), decodeRgbValue(0, 0, 0), decodeRgbValue(31, 31, 31));
 8001baa:	2000      	movs	r0, #0
 8001bac:	f7ff fe3c 	bl	8001828 <lcdTextX>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	461c      	mov	r4, r3
 8001bb4:	2001      	movs	r0, #1
 8001bb6:	f7ff fe47 	bl	8001848 <lcdTextY>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	461d      	mov	r5, r3
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	2100      	movs	r1, #0
 8001bc2:	2000      	movs	r0, #0
 8001bc4:	f7ff fe14 	bl	80017f0 <decodeRgbValue>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	461e      	mov	r6, r3
 8001bcc:	221f      	movs	r2, #31
 8001bce:	211f      	movs	r1, #31
 8001bd0:	201f      	movs	r0, #31
 8001bd2:	f7ff fe0d 	bl	80017f0 <decodeRgbValue>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	9300      	str	r3, [sp, #0]
 8001bda:	4633      	mov	r3, r6
 8001bdc:	462a      	mov	r2, r5
 8001bde:	4621      	mov	r1, r4
 8001be0:	488c      	ldr	r0, [pc, #560]	; (8001e14 <main+0x30c>)
 8001be2:	f7ff fe41 	bl	8001868 <lcdPutS>
	lcdPutS("Treti snimac:", lcdTextX(0), lcdTextY(2), decodeRgbValue(0, 0, 0), decodeRgbValue(31, 31, 31));
 8001be6:	2000      	movs	r0, #0
 8001be8:	f7ff fe1e 	bl	8001828 <lcdTextX>
 8001bec:	4603      	mov	r3, r0
 8001bee:	461c      	mov	r4, r3
 8001bf0:	2002      	movs	r0, #2
 8001bf2:	f7ff fe29 	bl	8001848 <lcdTextY>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	461d      	mov	r5, r3
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	2100      	movs	r1, #0
 8001bfe:	2000      	movs	r0, #0
 8001c00:	f7ff fdf6 	bl	80017f0 <decodeRgbValue>
 8001c04:	4603      	mov	r3, r0
 8001c06:	461e      	mov	r6, r3
 8001c08:	221f      	movs	r2, #31
 8001c0a:	211f      	movs	r1, #31
 8001c0c:	201f      	movs	r0, #31
 8001c0e:	f7ff fdef 	bl	80017f0 <decodeRgbValue>
 8001c12:	4603      	mov	r3, r0
 8001c14:	9300      	str	r3, [sp, #0]
 8001c16:	4633      	mov	r3, r6
 8001c18:	462a      	mov	r2, r5
 8001c1a:	4621      	mov	r1, r4
 8001c1c:	487e      	ldr	r0, [pc, #504]	; (8001e18 <main+0x310>)
 8001c1e:	f7ff fe23 	bl	8001868 <lcdPutS>

	while (1)
	{
		switch (index){
 8001c22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c24:	2b01      	cmp	r3, #1
 8001c26:	f000 809c 	beq.w	8001d62 <main+0x25a>
 8001c2a:	2b02      	cmp	r3, #2
 8001c2c:	f000 813c 	beq.w	8001ea8 <main+0x3a0>
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d000      	beq.n	8001c36 <main+0x12e>
		  if (osx3<4)
		  		  osx3 = 4;
		  index = 0;
		  break;
	  default:
		  break;
 8001c34:	e1cd      	b.n	8001fd2 <main+0x4ca>

	while (1)
	{
		switch (index){
		case 0:
		  Init_interrupt1();
 8001c36:	f000 fcb3 	bl	80025a0 <Init_interrupt1>
		  ultTrigger(index);
 8001c3a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001c3c:	f000 fa4a 	bl	80020d4 <ultTrigger>
		  vysledok = getUltCm(index);
 8001c40:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001c42:	f000 faa9 	bl	8002198 <getUltCm>
 8001c46:	e9c7 0106 	strd	r0, r1, [r7, #24]
		  cele[index] = (int)vysledok;
 8001c4a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001c4e:	f7fe fe67 	bl	8000920 <__aeabi_d2iz>
 8001c52:	4602      	mov	r2, r0
 8001c54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c56:	009b      	lsls	r3, r3, #2
 8001c58:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8001c5c:	440b      	add	r3, r1
 8001c5e:	f843 2c44 	str.w	r2, [r3, #-68]
		  desatine = round((vysledok-cele[index])*10);
 8001c62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c64:	009b      	lsls	r3, r3, #2
 8001c66:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8001c6a:	4413      	add	r3, r2
 8001c6c:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8001c70:	4618      	mov	r0, r3
 8001c72:	f7fe fbdd 	bl	8000430 <__aeabi_i2d>
 8001c76:	4603      	mov	r3, r0
 8001c78:	460c      	mov	r4, r1
 8001c7a:	461a      	mov	r2, r3
 8001c7c:	4623      	mov	r3, r4
 8001c7e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001c82:	f7fe fa87 	bl	8000194 <__aeabi_dsub>
 8001c86:	4603      	mov	r3, r0
 8001c88:	460c      	mov	r4, r1
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	4621      	mov	r1, r4
 8001c8e:	f04f 0200 	mov.w	r2, #0
 8001c92:	4b62      	ldr	r3, [pc, #392]	; (8001e1c <main+0x314>)
 8001c94:	f7fe fc32 	bl	80004fc <__aeabi_dmul>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	460c      	mov	r4, r1
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	4621      	mov	r1, r4
 8001ca0:	f000 feb4 	bl	8002a0c <round>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	460c      	mov	r4, r1
 8001ca8:	4618      	mov	r0, r3
 8001caa:	4621      	mov	r1, r4
 8001cac:	f7fe fe38 	bl	8000920 <__aeabi_d2iz>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	627b      	str	r3, [r7, #36]	; 0x24
		  sprintf(hodnota,"%d.%d",cele[index],desatine);
 8001cb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cb6:	009b      	lsls	r3, r3, #2
 8001cb8:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8001cbc:	4413      	add	r3, r2
 8001cbe:	f853 2c44 	ldr.w	r2, [r3, #-68]
 8001cc2:	f107 0010 	add.w	r0, r7, #16
 8001cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cc8:	4955      	ldr	r1, [pc, #340]	; (8001e20 <main+0x318>)
 8001cca:	f000 fe63 	bl	8002994 <siprintf>
		  dlzka = strlen(hodnota);
 8001cce:	f107 0310 	add.w	r3, r7, #16
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	f7fe fa52 	bl	800017c <strlen>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	62bb      	str	r3, [r7, #40]	; 0x28
		  for(dlzka;dlzka<=5;dlzka++)
 8001cdc:	e008      	b.n	8001cf0 <main+0x1e8>
		  {
		  	 hodnota[dlzka] = '0';
 8001cde:	f107 0210 	add.w	r2, r7, #16
 8001ce2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ce4:	4413      	add	r3, r2
 8001ce6:	2230      	movs	r2, #48	; 0x30
 8001ce8:	701a      	strb	r2, [r3, #0]
		  vysledok = getUltCm(index);
		  cele[index] = (int)vysledok;
		  desatine = round((vysledok-cele[index])*10);
		  sprintf(hodnota,"%d.%d",cele[index],desatine);
		  dlzka = strlen(hodnota);
		  for(dlzka;dlzka<=5;dlzka++)
 8001cea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cec:	3301      	adds	r3, #1
 8001cee:	62bb      	str	r3, [r7, #40]	; 0x28
 8001cf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cf2:	2b05      	cmp	r3, #5
 8001cf4:	ddf3      	ble.n	8001cde <main+0x1d6>
		  {
		  	 hodnota[dlzka] = '0';
		  }
		  lcdPutS(hodnota, lcdTextX(15), lcdTextY(0), decodeRgbValue(0, 0, 0), decodeRgbValue(31, 31, 31));
 8001cf6:	200f      	movs	r0, #15
 8001cf8:	f7ff fd96 	bl	8001828 <lcdTextX>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	461c      	mov	r4, r3
 8001d00:	2000      	movs	r0, #0
 8001d02:	f7ff fda1 	bl	8001848 <lcdTextY>
 8001d06:	4603      	mov	r3, r0
 8001d08:	461d      	mov	r5, r3
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	2100      	movs	r1, #0
 8001d0e:	2000      	movs	r0, #0
 8001d10:	f7ff fd6e 	bl	80017f0 <decodeRgbValue>
 8001d14:	4603      	mov	r3, r0
 8001d16:	461e      	mov	r6, r3
 8001d18:	221f      	movs	r2, #31
 8001d1a:	211f      	movs	r1, #31
 8001d1c:	201f      	movs	r0, #31
 8001d1e:	f7ff fd67 	bl	80017f0 <decodeRgbValue>
 8001d22:	4603      	mov	r3, r0
 8001d24:	f107 0010 	add.w	r0, r7, #16
 8001d28:	9300      	str	r3, [sp, #0]
 8001d2a:	4633      	mov	r3, r6
 8001d2c:	462a      	mov	r2, r5
 8001d2e:	4621      	mov	r1, r4
 8001d30:	f7ff fd9a 	bl	8001868 <lcdPutS>
		  osx1 = 2*cele[index];
 8001d34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d36:	009b      	lsls	r3, r3, #2
 8001d38:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8001d3c:	4413      	add	r3, r2
 8001d3e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8001d42:	005b      	lsls	r3, r3, #1
 8001d44:	647b      	str	r3, [r7, #68]	; 0x44
		  if (osx1>122)
 8001d46:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001d48:	2b7a      	cmp	r3, #122	; 0x7a
 8001d4a:	dd01      	ble.n	8001d50 <main+0x248>
			  	  osx1 = 122;
 8001d4c:	237a      	movs	r3, #122	; 0x7a
 8001d4e:	647b      	str	r3, [r7, #68]	; 0x44
		  if (osx1<4)
 8001d50:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001d52:	2b03      	cmp	r3, #3
 8001d54:	dc01      	bgt.n	8001d5a <main+0x252>
		 		  osx1 = 4;
 8001d56:	2304      	movs	r3, #4
 8001d58:	647b      	str	r3, [r7, #68]	; 0x44
		  index++;
 8001d5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d5c:	3301      	adds	r3, #1
 8001d5e:	62fb      	str	r3, [r7, #44]	; 0x2c
		  break;
 8001d60:	e137      	b.n	8001fd2 <main+0x4ca>
	  case 1:
		  Init_interrupt2();
 8001d62:	f000 fc29 	bl	80025b8 <Init_interrupt2>
		  ultTrigger(index);
 8001d66:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001d68:	f000 f9b4 	bl	80020d4 <ultTrigger>
		  vysledok = getUltCm(index);
 8001d6c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001d6e:	f000 fa13 	bl	8002198 <getUltCm>
 8001d72:	e9c7 0106 	strd	r0, r1, [r7, #24]
		  cele[index] = (int)vysledok;
 8001d76:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001d7a:	f7fe fdd1 	bl	8000920 <__aeabi_d2iz>
 8001d7e:	4602      	mov	r2, r0
 8001d80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d82:	009b      	lsls	r3, r3, #2
 8001d84:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8001d88:	440b      	add	r3, r1
 8001d8a:	f843 2c44 	str.w	r2, [r3, #-68]
		  desatine = round((vysledok-cele[index])*10);
 8001d8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d90:	009b      	lsls	r3, r3, #2
 8001d92:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8001d96:	4413      	add	r3, r2
 8001d98:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	f7fe fb47 	bl	8000430 <__aeabi_i2d>
 8001da2:	4603      	mov	r3, r0
 8001da4:	460c      	mov	r4, r1
 8001da6:	461a      	mov	r2, r3
 8001da8:	4623      	mov	r3, r4
 8001daa:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001dae:	f7fe f9f1 	bl	8000194 <__aeabi_dsub>
 8001db2:	4603      	mov	r3, r0
 8001db4:	460c      	mov	r4, r1
 8001db6:	4618      	mov	r0, r3
 8001db8:	4621      	mov	r1, r4
 8001dba:	f04f 0200 	mov.w	r2, #0
 8001dbe:	4b17      	ldr	r3, [pc, #92]	; (8001e1c <main+0x314>)
 8001dc0:	f7fe fb9c 	bl	80004fc <__aeabi_dmul>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	460c      	mov	r4, r1
 8001dc8:	4618      	mov	r0, r3
 8001dca:	4621      	mov	r1, r4
 8001dcc:	f000 fe1e 	bl	8002a0c <round>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	460c      	mov	r4, r1
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	4621      	mov	r1, r4
 8001dd8:	f7fe fda2 	bl	8000920 <__aeabi_d2iz>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	627b      	str	r3, [r7, #36]	; 0x24
		  sprintf(hodnota,"%d.%d",cele[index],desatine);
 8001de0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001de2:	009b      	lsls	r3, r3, #2
 8001de4:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8001de8:	4413      	add	r3, r2
 8001dea:	f853 2c44 	ldr.w	r2, [r3, #-68]
 8001dee:	f107 0010 	add.w	r0, r7, #16
 8001df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001df4:	490a      	ldr	r1, [pc, #40]	; (8001e20 <main+0x318>)
 8001df6:	f000 fdcd 	bl	8002994 <siprintf>
		  dlzka = strlen(hodnota);
 8001dfa:	f107 0310 	add.w	r3, r7, #16
 8001dfe:	4618      	mov	r0, r3
 8001e00:	f7fe f9bc 	bl	800017c <strlen>
 8001e04:	4603      	mov	r3, r0
 8001e06:	62bb      	str	r3, [r7, #40]	; 0x28
		  for(dlzka;dlzka<=5;dlzka++)
 8001e08:	e015      	b.n	8001e36 <main+0x32e>
 8001e0a:	bf00      	nop
 8001e0c:	08002aec 	.word	0x08002aec
 8001e10:	08002ab4 	.word	0x08002ab4
 8001e14:	08002ac4 	.word	0x08002ac4
 8001e18:	08002ad4 	.word	0x08002ad4
 8001e1c:	40240000 	.word	0x40240000
 8001e20:	08002ae4 	.word	0x08002ae4
		  {
			  hodnota[dlzka]='0';
 8001e24:	f107 0210 	add.w	r2, r7, #16
 8001e28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e2a:	4413      	add	r3, r2
 8001e2c:	2230      	movs	r2, #48	; 0x30
 8001e2e:	701a      	strb	r2, [r3, #0]
		  vysledok = getUltCm(index);
		  cele[index] = (int)vysledok;
		  desatine = round((vysledok-cele[index])*10);
		  sprintf(hodnota,"%d.%d",cele[index],desatine);
		  dlzka = strlen(hodnota);
		  for(dlzka;dlzka<=5;dlzka++)
 8001e30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e32:	3301      	adds	r3, #1
 8001e34:	62bb      	str	r3, [r7, #40]	; 0x28
 8001e36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e38:	2b05      	cmp	r3, #5
 8001e3a:	ddf3      	ble.n	8001e24 <main+0x31c>
		  {
			  hodnota[dlzka]='0';
		  }
		  lcdPutS(hodnota, lcdTextX(15), lcdTextY(1), decodeRgbValue(0, 0, 0), decodeRgbValue(31, 31, 31));
 8001e3c:	200f      	movs	r0, #15
 8001e3e:	f7ff fcf3 	bl	8001828 <lcdTextX>
 8001e42:	4603      	mov	r3, r0
 8001e44:	461c      	mov	r4, r3
 8001e46:	2001      	movs	r0, #1
 8001e48:	f7ff fcfe 	bl	8001848 <lcdTextY>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	461d      	mov	r5, r3
 8001e50:	2200      	movs	r2, #0
 8001e52:	2100      	movs	r1, #0
 8001e54:	2000      	movs	r0, #0
 8001e56:	f7ff fccb 	bl	80017f0 <decodeRgbValue>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	461e      	mov	r6, r3
 8001e5e:	221f      	movs	r2, #31
 8001e60:	211f      	movs	r1, #31
 8001e62:	201f      	movs	r0, #31
 8001e64:	f7ff fcc4 	bl	80017f0 <decodeRgbValue>
 8001e68:	4603      	mov	r3, r0
 8001e6a:	f107 0010 	add.w	r0, r7, #16
 8001e6e:	9300      	str	r3, [sp, #0]
 8001e70:	4633      	mov	r3, r6
 8001e72:	462a      	mov	r2, r5
 8001e74:	4621      	mov	r1, r4
 8001e76:	f7ff fcf7 	bl	8001868 <lcdPutS>
		  osx2 = 2*cele[index];
 8001e7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e7c:	009b      	lsls	r3, r3, #2
 8001e7e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8001e82:	4413      	add	r3, r2
 8001e84:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8001e88:	005b      	lsls	r3, r3, #1
 8001e8a:	643b      	str	r3, [r7, #64]	; 0x40
		  if (osx2>122)
 8001e8c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001e8e:	2b7a      	cmp	r3, #122	; 0x7a
 8001e90:	dd01      	ble.n	8001e96 <main+0x38e>
				  osx2=122;
 8001e92:	237a      	movs	r3, #122	; 0x7a
 8001e94:	643b      	str	r3, [r7, #64]	; 0x40
		  if (osx2<4)
 8001e96:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001e98:	2b03      	cmp	r3, #3
 8001e9a:	dc01      	bgt.n	8001ea0 <main+0x398>
				  osx2=4;
 8001e9c:	2304      	movs	r3, #4
 8001e9e:	643b      	str	r3, [r7, #64]	; 0x40
		  index++;
 8001ea0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ea2:	3301      	adds	r3, #1
 8001ea4:	62fb      	str	r3, [r7, #44]	; 0x2c
		  break;
 8001ea6:	e094      	b.n	8001fd2 <main+0x4ca>
	  case 2:
		  Init_interrupt3();
 8001ea8:	f000 fb92 	bl	80025d0 <Init_interrupt3>
		  ultTrigger(index);
 8001eac:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001eae:	f000 f911 	bl	80020d4 <ultTrigger>
		  vysledok = getUltCm(index);
 8001eb2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001eb4:	f000 f970 	bl	8002198 <getUltCm>
 8001eb8:	e9c7 0106 	strd	r0, r1, [r7, #24]
		  cele[index] = (int)vysledok;
 8001ebc:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001ec0:	f7fe fd2e 	bl	8000920 <__aeabi_d2iz>
 8001ec4:	4602      	mov	r2, r0
 8001ec6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ec8:	009b      	lsls	r3, r3, #2
 8001eca:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8001ece:	440b      	add	r3, r1
 8001ed0:	f843 2c44 	str.w	r2, [r3, #-68]
		  desatine = round((vysledok-cele[index])*10);
 8001ed4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ed6:	009b      	lsls	r3, r3, #2
 8001ed8:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8001edc:	4413      	add	r3, r2
 8001ede:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	f7fe faa4 	bl	8000430 <__aeabi_i2d>
 8001ee8:	4603      	mov	r3, r0
 8001eea:	460c      	mov	r4, r1
 8001eec:	461a      	mov	r2, r3
 8001eee:	4623      	mov	r3, r4
 8001ef0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001ef4:	f7fe f94e 	bl	8000194 <__aeabi_dsub>
 8001ef8:	4603      	mov	r3, r0
 8001efa:	460c      	mov	r4, r1
 8001efc:	4618      	mov	r0, r3
 8001efe:	4621      	mov	r1, r4
 8001f00:	f04f 0200 	mov.w	r2, #0
 8001f04:	4b71      	ldr	r3, [pc, #452]	; (80020cc <main+0x5c4>)
 8001f06:	f7fe faf9 	bl	80004fc <__aeabi_dmul>
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	460c      	mov	r4, r1
 8001f0e:	4618      	mov	r0, r3
 8001f10:	4621      	mov	r1, r4
 8001f12:	f000 fd7b 	bl	8002a0c <round>
 8001f16:	4603      	mov	r3, r0
 8001f18:	460c      	mov	r4, r1
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	4621      	mov	r1, r4
 8001f1e:	f7fe fcff 	bl	8000920 <__aeabi_d2iz>
 8001f22:	4603      	mov	r3, r0
 8001f24:	627b      	str	r3, [r7, #36]	; 0x24
		  sprintf(hodnota,"%d.%d",cele[index],desatine);
 8001f26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f28:	009b      	lsls	r3, r3, #2
 8001f2a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8001f2e:	4413      	add	r3, r2
 8001f30:	f853 2c44 	ldr.w	r2, [r3, #-68]
 8001f34:	f107 0010 	add.w	r0, r7, #16
 8001f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f3a:	4965      	ldr	r1, [pc, #404]	; (80020d0 <main+0x5c8>)
 8001f3c:	f000 fd2a 	bl	8002994 <siprintf>
		  dlzka = strlen(hodnota);
 8001f40:	f107 0310 	add.w	r3, r7, #16
 8001f44:	4618      	mov	r0, r3
 8001f46:	f7fe f919 	bl	800017c <strlen>
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	62bb      	str	r3, [r7, #40]	; 0x28
		  for(dlzka;dlzka<=5;dlzka++)
 8001f4e:	e008      	b.n	8001f62 <main+0x45a>
		  {
			  hodnota[dlzka] = '0';
 8001f50:	f107 0210 	add.w	r2, r7, #16
 8001f54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f56:	4413      	add	r3, r2
 8001f58:	2230      	movs	r2, #48	; 0x30
 8001f5a:	701a      	strb	r2, [r3, #0]
		  vysledok = getUltCm(index);
		  cele[index] = (int)vysledok;
		  desatine = round((vysledok-cele[index])*10);
		  sprintf(hodnota,"%d.%d",cele[index],desatine);
		  dlzka = strlen(hodnota);
		  for(dlzka;dlzka<=5;dlzka++)
 8001f5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f5e:	3301      	adds	r3, #1
 8001f60:	62bb      	str	r3, [r7, #40]	; 0x28
 8001f62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f64:	2b05      	cmp	r3, #5
 8001f66:	ddf3      	ble.n	8001f50 <main+0x448>
		  {
			  hodnota[dlzka] = '0';
		  }
		  lcdPutS(hodnota, lcdTextX(15), lcdTextY(2), decodeRgbValue(0, 0, 0), decodeRgbValue(31, 31, 31));
 8001f68:	200f      	movs	r0, #15
 8001f6a:	f7ff fc5d 	bl	8001828 <lcdTextX>
 8001f6e:	4603      	mov	r3, r0
 8001f70:	461c      	mov	r4, r3
 8001f72:	2002      	movs	r0, #2
 8001f74:	f7ff fc68 	bl	8001848 <lcdTextY>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	461d      	mov	r5, r3
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	2100      	movs	r1, #0
 8001f80:	2000      	movs	r0, #0
 8001f82:	f7ff fc35 	bl	80017f0 <decodeRgbValue>
 8001f86:	4603      	mov	r3, r0
 8001f88:	461e      	mov	r6, r3
 8001f8a:	221f      	movs	r2, #31
 8001f8c:	211f      	movs	r1, #31
 8001f8e:	201f      	movs	r0, #31
 8001f90:	f7ff fc2e 	bl	80017f0 <decodeRgbValue>
 8001f94:	4603      	mov	r3, r0
 8001f96:	f107 0010 	add.w	r0, r7, #16
 8001f9a:	9300      	str	r3, [sp, #0]
 8001f9c:	4633      	mov	r3, r6
 8001f9e:	462a      	mov	r2, r5
 8001fa0:	4621      	mov	r1, r4
 8001fa2:	f7ff fc61 	bl	8001868 <lcdPutS>
		  osx3 = 2*cele[index];
 8001fa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fa8:	009b      	lsls	r3, r3, #2
 8001faa:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8001fae:	4413      	add	r3, r2
 8001fb0:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8001fb4:	005b      	lsls	r3, r3, #1
 8001fb6:	63fb      	str	r3, [r7, #60]	; 0x3c
		  if (osx3>122)
 8001fb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001fba:	2b7a      	cmp	r3, #122	; 0x7a
 8001fbc:	dd01      	ble.n	8001fc2 <main+0x4ba>
		  		  osx3 = 122;
 8001fbe:	237a      	movs	r3, #122	; 0x7a
 8001fc0:	63fb      	str	r3, [r7, #60]	; 0x3c
		  if (osx3<4)
 8001fc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001fc4:	2b03      	cmp	r3, #3
 8001fc6:	dc01      	bgt.n	8001fcc <main+0x4c4>
		  		  osx3 = 4;
 8001fc8:	2304      	movs	r3, #4
 8001fca:	63fb      	str	r3, [r7, #60]	; 0x3c
		  index = 0;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	62fb      	str	r3, [r7, #44]	; 0x2c
		  break;
 8001fd0:	bf00      	nop
	  default:
		  break;
	  }


	if(starax1 != osx1){
 8001fd2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001fd4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001fd6:	429a      	cmp	r2, r3
 8001fd8:	d021      	beq.n	800201e <main+0x516>
			lcdLine(starax1, 64, starax1, 80, decodeRgbValue(255, 255, 255));
 8001fda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001fdc:	b21c      	sxth	r4, r3
 8001fde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001fe0:	b21d      	sxth	r5, r3
 8001fe2:	22ff      	movs	r2, #255	; 0xff
 8001fe4:	21ff      	movs	r1, #255	; 0xff
 8001fe6:	20ff      	movs	r0, #255	; 0xff
 8001fe8:	f7ff fc02 	bl	80017f0 <decodeRgbValue>
 8001fec:	4603      	mov	r3, r0
 8001fee:	9300      	str	r3, [sp, #0]
 8001ff0:	2350      	movs	r3, #80	; 0x50
 8001ff2:	462a      	mov	r2, r5
 8001ff4:	2140      	movs	r1, #64	; 0x40
 8001ff6:	4620      	mov	r0, r4
 8001ff8:	f7ff faec 	bl	80015d4 <lcdLine>
			lcdLine(osx1, 64, osx1, 80, decodeRgbValue(0, 0, 0));
 8001ffc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001ffe:	b21c      	sxth	r4, r3
 8002000:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002002:	b21d      	sxth	r5, r3
 8002004:	2200      	movs	r2, #0
 8002006:	2100      	movs	r1, #0
 8002008:	2000      	movs	r0, #0
 800200a:	f7ff fbf1 	bl	80017f0 <decodeRgbValue>
 800200e:	4603      	mov	r3, r0
 8002010:	9300      	str	r3, [sp, #0]
 8002012:	2350      	movs	r3, #80	; 0x50
 8002014:	462a      	mov	r2, r5
 8002016:	2140      	movs	r1, #64	; 0x40
 8002018:	4620      	mov	r0, r4
 800201a:	f7ff fadb 	bl	80015d4 <lcdLine>
	}
	if(starax2 != osx2){
 800201e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002020:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002022:	429a      	cmp	r2, r3
 8002024:	d021      	beq.n	800206a <main+0x562>
			lcdLine(starax2, 85, starax2, 101, decodeRgbValue(255, 255, 255));
 8002026:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002028:	b21c      	sxth	r4, r3
 800202a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800202c:	b21d      	sxth	r5, r3
 800202e:	22ff      	movs	r2, #255	; 0xff
 8002030:	21ff      	movs	r1, #255	; 0xff
 8002032:	20ff      	movs	r0, #255	; 0xff
 8002034:	f7ff fbdc 	bl	80017f0 <decodeRgbValue>
 8002038:	4603      	mov	r3, r0
 800203a:	9300      	str	r3, [sp, #0]
 800203c:	2365      	movs	r3, #101	; 0x65
 800203e:	462a      	mov	r2, r5
 8002040:	2155      	movs	r1, #85	; 0x55
 8002042:	4620      	mov	r0, r4
 8002044:	f7ff fac6 	bl	80015d4 <lcdLine>
			lcdLine(osx2, 85, osx2, 101, decodeRgbValue(0, 0, 0));
 8002048:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800204a:	b21c      	sxth	r4, r3
 800204c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800204e:	b21d      	sxth	r5, r3
 8002050:	2200      	movs	r2, #0
 8002052:	2100      	movs	r1, #0
 8002054:	2000      	movs	r0, #0
 8002056:	f7ff fbcb 	bl	80017f0 <decodeRgbValue>
 800205a:	4603      	mov	r3, r0
 800205c:	9300      	str	r3, [sp, #0]
 800205e:	2365      	movs	r3, #101	; 0x65
 8002060:	462a      	mov	r2, r5
 8002062:	2155      	movs	r1, #85	; 0x55
 8002064:	4620      	mov	r0, r4
 8002066:	f7ff fab5 	bl	80015d4 <lcdLine>
	}
	if(starax3 != osx3){
 800206a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800206c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800206e:	429a      	cmp	r2, r3
 8002070:	d021      	beq.n	80020b6 <main+0x5ae>
			lcdLine(starax3, 106, starax3, 122, decodeRgbValue(255, 255, 255));
 8002072:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002074:	b21c      	sxth	r4, r3
 8002076:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002078:	b21d      	sxth	r5, r3
 800207a:	22ff      	movs	r2, #255	; 0xff
 800207c:	21ff      	movs	r1, #255	; 0xff
 800207e:	20ff      	movs	r0, #255	; 0xff
 8002080:	f7ff fbb6 	bl	80017f0 <decodeRgbValue>
 8002084:	4603      	mov	r3, r0
 8002086:	9300      	str	r3, [sp, #0]
 8002088:	237a      	movs	r3, #122	; 0x7a
 800208a:	462a      	mov	r2, r5
 800208c:	216a      	movs	r1, #106	; 0x6a
 800208e:	4620      	mov	r0, r4
 8002090:	f7ff faa0 	bl	80015d4 <lcdLine>
			lcdLine(osx3, 106, osx3, 122, decodeRgbValue(0, 0, 0));
 8002094:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002096:	b21c      	sxth	r4, r3
 8002098:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800209a:	b21d      	sxth	r5, r3
 800209c:	2200      	movs	r2, #0
 800209e:	2100      	movs	r1, #0
 80020a0:	2000      	movs	r0, #0
 80020a2:	f7ff fba5 	bl	80017f0 <decodeRgbValue>
 80020a6:	4603      	mov	r3, r0
 80020a8:	9300      	str	r3, [sp, #0]
 80020aa:	237a      	movs	r3, #122	; 0x7a
 80020ac:	462a      	mov	r2, r5
 80020ae:	216a      	movs	r1, #106	; 0x6a
 80020b0:	4620      	mov	r0, r4
 80020b2:	f7ff fa8f 	bl	80015d4 <lcdLine>
	}

	starax1 = osx1;
 80020b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80020b8:	63bb      	str	r3, [r7, #56]	; 0x38
	starax2 = osx2;
 80020ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80020bc:	637b      	str	r3, [r7, #52]	; 0x34
	starax3 = osx3;
 80020be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80020c0:	633b      	str	r3, [r7, #48]	; 0x30



	Buzzer(cele);
 80020c2:	1d3b      	adds	r3, r7, #4
 80020c4:	4618      	mov	r0, r3
 80020c6:	f000 f919 	bl	80022fc <Buzzer>
  }
 80020ca:	e5aa      	b.n	8001c22 <main+0x11a>
 80020cc:	40240000 	.word	0x40240000
 80020d0:	08002ae4 	.word	0x08002ae4

080020d4 <ultTrigger>:
  return 0;
}

void ultTrigger(int index)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b086      	sub	sp, #24
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
	while(chooseUlt!= -1);
 80020dc:	bf00      	nop
 80020de:	4b2b      	ldr	r3, [pc, #172]	; (800218c <ultTrigger+0xb8>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020e6:	d1fa      	bne.n	80020de <ultTrigger+0xa>
	switch (index) {
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2b01      	cmp	r3, #1
 80020ec:	d01b      	beq.n	8002126 <ultTrigger+0x52>
 80020ee:	2b02      	cmp	r3, #2
 80020f0:	d030      	beq.n	8002154 <ultTrigger+0x80>
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d000      	beq.n	80020f8 <ultTrigger+0x24>
		GPIOC->BSRRL = GPIO_Pin_3;
		for (int i = 0; i < 2; i++); //cca 15 us
		GPIOC->BSRRH = GPIO_Pin_3;
		break;
	}
}
 80020f6:	e044      	b.n	8002182 <ultTrigger+0xae>
void ultTrigger(int index)
{
	while(chooseUlt!= -1);
	switch (index) {
	case 0:
		TIM_SetCounter(TIM4, 0);
 80020f8:	2100      	movs	r1, #0
 80020fa:	4825      	ldr	r0, [pc, #148]	; (8002190 <ultTrigger+0xbc>)
 80020fc:	f7fe ff88 	bl	8001010 <TIM_SetCounter>
		chooseUlt = index;
 8002100:	4a22      	ldr	r2, [pc, #136]	; (800218c <ultTrigger+0xb8>)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	6013      	str	r3, [r2, #0]
		GPIOC->BSRRL = GPIO_Pin_0;
 8002106:	4b23      	ldr	r3, [pc, #140]	; (8002194 <ultTrigger+0xc0>)
 8002108:	2201      	movs	r2, #1
 800210a:	831a      	strh	r2, [r3, #24]
		for (int i = 0; i < 2; i++); //cca 15 us
 800210c:	2300      	movs	r3, #0
 800210e:	617b      	str	r3, [r7, #20]
 8002110:	e002      	b.n	8002118 <ultTrigger+0x44>
 8002112:	697b      	ldr	r3, [r7, #20]
 8002114:	3301      	adds	r3, #1
 8002116:	617b      	str	r3, [r7, #20]
 8002118:	697b      	ldr	r3, [r7, #20]
 800211a:	2b01      	cmp	r3, #1
 800211c:	ddf9      	ble.n	8002112 <ultTrigger+0x3e>
		GPIOC->BSRRH = GPIO_Pin_0;
 800211e:	4b1d      	ldr	r3, [pc, #116]	; (8002194 <ultTrigger+0xc0>)
 8002120:	2201      	movs	r2, #1
 8002122:	835a      	strh	r2, [r3, #26]
		break;
 8002124:	e02d      	b.n	8002182 <ultTrigger+0xae>
	case 1:
		TIM_SetCounter(TIM4, 0);
 8002126:	2100      	movs	r1, #0
 8002128:	4819      	ldr	r0, [pc, #100]	; (8002190 <ultTrigger+0xbc>)
 800212a:	f7fe ff71 	bl	8001010 <TIM_SetCounter>
		chooseUlt = index;
 800212e:	4a17      	ldr	r2, [pc, #92]	; (800218c <ultTrigger+0xb8>)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6013      	str	r3, [r2, #0]
		GPIOC->BSRRL = GPIO_Pin_2;
 8002134:	4b17      	ldr	r3, [pc, #92]	; (8002194 <ultTrigger+0xc0>)
 8002136:	2204      	movs	r2, #4
 8002138:	831a      	strh	r2, [r3, #24]
		for (int i = 0; i < 2; i++); //cca 15 us
 800213a:	2300      	movs	r3, #0
 800213c:	613b      	str	r3, [r7, #16]
 800213e:	e002      	b.n	8002146 <ultTrigger+0x72>
 8002140:	693b      	ldr	r3, [r7, #16]
 8002142:	3301      	adds	r3, #1
 8002144:	613b      	str	r3, [r7, #16]
 8002146:	693b      	ldr	r3, [r7, #16]
 8002148:	2b01      	cmp	r3, #1
 800214a:	ddf9      	ble.n	8002140 <ultTrigger+0x6c>
		GPIOC->BSRRH = GPIO_Pin_2;
 800214c:	4b11      	ldr	r3, [pc, #68]	; (8002194 <ultTrigger+0xc0>)
 800214e:	2204      	movs	r2, #4
 8002150:	835a      	strh	r2, [r3, #26]
		break;
 8002152:	e016      	b.n	8002182 <ultTrigger+0xae>
	case 2:
		TIM_SetCounter(TIM4, 0);
 8002154:	2100      	movs	r1, #0
 8002156:	480e      	ldr	r0, [pc, #56]	; (8002190 <ultTrigger+0xbc>)
 8002158:	f7fe ff5a 	bl	8001010 <TIM_SetCounter>
		chooseUlt = index;
 800215c:	4a0b      	ldr	r2, [pc, #44]	; (800218c <ultTrigger+0xb8>)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6013      	str	r3, [r2, #0]
		GPIOC->BSRRL = GPIO_Pin_3;
 8002162:	4b0c      	ldr	r3, [pc, #48]	; (8002194 <ultTrigger+0xc0>)
 8002164:	2208      	movs	r2, #8
 8002166:	831a      	strh	r2, [r3, #24]
		for (int i = 0; i < 2; i++); //cca 15 us
 8002168:	2300      	movs	r3, #0
 800216a:	60fb      	str	r3, [r7, #12]
 800216c:	e002      	b.n	8002174 <ultTrigger+0xa0>
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	3301      	adds	r3, #1
 8002172:	60fb      	str	r3, [r7, #12]
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	2b01      	cmp	r3, #1
 8002178:	ddf9      	ble.n	800216e <ultTrigger+0x9a>
		GPIOC->BSRRH = GPIO_Pin_3;
 800217a:	4b06      	ldr	r3, [pc, #24]	; (8002194 <ultTrigger+0xc0>)
 800217c:	2208      	movs	r2, #8
 800217e:	835a      	strh	r2, [r3, #26]
		break;
 8002180:	bf00      	nop
	}
}
 8002182:	bf00      	nop
 8002184:	3718      	adds	r7, #24
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}
 800218a:	bf00      	nop
 800218c:	20000000 	.word	0x20000000
 8002190:	40000800 	.word	0x40000800
 8002194:	40020800 	.word	0x40020800

08002198 <getUltCm>:

double getUltCm(int index)
{
 8002198:	b590      	push	{r4, r7, lr}
 800219a:	b083      	sub	sp, #12
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
	return ((double)ultRawValue[index])/58;
 80021a0:	4a09      	ldr	r2, [pc, #36]	; (80021c8 <getUltCm+0x30>)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021a8:	4618      	mov	r0, r3
 80021aa:	f7fe f931 	bl	8000410 <__aeabi_ui2d>
 80021ae:	f04f 0200 	mov.w	r2, #0
 80021b2:	4b06      	ldr	r3, [pc, #24]	; (80021cc <getUltCm+0x34>)
 80021b4:	f7fe facc 	bl	8000750 <__aeabi_ddiv>
 80021b8:	4603      	mov	r3, r0
 80021ba:	460c      	mov	r4, r1
}
 80021bc:	4618      	mov	r0, r3
 80021be:	4621      	mov	r1, r4
 80021c0:	370c      	adds	r7, #12
 80021c2:	46bd      	mov	sp, r7
 80021c4:	bd90      	pop	{r4, r7, pc}
 80021c6:	bf00      	nop
 80021c8:	20000020 	.word	0x20000020
 80021cc:	404d0000 	.word	0x404d0000

080021d0 <TIM4_IRQHandler>:

void TIM4_IRQHandler(void)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	af00      	add	r7, sp, #0
	if (TIM_GetITStatus(TIM4, TIM_IT_Update) != RESET)
 80021d4:	2101      	movs	r1, #1
 80021d6:	480e      	ldr	r0, [pc, #56]	; (8002210 <TIM4_IRQHandler+0x40>)
 80021d8:	f7fe fff6 	bl	80011c8 <TIM_GetITStatus>
 80021dc:	4603      	mov	r3, r0
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d013      	beq.n	800220a <TIM4_IRQHandler+0x3a>
	{
		TIM_ClearITPendingBit(TIM4, TIM_IT_Update);
 80021e2:	2101      	movs	r1, #1
 80021e4:	480a      	ldr	r0, [pc, #40]	; (8002210 <TIM4_IRQHandler+0x40>)
 80021e6:	f7ff f819 	bl	800121c <TIM_ClearITPendingBit>
		if(chooseUlt!=-1)
 80021ea:	4b0a      	ldr	r3, [pc, #40]	; (8002214 <TIM4_IRQHandler+0x44>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021f2:	d00a      	beq.n	800220a <TIM4_IRQHandler+0x3a>
		{
			ultRawValue[chooseUlt] = 65535;
 80021f4:	4b07      	ldr	r3, [pc, #28]	; (8002214 <TIM4_IRQHandler+0x44>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4a07      	ldr	r2, [pc, #28]	; (8002218 <TIM4_IRQHandler+0x48>)
 80021fa:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80021fe:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			chooseUlt = -1;
 8002202:	4b04      	ldr	r3, [pc, #16]	; (8002214 <TIM4_IRQHandler+0x44>)
 8002204:	f04f 32ff 	mov.w	r2, #4294967295
 8002208:	601a      	str	r2, [r3, #0]
		}
	}
}
 800220a:	bf00      	nop
 800220c:	bd80      	pop	{r7, pc}
 800220e:	bf00      	nop
 8002210:	40000800 	.word	0x40000800
 8002214:	20000000 	.word	0x20000000
 8002218:	20000020 	.word	0x20000020

0800221c <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void)
{
 800221c:	b598      	push	{r3, r4, r7, lr}
 800221e:	af00      	add	r7, sp, #0
	if (EXTI_GetITStatus(EXTI_Line1) != RESET) {
 8002220:	2002      	movs	r0, #2
 8002222:	f7fe fc77 	bl	8000b14 <EXTI_GetITStatus>
 8002226:	4603      	mov	r3, r0
 8002228:	2b00      	cmp	r3, #0
 800222a:	d059      	beq.n	80022e0 <EXTI1_IRQHandler+0xc4>
		if (chooseUlt == 0)
 800222c:	4b2d      	ldr	r3, [pc, #180]	; (80022e4 <EXTI1_IRQHandler+0xc8>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	2b00      	cmp	r3, #0
 8002232:	d118      	bne.n	8002266 <EXTI1_IRQHandler+0x4a>
		{
			if((GPIOC->IDR & GPIO_Pin_1) && GPIO_Pin_1){
 8002234:	4b2c      	ldr	r3, [pc, #176]	; (80022e8 <EXTI1_IRQHandler+0xcc>)
 8002236:	8a1b      	ldrh	r3, [r3, #16]
 8002238:	b29b      	uxth	r3, r3
 800223a:	f003 0302 	and.w	r3, r3, #2
 800223e:	2b00      	cmp	r3, #0
 8002240:	d004      	beq.n	800224c <EXTI1_IRQHandler+0x30>
				TIM_SetCounter(TIM4, 0);
 8002242:	2100      	movs	r1, #0
 8002244:	4829      	ldr	r0, [pc, #164]	; (80022ec <EXTI1_IRQHandler+0xd0>)
 8002246:	f7fe fee3 	bl	8001010 <TIM_SetCounter>
 800224a:	e00c      	b.n	8002266 <EXTI1_IRQHandler+0x4a>
			}
			else{
				ultRawValue[chooseUlt] = TIM_GetCounter(TIM4);
 800224c:	4b25      	ldr	r3, [pc, #148]	; (80022e4 <EXTI1_IRQHandler+0xc8>)
 800224e:	681c      	ldr	r4, [r3, #0]
 8002250:	4826      	ldr	r0, [pc, #152]	; (80022ec <EXTI1_IRQHandler+0xd0>)
 8002252:	f7fe feeb 	bl	800102c <TIM_GetCounter>
 8002256:	4602      	mov	r2, r0
 8002258:	4b25      	ldr	r3, [pc, #148]	; (80022f0 <EXTI1_IRQHandler+0xd4>)
 800225a:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
				chooseUlt = -1;
 800225e:	4b21      	ldr	r3, [pc, #132]	; (80022e4 <EXTI1_IRQHandler+0xc8>)
 8002260:	f04f 32ff 	mov.w	r2, #4294967295
 8002264:	601a      	str	r2, [r3, #0]
			}
		}
		if (chooseUlt == 1){
 8002266:	4b1f      	ldr	r3, [pc, #124]	; (80022e4 <EXTI1_IRQHandler+0xc8>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	2b01      	cmp	r3, #1
 800226c:	d118      	bne.n	80022a0 <EXTI1_IRQHandler+0x84>
			if((GPIOH->IDR & GPIO_Pin_1) && GPIO_Pin_1){
 800226e:	4b21      	ldr	r3, [pc, #132]	; (80022f4 <EXTI1_IRQHandler+0xd8>)
 8002270:	8a1b      	ldrh	r3, [r3, #16]
 8002272:	b29b      	uxth	r3, r3
 8002274:	f003 0302 	and.w	r3, r3, #2
 8002278:	2b00      	cmp	r3, #0
 800227a:	d004      	beq.n	8002286 <EXTI1_IRQHandler+0x6a>
				TIM_SetCounter(TIM4, 0);
 800227c:	2100      	movs	r1, #0
 800227e:	481b      	ldr	r0, [pc, #108]	; (80022ec <EXTI1_IRQHandler+0xd0>)
 8002280:	f7fe fec6 	bl	8001010 <TIM_SetCounter>
 8002284:	e00c      	b.n	80022a0 <EXTI1_IRQHandler+0x84>
			}
			else{
				ultRawValue[chooseUlt] = TIM_GetCounter(TIM4);
 8002286:	4b17      	ldr	r3, [pc, #92]	; (80022e4 <EXTI1_IRQHandler+0xc8>)
 8002288:	681c      	ldr	r4, [r3, #0]
 800228a:	4818      	ldr	r0, [pc, #96]	; (80022ec <EXTI1_IRQHandler+0xd0>)
 800228c:	f7fe fece 	bl	800102c <TIM_GetCounter>
 8002290:	4602      	mov	r2, r0
 8002292:	4b17      	ldr	r3, [pc, #92]	; (80022f0 <EXTI1_IRQHandler+0xd4>)
 8002294:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
				chooseUlt = -1;
 8002298:	4b12      	ldr	r3, [pc, #72]	; (80022e4 <EXTI1_IRQHandler+0xc8>)
 800229a:	f04f 32ff 	mov.w	r2, #4294967295
 800229e:	601a      	str	r2, [r3, #0]
			}
		}
		if (chooseUlt == 2){
 80022a0:	4b10      	ldr	r3, [pc, #64]	; (80022e4 <EXTI1_IRQHandler+0xc8>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	2b02      	cmp	r3, #2
 80022a6:	d118      	bne.n	80022da <EXTI1_IRQHandler+0xbe>
			if((GPIOA->IDR & GPIO_Pin_1) && GPIO_Pin_1){
 80022a8:	4b13      	ldr	r3, [pc, #76]	; (80022f8 <EXTI1_IRQHandler+0xdc>)
 80022aa:	8a1b      	ldrh	r3, [r3, #16]
 80022ac:	b29b      	uxth	r3, r3
 80022ae:	f003 0302 	and.w	r3, r3, #2
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d004      	beq.n	80022c0 <EXTI1_IRQHandler+0xa4>
				TIM_SetCounter(TIM4, 0);
 80022b6:	2100      	movs	r1, #0
 80022b8:	480c      	ldr	r0, [pc, #48]	; (80022ec <EXTI1_IRQHandler+0xd0>)
 80022ba:	f7fe fea9 	bl	8001010 <TIM_SetCounter>
 80022be:	e00c      	b.n	80022da <EXTI1_IRQHandler+0xbe>
			}
			else{
				ultRawValue[chooseUlt] = TIM_GetCounter(TIM4);
 80022c0:	4b08      	ldr	r3, [pc, #32]	; (80022e4 <EXTI1_IRQHandler+0xc8>)
 80022c2:	681c      	ldr	r4, [r3, #0]
 80022c4:	4809      	ldr	r0, [pc, #36]	; (80022ec <EXTI1_IRQHandler+0xd0>)
 80022c6:	f7fe feb1 	bl	800102c <TIM_GetCounter>
 80022ca:	4602      	mov	r2, r0
 80022cc:	4b08      	ldr	r3, [pc, #32]	; (80022f0 <EXTI1_IRQHandler+0xd4>)
 80022ce:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
				chooseUlt = -1;
 80022d2:	4b04      	ldr	r3, [pc, #16]	; (80022e4 <EXTI1_IRQHandler+0xc8>)
 80022d4:	f04f 32ff 	mov.w	r2, #4294967295
 80022d8:	601a      	str	r2, [r3, #0]
			}
		}
		EXTI_ClearITPendingBit(EXTI_Line1);
 80022da:	2002      	movs	r0, #2
 80022dc:	f7fe fc3e 	bl	8000b5c <EXTI_ClearITPendingBit>
	}
}
 80022e0:	bf00      	nop
 80022e2:	bd98      	pop	{r3, r4, r7, pc}
 80022e4:	20000000 	.word	0x20000000
 80022e8:	40020800 	.word	0x40020800
 80022ec:	40000800 	.word	0x40000800
 80022f0:	20000020 	.word	0x20000020
 80022f4:	40021400 	.word	0x40021400
 80022f8:	40020000 	.word	0x40020000

080022fc <Buzzer>:

void Buzzer(int value[]){
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b084      	sub	sp, #16
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]

	int min;

	if (value[0]>= value[1])
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681a      	ldr	r2, [r3, #0]
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	3304      	adds	r3, #4
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	429a      	cmp	r2, r3
 8002310:	db03      	blt.n	800231a <Buzzer+0x1e>
		min = value[1];
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	685b      	ldr	r3, [r3, #4]
 8002316:	60fb      	str	r3, [r7, #12]
 8002318:	e002      	b.n	8002320 <Buzzer+0x24>
	else
		min = value[0];
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	60fb      	str	r3, [r7, #12]
	if (min >= value[2])
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	3308      	adds	r3, #8
 8002324:	681a      	ldr	r2, [r3, #0]
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	429a      	cmp	r2, r3
 800232a:	dc02      	bgt.n	8002332 <Buzzer+0x36>
		min = value[2];
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	689b      	ldr	r3, [r3, #8]
 8002330:	60fb      	str	r3, [r7, #12]
	if (min > 64)
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	2b40      	cmp	r3, #64	; 0x40
 8002336:	dd01      	ble.n	800233c <Buzzer+0x40>
		Set_None();
 8002338:	f000 f88c 	bl	8002454 <Set_None>
	if (min < 65 && min > 50)
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	2b40      	cmp	r3, #64	; 0x40
 8002340:	dc04      	bgt.n	800234c <Buzzer+0x50>
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	2b32      	cmp	r3, #50	; 0x32
 8002346:	dd01      	ble.n	800234c <Buzzer+0x50>
		Set_Low();
 8002348:	f000 f86c 	bl	8002424 <Set_Low>
	if (min < 51 && min > 25)
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	2b32      	cmp	r3, #50	; 0x32
 8002350:	dc04      	bgt.n	800235c <Buzzer+0x60>
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	2b19      	cmp	r3, #25
 8002356:	dd01      	ble.n	800235c <Buzzer+0x60>
		Set_Med();
 8002358:	f000 f86c 	bl	8002434 <Set_Med>
	if (min < 26)
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	2b19      	cmp	r3, #25
 8002360:	dc01      	bgt.n	8002366 <Buzzer+0x6a>
		Set_High();
 8002362:	f000 f86f 	bl	8002444 <Set_High>

}
 8002366:	bf00      	nop
 8002368:	3710      	adds	r7, #16
 800236a:	46bd      	mov	sp, r7
 800236c:	bd80      	pop	{r7, pc}
 800236e:	bf00      	nop

08002370 <Init_Buzzer>:
 */

#include "senzor/buzzer.h"

void Init_Buzzer(void)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b086      	sub	sp, #24
 8002374:	af00      	add	r7, sp, #0

	GPIO_InitTypeDef GPIO_InitStructure;
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA, ENABLE);
 8002376:	2101      	movs	r1, #1
 8002378:	2001      	movs	r0, #1
 800237a:	f7fe fcdb 	bl	8000d34 <RCC_AHBPeriphClockCmd>


	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_6;
 800237e:	2340      	movs	r3, #64	; 0x40
 8002380:	613b      	str	r3, [r7, #16]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8002382:	2302      	movs	r3, #2
 8002384:	753b      	strb	r3, [r7, #20]
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8002386:	2300      	movs	r3, #0
 8002388:	75bb      	strb	r3, [r7, #22]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 800238a:	2301      	movs	r3, #1
 800238c:	75fb      	strb	r3, [r7, #23]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_40MHz;
 800238e:	2303      	movs	r3, #3
 8002390:	757b      	strb	r3, [r7, #21]
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 8002392:	f107 0310 	add.w	r3, r7, #16
 8002396:	4619      	mov	r1, r3
 8002398:	4812      	ldr	r0, [pc, #72]	; (80023e4 <Init_Buzzer+0x74>)
 800239a:	f7fe fbed 	bl	8000b78 <GPIO_Init>

	GPIO_PinAFConfig(GPIOA, GPIO_PinSource6, GPIO_AF_TIM3);
 800239e:	2202      	movs	r2, #2
 80023a0:	2106      	movs	r1, #6
 80023a2:	4810      	ldr	r0, [pc, #64]	; (80023e4 <Init_Buzzer+0x74>)
 80023a4:	f7fe fc7e 	bl	8000ca4 <GPIO_PinAFConfig>

	TIM_TimeBaseInitTypeDef TIM_BaseStruct;
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM3, ENABLE);
 80023a8:	2101      	movs	r1, #1
 80023aa:	2002      	movs	r0, #2
 80023ac:	f7fe fcfe 	bl	8000dac <RCC_APB1PeriphClockCmd>
	TIM_BaseStruct.TIM_Prescaler = 0;
 80023b0:	2300      	movs	r3, #0
 80023b2:	80bb      	strh	r3, [r7, #4]
	TIM_BaseStruct.TIM_CounterMode = TIM_CounterMode_Up;
 80023b4:	2300      	movs	r3, #0
 80023b6:	80fb      	strh	r3, [r7, #6]
	TIM_BaseStruct.TIM_Period = 999;
 80023b8:	f240 33e7 	movw	r3, #999	; 0x3e7
 80023bc:	60bb      	str	r3, [r7, #8]
	TIM_BaseStruct.TIM_ClockDivision = TIM_CKD_DIV1;
 80023be:	2300      	movs	r3, #0
 80023c0:	81bb      	strh	r3, [r7, #12]
	TIM_TimeBaseInit(TIM3, &TIM_BaseStruct);
 80023c2:	1d3b      	adds	r3, r7, #4
 80023c4:	4619      	mov	r1, r3
 80023c6:	4808      	ldr	r0, [pc, #32]	; (80023e8 <Init_Buzzer+0x78>)
 80023c8:	f7fe fdd0 	bl	8000f6c <TIM_TimeBaseInit>

	TIM_ARRPreloadConfig(TIM3, ENABLE);
 80023cc:	2101      	movs	r1, #1
 80023ce:	4806      	ldr	r0, [pc, #24]	; (80023e8 <Init_Buzzer+0x78>)
 80023d0:	f7fe fe38 	bl	8001044 <TIM_ARRPreloadConfig>
    TIM_Cmd(TIM3, ENABLE);
 80023d4:	2101      	movs	r1, #1
 80023d6:	4804      	ldr	r0, [pc, #16]	; (80023e8 <Init_Buzzer+0x78>)
 80023d8:	f7fe fe54 	bl	8001084 <TIM_Cmd>

}
 80023dc:	bf00      	nop
 80023de:	3718      	adds	r7, #24
 80023e0:	46bd      	mov	sp, r7
 80023e2:	bd80      	pop	{r7, pc}
 80023e4:	40020000 	.word	0x40020000
 80023e8:	40000400 	.word	0x40000400

080023ec <Set_channel>:

void Set_channel(int premenna){
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b086      	sub	sp, #24
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]


		TIM_OCInitTypeDef TIM_OCInitStructure;
		TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
 80023f4:	2360      	movs	r3, #96	; 0x60
 80023f6:	81bb      	strh	r3, [r7, #12]
		TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
 80023f8:	2301      	movs	r3, #1
 80023fa:	81fb      	strh	r3, [r7, #14]
		TIM_OCInitStructure.TIM_Pulse =premenna;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	613b      	str	r3, [r7, #16]
		TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;
 8002400:	2300      	movs	r3, #0
 8002402:	82bb      	strh	r3, [r7, #20]

		TIM_OC1Init(TIM3, &TIM_OCInitStructure);
 8002404:	f107 030c 	add.w	r3, r7, #12
 8002408:	4619      	mov	r1, r3
 800240a:	4805      	ldr	r0, [pc, #20]	; (8002420 <Set_channel+0x34>)
 800240c:	f7fe fe5a 	bl	80010c4 <TIM_OC1Init>
		TIM_OC1PreloadConfig(TIM3, TIM_OCPreload_Enable);
 8002410:	2108      	movs	r1, #8
 8002412:	4803      	ldr	r0, [pc, #12]	; (8002420 <Set_channel+0x34>)
 8002414:	f7fe fe98 	bl	8001148 <TIM_OC1PreloadConfig>
}
 8002418:	bf00      	nop
 800241a:	3718      	adds	r7, #24
 800241c:	46bd      	mov	sp, r7
 800241e:	bd80      	pop	{r7, pc}
 8002420:	40000400 	.word	0x40000400

08002424 <Set_Low>:

void Set_Low (void){
 8002424:	b580      	push	{r7, lr}
 8002426:	af00      	add	r7, sp, #0


	Set_channel(249);
 8002428:	20f9      	movs	r0, #249	; 0xf9
 800242a:	f7ff ffdf 	bl	80023ec <Set_channel>
}
 800242e:	bf00      	nop
 8002430:	bd80      	pop	{r7, pc}
 8002432:	bf00      	nop

08002434 <Set_Med>:

void Set_Med (void){
 8002434:	b580      	push	{r7, lr}
 8002436:	af00      	add	r7, sp, #0

	Set_channel(499);
 8002438:	f240 10f3 	movw	r0, #499	; 0x1f3
 800243c:	f7ff ffd6 	bl	80023ec <Set_channel>
}
 8002440:	bf00      	nop
 8002442:	bd80      	pop	{r7, pc}

08002444 <Set_High>:

void Set_High (void){
 8002444:	b580      	push	{r7, lr}
 8002446:	af00      	add	r7, sp, #0


	Set_channel(749);
 8002448:	f240 20ed 	movw	r0, #749	; 0x2ed
 800244c:	f7ff ffce 	bl	80023ec <Set_channel>
}
 8002450:	bf00      	nop
 8002452:	bd80      	pop	{r7, pc}

08002454 <Set_None>:

void Set_None (void){
 8002454:	b580      	push	{r7, lr}
 8002456:	af00      	add	r7, sp, #0

	Set_channel(999);
 8002458:	f240 30e7 	movw	r0, #999	; 0x3e7
 800245c:	f7ff ffc6 	bl	80023ec <Set_channel>
}
 8002460:	bf00      	nop
 8002462:	bd80      	pop	{r7, pc}

08002464 <Ultrasonic_init>:

#include "inicia.h"

// inicializacia vstupov, vystupov, preruseni a casovaca
void Ultrasonic_init(void)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b088      	sub	sp, #32
 8002468:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;
	NVIC_InitTypeDef NVIC_InitStructure;

	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA, ENABLE);
 800246a:	2101      	movs	r1, #1
 800246c:	2001      	movs	r0, #1
 800246e:	f7fe fc61 	bl	8000d34 <RCC_AHBPeriphClockCmd>

	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_1;
 8002472:	2302      	movs	r3, #2
 8002474:	61bb      	str	r3, [r7, #24]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
 8002476:	2300      	movs	r3, #0
 8002478:	773b      	strb	r3, [r7, #28]
	GPIO_InitStructure.GPIO_OType = GPIO_OType_OD;
 800247a:	2301      	movs	r3, #1
 800247c:	77bb      	strb	r3, [r7, #30]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 800247e:	2300      	movs	r3, #0
 8002480:	77fb      	strb	r3, [r7, #31]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_40MHz;
 8002482:	2303      	movs	r3, #3
 8002484:	777b      	strb	r3, [r7, #29]
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 8002486:	f107 0318 	add.w	r3, r7, #24
 800248a:	4619      	mov	r1, r3
 800248c:	4840      	ldr	r0, [pc, #256]	; (8002590 <Ultrasonic_init+0x12c>)
 800248e:	f7fe fb73 	bl	8000b78 <GPIO_Init>

	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOH, ENABLE);
 8002492:	2101      	movs	r1, #1
 8002494:	2020      	movs	r0, #32
 8002496:	f7fe fc4d 	bl	8000d34 <RCC_AHBPeriphClockCmd>

	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_1;
 800249a:	2302      	movs	r3, #2
 800249c:	61bb      	str	r3, [r7, #24]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
 800249e:	2300      	movs	r3, #0
 80024a0:	773b      	strb	r3, [r7, #28]
	GPIO_InitStructure.GPIO_OType = GPIO_OType_OD;
 80024a2:	2301      	movs	r3, #1
 80024a4:	77bb      	strb	r3, [r7, #30]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 80024a6:	2300      	movs	r3, #0
 80024a8:	77fb      	strb	r3, [r7, #31]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_40MHz;
 80024aa:	2303      	movs	r3, #3
 80024ac:	777b      	strb	r3, [r7, #29]
	GPIO_Init(GPIOH, &GPIO_InitStructure);
 80024ae:	f107 0318 	add.w	r3, r7, #24
 80024b2:	4619      	mov	r1, r3
 80024b4:	4837      	ldr	r0, [pc, #220]	; (8002594 <Ultrasonic_init+0x130>)
 80024b6:	f7fe fb5f 	bl	8000b78 <GPIO_Init>

	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOC, ENABLE);
 80024ba:	2101      	movs	r1, #1
 80024bc:	2004      	movs	r0, #4
 80024be:	f7fe fc39 	bl	8000d34 <RCC_AHBPeriphClockCmd>

	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_2 | GPIO_Pin_3;
 80024c2:	230d      	movs	r3, #13
 80024c4:	61bb      	str	r3, [r7, #24]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 80024c6:	2301      	movs	r3, #1
 80024c8:	773b      	strb	r3, [r7, #28]
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 80024ca:	2300      	movs	r3, #0
 80024cc:	77bb      	strb	r3, [r7, #30]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 80024ce:	2300      	movs	r3, #0
 80024d0:	77fb      	strb	r3, [r7, #31]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_40MHz;
 80024d2:	2303      	movs	r3, #3
 80024d4:	777b      	strb	r3, [r7, #29]
	GPIO_Init(GPIOC, &GPIO_InitStructure);
 80024d6:	f107 0318 	add.w	r3, r7, #24
 80024da:	4619      	mov	r1, r3
 80024dc:	482e      	ldr	r0, [pc, #184]	; (8002598 <Ultrasonic_init+0x134>)
 80024de:	f7fe fb4b 	bl	8000b78 <GPIO_Init>

	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_1;
 80024e2:	2302      	movs	r3, #2
 80024e4:	61bb      	str	r3, [r7, #24]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
 80024e6:	2300      	movs	r3, #0
 80024e8:	773b      	strb	r3, [r7, #28]
	GPIO_InitStructure.GPIO_OType = GPIO_OType_OD;
 80024ea:	2301      	movs	r3, #1
 80024ec:	77bb      	strb	r3, [r7, #30]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 80024ee:	2300      	movs	r3, #0
 80024f0:	77fb      	strb	r3, [r7, #31]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_40MHz;
 80024f2:	2303      	movs	r3, #3
 80024f4:	777b      	strb	r3, [r7, #29]
	GPIO_Init(GPIOC, &GPIO_InitStructure);
 80024f6:	f107 0318 	add.w	r3, r7, #24
 80024fa:	4619      	mov	r1, r3
 80024fc:	4826      	ldr	r0, [pc, #152]	; (8002598 <Ultrasonic_init+0x134>)
 80024fe:	f7fe fb3b 	bl	8000b78 <GPIO_Init>

	EXTI_InitTypeDef EXTI_InitStructure;
	EXTI_InitStructure.EXTI_Line = EXTI_Line1;
 8002502:	2302      	movs	r3, #2
 8002504:	60fb      	str	r3, [r7, #12]
	EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
 8002506:	2300      	movs	r3, #0
 8002508:	743b      	strb	r3, [r7, #16]
	EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising_Falling;
 800250a:	2310      	movs	r3, #16
 800250c:	747b      	strb	r3, [r7, #17]
	EXTI_InitStructure.EXTI_LineCmd = ENABLE;
 800250e:	2301      	movs	r3, #1
 8002510:	74bb      	strb	r3, [r7, #18]
	EXTI_Init(&EXTI_InitStructure);
 8002512:	f107 030c 	add.w	r3, r7, #12
 8002516:	4618      	mov	r0, r3
 8002518:	f7fe fa8a 	bl	8000a30 <EXTI_Init>

	NVIC_InitStructure.NVIC_IRQChannel = EXTI1_IRQn;
 800251c:	2307      	movs	r3, #7
 800251e:	753b      	strb	r3, [r7, #20]
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
 8002520:	2300      	movs	r3, #0
 8002522:	757b      	strb	r3, [r7, #21]
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
 8002524:	2300      	movs	r3, #0
 8002526:	75bb      	strb	r3, [r7, #22]
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8002528:	2301      	movs	r3, #1
 800252a:	75fb      	strb	r3, [r7, #23]
	NVIC_Init(&NVIC_InitStructure);
 800252c:	f107 0314 	add.w	r3, r7, #20
 8002530:	4618      	mov	r0, r3
 8002532:	f7fe fa1d 	bl	8000970 <NVIC_Init>

	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM4, ENABLE);
 8002536:	2101      	movs	r1, #1
 8002538:	2004      	movs	r0, #4
 800253a:	f7fe fc37 	bl	8000dac <RCC_APB1PeriphClockCmd>

	TIM_TimeBaseInitTypeDef timerInitStructure;	// timer clock 2000khz
	timerInitStructure.TIM_Prescaler = 1; 		// 2000khz/2 = 1000khz = kazdu 1 us
 800253e:	2301      	movs	r3, #1
 8002540:	803b      	strh	r3, [r7, #0]
	timerInitStructure.TIM_CounterMode = TIM_CounterMode_Up;
 8002542:	2300      	movs	r3, #0
 8002544:	807b      	strh	r3, [r7, #2]
	timerInitStructure.TIM_Period = 60000; 		// po 60 ms si povie ze to uz je maximum
 8002546:	f64e 2360 	movw	r3, #60000	; 0xea60
 800254a:	607b      	str	r3, [r7, #4]
	timerInitStructure.TIM_ClockDivision = TIM_CKD_DIV1;
 800254c:	2300      	movs	r3, #0
 800254e:	813b      	strh	r3, [r7, #8]
	TIM_TimeBaseInit(TIM4, &timerInitStructure);
 8002550:	463b      	mov	r3, r7
 8002552:	4619      	mov	r1, r3
 8002554:	4811      	ldr	r0, [pc, #68]	; (800259c <Ultrasonic_init+0x138>)
 8002556:	f7fe fd09 	bl	8000f6c <TIM_TimeBaseInit>
	TIM_Cmd(TIM4, ENABLE);
 800255a:	2101      	movs	r1, #1
 800255c:	480f      	ldr	r0, [pc, #60]	; (800259c <Ultrasonic_init+0x138>)
 800255e:	f7fe fd91 	bl	8001084 <TIM_Cmd>
	TIM_ITConfig(TIM4, TIM_IT_Update, ENABLE);
 8002562:	2201      	movs	r2, #1
 8002564:	2101      	movs	r1, #1
 8002566:	480d      	ldr	r0, [pc, #52]	; (800259c <Ultrasonic_init+0x138>)
 8002568:	f7fe fe0a 	bl	8001180 <TIM_ITConfig>

	NVIC_InitStructure.NVIC_IRQChannel = TIM4_IRQn;
 800256c:	231e      	movs	r3, #30
 800256e:	753b      	strb	r3, [r7, #20]
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
 8002570:	2300      	movs	r3, #0
 8002572:	757b      	strb	r3, [r7, #21]
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
 8002574:	2300      	movs	r3, #0
 8002576:	75bb      	strb	r3, [r7, #22]
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8002578:	2301      	movs	r3, #1
 800257a:	75fb      	strb	r3, [r7, #23]
	NVIC_Init(&NVIC_InitStructure);
 800257c:	f107 0314 	add.w	r3, r7, #20
 8002580:	4618      	mov	r0, r3
 8002582:	f7fe f9f5 	bl	8000970 <NVIC_Init>

}
 8002586:	bf00      	nop
 8002588:	3720      	adds	r7, #32
 800258a:	46bd      	mov	sp, r7
 800258c:	bd80      	pop	{r7, pc}
 800258e:	bf00      	nop
 8002590:	40020000 	.word	0x40020000
 8002594:	40021400 	.word	0x40021400
 8002598:	40020800 	.word	0x40020800
 800259c:	40000800 	.word	0x40000800

080025a0 <Init_interrupt1>:


// inicializacia portu, na ktorom sa ma vykonat prerusenie
void Init_interrupt1(void)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	af00      	add	r7, sp, #0
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
 80025a4:	2101      	movs	r1, #1
 80025a6:	2001      	movs	r0, #1
 80025a8:	f7fe fbe2 	bl	8000d70 <RCC_APB2PeriphClockCmd>

	SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOC, EXTI_PinSource1);
 80025ac:	2101      	movs	r1, #1
 80025ae:	2002      	movs	r0, #2
 80025b0:	f7fe fc9a 	bl	8000ee8 <SYSCFG_EXTILineConfig>
}
 80025b4:	bf00      	nop
 80025b6:	bd80      	pop	{r7, pc}

080025b8 <Init_interrupt2>:

// inicializacia portu, na ktorom sa ma vykonat prerusenie
void Init_interrupt2(void)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	af00      	add	r7, sp, #0
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
 80025bc:	2101      	movs	r1, #1
 80025be:	2001      	movs	r0, #1
 80025c0:	f7fe fbd6 	bl	8000d70 <RCC_APB2PeriphClockCmd>

	SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOH, EXTI_PinSource1);
 80025c4:	2101      	movs	r1, #1
 80025c6:	2005      	movs	r0, #5
 80025c8:	f7fe fc8e 	bl	8000ee8 <SYSCFG_EXTILineConfig>
}
 80025cc:	bf00      	nop
 80025ce:	bd80      	pop	{r7, pc}

080025d0 <Init_interrupt3>:

// inicializacia portu, na ktorom sa ma vykonat prerusenie
void Init_interrupt3(void)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	af00      	add	r7, sp, #0
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
 80025d4:	2101      	movs	r1, #1
 80025d6:	2001      	movs	r0, #1
 80025d8:	f7fe fbca 	bl	8000d70 <RCC_APB2PeriphClockCmd>

	SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOA, EXTI_PinSource1);
 80025dc:	2101      	movs	r1, #1
 80025de:	2000      	movs	r0, #0
 80025e0:	f7fe fc82 	bl	8000ee8 <SYSCFG_EXTILineConfig>
}
 80025e4:	bf00      	nop
 80025e6:	bd80      	pop	{r7, pc}

080025e8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80025e8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002620 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80025ec:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80025ee:	e003      	b.n	80025f8 <LoopCopyDataInit>

080025f0 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80025f0:	4b0c      	ldr	r3, [pc, #48]	; (8002624 <LoopFillZerobss+0x18>)
  ldr r3, [r3, r1]
 80025f2:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80025f4:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80025f6:	3104      	adds	r1, #4

080025f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80025f8:	480b      	ldr	r0, [pc, #44]	; (8002628 <LoopFillZerobss+0x1c>)
  ldr r3, =_edata
 80025fa:	4b0c      	ldr	r3, [pc, #48]	; (800262c <LoopFillZerobss+0x20>)
  adds r2, r0, r1
 80025fc:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80025fe:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002600:	d3f6      	bcc.n	80025f0 <CopyDataInit>
  ldr r2, =_sbss
 8002602:	4a0b      	ldr	r2, [pc, #44]	; (8002630 <LoopFillZerobss+0x24>)
  b LoopFillZerobss
 8002604:	e002      	b.n	800260c <LoopFillZerobss>

08002606 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8002606:	2300      	movs	r3, #0
  str r3, [r2], #4
 8002608:	f842 3b04 	str.w	r3, [r2], #4

0800260c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800260c:	4b09      	ldr	r3, [pc, #36]	; (8002634 <LoopFillZerobss+0x28>)
  cmp r2, r3
 800260e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002610:	d3f9      	bcc.n	8002606 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002612:	f000 f841 	bl	8002698 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002616:	f000 f9d3 	bl	80029c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800261a:	f7ff fa75 	bl	8001b08 <main>
  bx lr
 800261e:	4770      	bx	lr

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002620:	20014000 	.word	0x20014000
/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
  b LoopCopyDataInit

CopyDataInit:
  ldr r3, =_sidata
 8002624:	080030fc 	.word	0x080030fc
  ldr r3, [r3, r1]
  str r3, [r0, r1]
  adds r1, r1, #4

LoopCopyDataInit:
  ldr r0, =_sdata
 8002628:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800262c:	20000004 	.word	0x20000004
  adds r2, r0, r1
  cmp r2, r3
  bcc CopyDataInit
  ldr r2, =_sbss
 8002630:	20000004 	.word	0x20000004
FillZerobss:
  movs r3, #0
  str r3, [r2], #4

LoopFillZerobss:
  ldr r3, = _ebss
 8002634:	2000002c 	.word	0x2000002c

08002638 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002638:	e7fe      	b.n	8002638 <ADC1_IRQHandler>
	...

0800263c <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 800263c:	b480      	push	{r7}
 800263e:	af00      	add	r7, sp, #0
}
 8002640:	bf00      	nop
 8002642:	46bd      	mov	sp, r7
 8002644:	bc80      	pop	{r7}
 8002646:	4770      	bx	lr

08002648 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8002648:	b480      	push	{r7}
 800264a:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
  {
  }
 800264c:	e7fe      	b.n	800264c <HardFault_Handler+0x4>
 800264e:	bf00      	nop

08002650 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8002650:	b480      	push	{r7}
 8002652:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
  {
  }
 8002654:	e7fe      	b.n	8002654 <MemManage_Handler+0x4>
 8002656:	bf00      	nop

08002658 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8002658:	b480      	push	{r7}
 800265a:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
  {
  }
 800265c:	e7fe      	b.n	800265c <BusFault_Handler+0x4>
 800265e:	bf00      	nop

08002660 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8002660:	b480      	push	{r7}
 8002662:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
  {
  }
 8002664:	e7fe      	b.n	8002664 <UsageFault_Handler+0x4>
 8002666:	bf00      	nop

08002668 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8002668:	b480      	push	{r7}
 800266a:	af00      	add	r7, sp, #0
}
 800266c:	bf00      	nop
 800266e:	46bd      	mov	sp, r7
 8002670:	bc80      	pop	{r7}
 8002672:	4770      	bx	lr

08002674 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8002674:	b480      	push	{r7}
 8002676:	af00      	add	r7, sp, #0
}
 8002678:	bf00      	nop
 800267a:	46bd      	mov	sp, r7
 800267c:	bc80      	pop	{r7}
 800267e:	4770      	bx	lr

08002680 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8002680:	b480      	push	{r7}
 8002682:	af00      	add	r7, sp, #0
}
 8002684:	bf00      	nop
 8002686:	46bd      	mov	sp, r7
 8002688:	bc80      	pop	{r7}
 800268a:	4770      	bx	lr

0800268c <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 800268c:	b480      	push	{r7}
 800268e:	af00      	add	r7, sp, #0
	/*  TimingDelay_Decrement(); */
#ifdef USE_STM32L_DISCOVERY
  TimingDelay_Decrement();
#endif
}
 8002690:	bf00      	nop
 8002692:	46bd      	mov	sp, r7
 8002694:	bc80      	pop	{r7}
 8002696:	4770      	bx	lr

08002698 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	af00      	add	r7, sp, #0
  /*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100;
 800269c:	4a15      	ldr	r2, [pc, #84]	; (80026f4 <SystemInit+0x5c>)
 800269e:	4b15      	ldr	r3, [pc, #84]	; (80026f4 <SystemInit+0x5c>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026a6:	6013      	str	r3, [r2, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t)0x88FFC00C;
 80026a8:	4912      	ldr	r1, [pc, #72]	; (80026f4 <SystemInit+0x5c>)
 80026aa:	4b12      	ldr	r3, [pc, #72]	; (80026f4 <SystemInit+0x5c>)
 80026ac:	689a      	ldr	r2, [r3, #8]
 80026ae:	4b12      	ldr	r3, [pc, #72]	; (80026f8 <SystemInit+0x60>)
 80026b0:	4013      	ands	r3, r2
 80026b2:	608b      	str	r3, [r1, #8]
  
  /*!< Reset HSION, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xEEFEFFFE;
 80026b4:	4a0f      	ldr	r2, [pc, #60]	; (80026f4 <SystemInit+0x5c>)
 80026b6:	4b0f      	ldr	r3, [pc, #60]	; (80026f4 <SystemInit+0x5c>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 80026be:	f023 1301 	bic.w	r3, r3, #65537	; 0x10001
 80026c2:	6013      	str	r3, [r2, #0]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80026c4:	4a0b      	ldr	r2, [pc, #44]	; (80026f4 <SystemInit+0x5c>)
 80026c6:	4b0b      	ldr	r3, [pc, #44]	; (80026f4 <SystemInit+0x5c>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80026ce:	6013      	str	r3, [r2, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFF;
 80026d0:	4a08      	ldr	r2, [pc, #32]	; (80026f4 <SystemInit+0x5c>)
 80026d2:	4b08      	ldr	r3, [pc, #32]	; (80026f4 <SystemInit+0x5c>)
 80026d4:	689b      	ldr	r3, [r3, #8]
 80026d6:	f423 037d 	bic.w	r3, r3, #16580608	; 0xfd0000
 80026da:	6093      	str	r3, [r2, #8]

  /*!< Disable all interrupts */
  RCC->CIR = 0x00000000;
 80026dc:	4b05      	ldr	r3, [pc, #20]	; (80026f4 <SystemInit+0x5c>)
 80026de:	2200      	movs	r2, #0
 80026e0:	60da      	str	r2, [r3, #12]

  /* Configure the System clock frequency, AHB/APBx prescalers and Flash settings */
  SetSysClock();
 80026e2:	f000 f80d 	bl	8002700 <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80026e6:	4b05      	ldr	r3, [pc, #20]	; (80026fc <SystemInit+0x64>)
 80026e8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80026ec:	609a      	str	r2, [r3, #8]
#endif
}
 80026ee:	bf00      	nop
 80026f0:	bd80      	pop	{r7, pc}
 80026f2:	bf00      	nop
 80026f4:	40023800 	.word	0x40023800
 80026f8:	88ffc00c 	.word	0x88ffc00c
 80026fc:	e000ed00 	.word	0xe000ed00

08002700 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).             
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8002700:	b480      	push	{r7}
 8002702:	b083      	sub	sp, #12
 8002704:	af00      	add	r7, sp, #0
  __IO uint32_t  MSIStatus = 0;
 8002706:	2300      	movs	r3, #0
 8002708:	607b      	str	r3, [r7, #4]
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/
  if ((RCC->CR & RCC_CR_MSIRDY) != RESET)
 800270a:	4b2f      	ldr	r3, [pc, #188]	; (80027c8 <SetSysClock+0xc8>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002712:	2b00      	cmp	r3, #0
 8002714:	d002      	beq.n	800271c <SetSysClock+0x1c>
  {
    MSIStatus = (uint32_t)0x01;
 8002716:	2301      	movs	r3, #1
 8002718:	607b      	str	r3, [r7, #4]
 800271a:	e001      	b.n	8002720 <SetSysClock+0x20>
  }
  else
  {
    MSIStatus = (uint32_t)0x00;
 800271c:	2300      	movs	r3, #0
 800271e:	607b      	str	r3, [r7, #4]
  }
   if (MSIStatus == (uint32_t)0x01)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2b01      	cmp	r3, #1
 8002724:	d14b      	bne.n	80027be <SetSysClock+0xbe>
   {
    /* Flash 0 wait state */
    FLASH->ACR &= ~FLASH_ACR_LATENCY;
 8002726:	4a29      	ldr	r2, [pc, #164]	; (80027cc <SetSysClock+0xcc>)
 8002728:	4b28      	ldr	r3, [pc, #160]	; (80027cc <SetSysClock+0xcc>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f023 0301 	bic.w	r3, r3, #1
 8002730:	6013      	str	r3, [r2, #0]
    
    /* Disable Prefetch Buffer */
    FLASH->ACR &= ~FLASH_ACR_PRFTEN;
 8002732:	4a26      	ldr	r2, [pc, #152]	; (80027cc <SetSysClock+0xcc>)
 8002734:	4b25      	ldr	r3, [pc, #148]	; (80027cc <SetSysClock+0xcc>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f023 0302 	bic.w	r3, r3, #2
 800273c:	6013      	str	r3, [r2, #0]

    /* Disable 64-bit access */
    FLASH->ACR &= ~FLASH_ACR_ACC64;
 800273e:	4a23      	ldr	r2, [pc, #140]	; (80027cc <SetSysClock+0xcc>)
 8002740:	4b22      	ldr	r3, [pc, #136]	; (80027cc <SetSysClock+0xcc>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f023 0304 	bic.w	r3, r3, #4
 8002748:	6013      	str	r3, [r2, #0]
    
    /* Power enable */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 800274a:	4a1f      	ldr	r2, [pc, #124]	; (80027c8 <SetSysClock+0xc8>)
 800274c:	4b1e      	ldr	r3, [pc, #120]	; (80027c8 <SetSysClock+0xc8>)
 800274e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002750:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002754:	6253      	str	r3, [r2, #36]	; 0x24
  
    /* Select the Voltage Range 3 (1.2 V) */
    PWR->CR = PWR_CR_VOS;
 8002756:	4b1e      	ldr	r3, [pc, #120]	; (80027d0 <SetSysClock+0xd0>)
 8002758:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
 800275c:	601a      	str	r2, [r3, #0]
  
    /* Wait Until the Voltage Regulator is ready */
    while((PWR->CSR & PWR_CSR_VOSF) != RESET)
 800275e:	bf00      	nop
 8002760:	4b1b      	ldr	r3, [pc, #108]	; (80027d0 <SetSysClock+0xd0>)
 8002762:	685b      	ldr	r3, [r3, #4]
 8002764:	f003 0310 	and.w	r3, r3, #16
 8002768:	2b00      	cmp	r3, #0
 800276a:	d1f9      	bne.n	8002760 <SetSysClock+0x60>
    {
    }
    /* HCLK = SYSCLK /1*/
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 800276c:	4a16      	ldr	r2, [pc, #88]	; (80027c8 <SetSysClock+0xc8>)
 800276e:	4b16      	ldr	r3, [pc, #88]	; (80027c8 <SetSysClock+0xc8>)
 8002770:	689b      	ldr	r3, [r3, #8]
 8002772:	6093      	str	r3, [r2, #8]

    /* PCLK2 = HCLK /1*/
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 8002774:	4a14      	ldr	r2, [pc, #80]	; (80027c8 <SetSysClock+0xc8>)
 8002776:	4b14      	ldr	r3, [pc, #80]	; (80027c8 <SetSysClock+0xc8>)
 8002778:	689b      	ldr	r3, [r3, #8]
 800277a:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK /1*/
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV1;
 800277c:	4a12      	ldr	r2, [pc, #72]	; (80027c8 <SetSysClock+0xc8>)
 800277e:	4b12      	ldr	r3, [pc, #72]	; (80027c8 <SetSysClock+0xc8>)
 8002780:	689b      	ldr	r3, [r3, #8]
 8002782:	6093      	str	r3, [r2, #8]
  
    RCC->ICSCR &= (uint32_t)((uint32_t)~(RCC_ICSCR_MSIRANGE));
 8002784:	4a10      	ldr	r2, [pc, #64]	; (80027c8 <SetSysClock+0xc8>)
 8002786:	4b10      	ldr	r3, [pc, #64]	; (80027c8 <SetSysClock+0xc8>)
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800278e:	6053      	str	r3, [r2, #4]
    RCC->ICSCR |= (uint32_t)RCC_ICSCR_MSIRANGE_5;
 8002790:	4a0d      	ldr	r2, [pc, #52]	; (80027c8 <SetSysClock+0xc8>)
 8002792:	4b0d      	ldr	r3, [pc, #52]	; (80027c8 <SetSysClock+0xc8>)
 8002794:	685b      	ldr	r3, [r3, #4]
 8002796:	f443 4320 	orr.w	r3, r3, #40960	; 0xa000
 800279a:	6053      	str	r3, [r2, #4]

    /* Select MSI as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 800279c:	4a0a      	ldr	r2, [pc, #40]	; (80027c8 <SetSysClock+0xc8>)
 800279e:	4b0a      	ldr	r3, [pc, #40]	; (80027c8 <SetSysClock+0xc8>)
 80027a0:	689b      	ldr	r3, [r3, #8]
 80027a2:	f023 0303 	bic.w	r3, r3, #3
 80027a6:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_MSI;
 80027a8:	4a07      	ldr	r2, [pc, #28]	; (80027c8 <SetSysClock+0xc8>)
 80027aa:	4b07      	ldr	r3, [pc, #28]	; (80027c8 <SetSysClock+0xc8>)
 80027ac:	689b      	ldr	r3, [r3, #8]
 80027ae:	6093      	str	r3, [r2, #8]

    /* Wait till MSI is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)RCC_CFGR_SWS_MSI)
 80027b0:	bf00      	nop
 80027b2:	4b05      	ldr	r3, [pc, #20]	; (80027c8 <SetSysClock+0xc8>)
 80027b4:	689b      	ldr	r3, [r3, #8]
 80027b6:	f003 030c 	and.w	r3, r3, #12
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d1f9      	bne.n	80027b2 <SetSysClock+0xb2>
  else
  {
    /* If MSI fails to start-up, the application will have wrong clock
       configuration. User can add here some code to deal with this error */
  }
}
 80027be:	bf00      	nop
 80027c0:	370c      	adds	r7, #12
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bc80      	pop	{r7}
 80027c6:	4770      	bx	lr
 80027c8:	40023800 	.word	0x40023800
 80027cc:	40023c00 	.word	0x40023c00
 80027d0:	40007000 	.word	0x40007000

080027d4 <ts_itoa>:
**  Abstract: Convert integer to ascii
**  Returns:  void
**---------------------------------------------------------------------------
*/
void ts_itoa(char **buf, unsigned int d, int base)
{
 80027d4:	b480      	push	{r7}
 80027d6:	b087      	sub	sp, #28
 80027d8:	af00      	add	r7, sp, #0
 80027da:	60f8      	str	r0, [r7, #12]
 80027dc:	60b9      	str	r1, [r7, #8]
 80027de:	607a      	str	r2, [r7, #4]
	int div = 1;
 80027e0:	2301      	movs	r3, #1
 80027e2:	617b      	str	r3, [r7, #20]
	while (d/div >= base)
 80027e4:	e004      	b.n	80027f0 <ts_itoa+0x1c>
		div *= base;
 80027e6:	697b      	ldr	r3, [r7, #20]
 80027e8:	687a      	ldr	r2, [r7, #4]
 80027ea:	fb02 f303 	mul.w	r3, r2, r3
 80027ee:	617b      	str	r3, [r7, #20]
**---------------------------------------------------------------------------
*/
void ts_itoa(char **buf, unsigned int d, int base)
{
	int div = 1;
	while (d/div >= base)
 80027f0:	697b      	ldr	r3, [r7, #20]
 80027f2:	68ba      	ldr	r2, [r7, #8]
 80027f4:	fbb2 f2f3 	udiv	r2, r2, r3
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	429a      	cmp	r2, r3
 80027fc:	d2f3      	bcs.n	80027e6 <ts_itoa+0x12>
		div *= base;

	while (div != 0)
 80027fe:	e029      	b.n	8002854 <ts_itoa+0x80>
	{
		int num = d/div;
 8002800:	697b      	ldr	r3, [r7, #20]
 8002802:	68ba      	ldr	r2, [r7, #8]
 8002804:	fbb2 f3f3 	udiv	r3, r2, r3
 8002808:	613b      	str	r3, [r7, #16]
		d = d%div;
 800280a:	697a      	ldr	r2, [r7, #20]
 800280c:	68bb      	ldr	r3, [r7, #8]
 800280e:	fbb3 f1f2 	udiv	r1, r3, r2
 8002812:	fb02 f201 	mul.w	r2, r2, r1
 8002816:	1a9b      	subs	r3, r3, r2
 8002818:	60bb      	str	r3, [r7, #8]
		div /= base;
 800281a:	697a      	ldr	r2, [r7, #20]
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	fb92 f3f3 	sdiv	r3, r2, r3
 8002822:	617b      	str	r3, [r7, #20]
		if (num > 9)
 8002824:	693b      	ldr	r3, [r7, #16]
 8002826:	2b09      	cmp	r3, #9
 8002828:	dd0a      	ble.n	8002840 <ts_itoa+0x6c>
			*((*buf)++) = (num-10) + 'A';
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	1c59      	adds	r1, r3, #1
 8002830:	68fa      	ldr	r2, [r7, #12]
 8002832:	6011      	str	r1, [r2, #0]
 8002834:	693a      	ldr	r2, [r7, #16]
 8002836:	b2d2      	uxtb	r2, r2
 8002838:	3237      	adds	r2, #55	; 0x37
 800283a:	b2d2      	uxtb	r2, r2
 800283c:	701a      	strb	r2, [r3, #0]
 800283e:	e009      	b.n	8002854 <ts_itoa+0x80>
		else
			*((*buf)++) = num + '0';
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	1c59      	adds	r1, r3, #1
 8002846:	68fa      	ldr	r2, [r7, #12]
 8002848:	6011      	str	r1, [r2, #0]
 800284a:	693a      	ldr	r2, [r7, #16]
 800284c:	b2d2      	uxtb	r2, r2
 800284e:	3230      	adds	r2, #48	; 0x30
 8002850:	b2d2      	uxtb	r2, r2
 8002852:	701a      	strb	r2, [r3, #0]
{
	int div = 1;
	while (d/div >= base)
		div *= base;

	while (div != 0)
 8002854:	697b      	ldr	r3, [r7, #20]
 8002856:	2b00      	cmp	r3, #0
 8002858:	d1d2      	bne.n	8002800 <ts_itoa+0x2c>
		if (num > 9)
			*((*buf)++) = (num-10) + 'A';
		else
			*((*buf)++) = num + '0';
	}
}
 800285a:	bf00      	nop
 800285c:	371c      	adds	r7, #28
 800285e:	46bd      	mov	sp, r7
 8002860:	bc80      	pop	{r7}
 8002862:	4770      	bx	lr

08002864 <ts_formatstring>:
**  Abstract: Writes arguments va to buffer buf according to format fmt
**  Returns:  Length of string
**---------------------------------------------------------------------------
*/
int ts_formatstring(char *buf, const char *fmt, va_list va)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b088      	sub	sp, #32
 8002868:	af00      	add	r7, sp, #0
 800286a:	60f8      	str	r0, [r7, #12]
 800286c:	60b9      	str	r1, [r7, #8]
 800286e:	607a      	str	r2, [r7, #4]
	char *start_buf = buf;
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	617b      	str	r3, [r7, #20]
	while(*fmt)
 8002874:	e07d      	b.n	8002972 <ts_formatstring+0x10e>
	{
		/* Character needs formating? */
		if (*fmt == '%')
 8002876:	68bb      	ldr	r3, [r7, #8]
 8002878:	781b      	ldrb	r3, [r3, #0]
 800287a:	2b25      	cmp	r3, #37	; 0x25
 800287c:	d171      	bne.n	8002962 <ts_formatstring+0xfe>
		{
			switch (*(++fmt))
 800287e:	68bb      	ldr	r3, [r7, #8]
 8002880:	3301      	adds	r3, #1
 8002882:	60bb      	str	r3, [r7, #8]
 8002884:	68bb      	ldr	r3, [r7, #8]
 8002886:	781b      	ldrb	r3, [r3, #0]
 8002888:	2b64      	cmp	r3, #100	; 0x64
 800288a:	d01e      	beq.n	80028ca <ts_formatstring+0x66>
 800288c:	2b64      	cmp	r3, #100	; 0x64
 800288e:	dc06      	bgt.n	800289e <ts_formatstring+0x3a>
 8002890:	2b58      	cmp	r3, #88	; 0x58
 8002892:	d050      	beq.n	8002936 <ts_formatstring+0xd2>
 8002894:	2b63      	cmp	r3, #99	; 0x63
 8002896:	d00e      	beq.n	80028b6 <ts_formatstring+0x52>
 8002898:	2b25      	cmp	r3, #37	; 0x25
 800289a:	d058      	beq.n	800294e <ts_formatstring+0xea>
 800289c:	e05d      	b.n	800295a <ts_formatstring+0xf6>
 800289e:	2b73      	cmp	r3, #115	; 0x73
 80028a0:	d02b      	beq.n	80028fa <ts_formatstring+0x96>
 80028a2:	2b73      	cmp	r3, #115	; 0x73
 80028a4:	dc02      	bgt.n	80028ac <ts_formatstring+0x48>
 80028a6:	2b69      	cmp	r3, #105	; 0x69
 80028a8:	d00f      	beq.n	80028ca <ts_formatstring+0x66>
 80028aa:	e056      	b.n	800295a <ts_formatstring+0xf6>
 80028ac:	2b75      	cmp	r3, #117	; 0x75
 80028ae:	d037      	beq.n	8002920 <ts_formatstring+0xbc>
 80028b0:	2b78      	cmp	r3, #120	; 0x78
 80028b2:	d040      	beq.n	8002936 <ts_formatstring+0xd2>
 80028b4:	e051      	b.n	800295a <ts_formatstring+0xf6>
			{
			  case 'c':
				*buf++ = va_arg(va, int);
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	1c5a      	adds	r2, r3, #1
 80028ba:	60fa      	str	r2, [r7, #12]
 80028bc:	687a      	ldr	r2, [r7, #4]
 80028be:	1d11      	adds	r1, r2, #4
 80028c0:	6079      	str	r1, [r7, #4]
 80028c2:	6812      	ldr	r2, [r2, #0]
 80028c4:	b2d2      	uxtb	r2, r2
 80028c6:	701a      	strb	r2, [r3, #0]
				break;
 80028c8:	e047      	b.n	800295a <ts_formatstring+0xf6>
			  case 'd':
			  case 'i':
				{
					signed int val = va_arg(va, signed int);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	1d1a      	adds	r2, r3, #4
 80028ce:	607a      	str	r2, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	61fb      	str	r3, [r7, #28]
					if (val < 0)
 80028d4:	69fb      	ldr	r3, [r7, #28]
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	da07      	bge.n	80028ea <ts_formatstring+0x86>
					{
						val *= -1;
 80028da:	69fb      	ldr	r3, [r7, #28]
 80028dc:	425b      	negs	r3, r3
 80028de:	61fb      	str	r3, [r7, #28]
						*buf++ = '-';
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	1c5a      	adds	r2, r3, #1
 80028e4:	60fa      	str	r2, [r7, #12]
 80028e6:	222d      	movs	r2, #45	; 0x2d
 80028e8:	701a      	strb	r2, [r3, #0]
					}
					ts_itoa(&buf, val, 10);
 80028ea:	69f9      	ldr	r1, [r7, #28]
 80028ec:	f107 030c 	add.w	r3, r7, #12
 80028f0:	220a      	movs	r2, #10
 80028f2:	4618      	mov	r0, r3
 80028f4:	f7ff ff6e 	bl	80027d4 <ts_itoa>
				}
				break;
 80028f8:	e02f      	b.n	800295a <ts_formatstring+0xf6>
			  case 's':
				{
					char * arg = va_arg(va, char *);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	1d1a      	adds	r2, r3, #4
 80028fe:	607a      	str	r2, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	61bb      	str	r3, [r7, #24]
					while (*arg)
 8002904:	e007      	b.n	8002916 <ts_formatstring+0xb2>
					{
						*buf++ = *arg++;
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	1c5a      	adds	r2, r3, #1
 800290a:	60fa      	str	r2, [r7, #12]
 800290c:	69ba      	ldr	r2, [r7, #24]
 800290e:	1c51      	adds	r1, r2, #1
 8002910:	61b9      	str	r1, [r7, #24]
 8002912:	7812      	ldrb	r2, [r2, #0]
 8002914:	701a      	strb	r2, [r3, #0]
				}
				break;
			  case 's':
				{
					char * arg = va_arg(va, char *);
					while (*arg)
 8002916:	69bb      	ldr	r3, [r7, #24]
 8002918:	781b      	ldrb	r3, [r3, #0]
 800291a:	2b00      	cmp	r3, #0
 800291c:	d1f3      	bne.n	8002906 <ts_formatstring+0xa2>
					{
						*buf++ = *arg++;
					}
				}
				break;
 800291e:	e01c      	b.n	800295a <ts_formatstring+0xf6>
			  case 'u':
					ts_itoa(&buf, va_arg(va, unsigned int), 10);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	1d1a      	adds	r2, r3, #4
 8002924:	607a      	str	r2, [r7, #4]
 8002926:	6819      	ldr	r1, [r3, #0]
 8002928:	f107 030c 	add.w	r3, r7, #12
 800292c:	220a      	movs	r2, #10
 800292e:	4618      	mov	r0, r3
 8002930:	f7ff ff50 	bl	80027d4 <ts_itoa>
				break;
 8002934:	e011      	b.n	800295a <ts_formatstring+0xf6>
			  case 'x':
			  case 'X':
					ts_itoa(&buf, va_arg(va, int), 16);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	1d1a      	adds	r2, r3, #4
 800293a:	607a      	str	r2, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	4619      	mov	r1, r3
 8002940:	f107 030c 	add.w	r3, r7, #12
 8002944:	2210      	movs	r2, #16
 8002946:	4618      	mov	r0, r3
 8002948:	f7ff ff44 	bl	80027d4 <ts_itoa>
				break;
 800294c:	e005      	b.n	800295a <ts_formatstring+0xf6>
			  case '%':
				  *buf++ = '%';
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	1c5a      	adds	r2, r3, #1
 8002952:	60fa      	str	r2, [r7, #12]
 8002954:	2225      	movs	r2, #37	; 0x25
 8002956:	701a      	strb	r2, [r3, #0]
				  break;
 8002958:	bf00      	nop
			}
			fmt++;
 800295a:	68bb      	ldr	r3, [r7, #8]
 800295c:	3301      	adds	r3, #1
 800295e:	60bb      	str	r3, [r7, #8]
 8002960:	e007      	b.n	8002972 <ts_formatstring+0x10e>
		}
		/* Else just copy */
		else
		{
			*buf++ = *fmt++;
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	1c5a      	adds	r2, r3, #1
 8002966:	60fa      	str	r2, [r7, #12]
 8002968:	68ba      	ldr	r2, [r7, #8]
 800296a:	1c51      	adds	r1, r2, #1
 800296c:	60b9      	str	r1, [r7, #8]
 800296e:	7812      	ldrb	r2, [r2, #0]
 8002970:	701a      	strb	r2, [r3, #0]
**---------------------------------------------------------------------------
*/
int ts_formatstring(char *buf, const char *fmt, va_list va)
{
	char *start_buf = buf;
	while(*fmt)
 8002972:	68bb      	ldr	r3, [r7, #8]
 8002974:	781b      	ldrb	r3, [r3, #0]
 8002976:	2b00      	cmp	r3, #0
 8002978:	f47f af7d 	bne.w	8002876 <ts_formatstring+0x12>
		else
		{
			*buf++ = *fmt++;
		}
	}
	*buf = 0;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	2200      	movs	r2, #0
 8002980:	701a      	strb	r2, [r3, #0]

	return (int)(buf - start_buf);
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	461a      	mov	r2, r3
 8002986:	697b      	ldr	r3, [r7, #20]
 8002988:	1ad3      	subs	r3, r2, r3
}
 800298a:	4618      	mov	r0, r3
 800298c:	3720      	adds	r7, #32
 800298e:	46bd      	mov	sp, r7
 8002990:	bd80      	pop	{r7, pc}
 8002992:	bf00      	nop

08002994 <siprintf>:
**            given character string according to the format parameter.
**  Returns:  Number of bytes written
**===========================================================================
*/
int siprintf(char *buf, const char *fmt, ...)
{
 8002994:	b40e      	push	{r1, r2, r3}
 8002996:	b580      	push	{r7, lr}
 8002998:	b085      	sub	sp, #20
 800299a:	af00      	add	r7, sp, #0
 800299c:	6078      	str	r0, [r7, #4]
	int length;
	va_list va;
	va_start(va, fmt);
 800299e:	f107 0320 	add.w	r3, r7, #32
 80029a2:	60bb      	str	r3, [r7, #8]
	length = ts_formatstring(buf, fmt, va);
 80029a4:	68ba      	ldr	r2, [r7, #8]
 80029a6:	69f9      	ldr	r1, [r7, #28]
 80029a8:	6878      	ldr	r0, [r7, #4]
 80029aa:	f7ff ff5b 	bl	8002864 <ts_formatstring>
 80029ae:	60f8      	str	r0, [r7, #12]
	va_end(va);
	return length;
 80029b0:	68fb      	ldr	r3, [r7, #12]
}
 80029b2:	4618      	mov	r0, r3
 80029b4:	3714      	adds	r7, #20
 80029b6:	46bd      	mov	sp, r7
 80029b8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80029bc:	b003      	add	sp, #12
 80029be:	4770      	bx	lr

080029c0 <__libc_init_array>:
 80029c0:	4b0e      	ldr	r3, [pc, #56]	; (80029fc <__libc_init_array+0x3c>)
 80029c2:	b570      	push	{r4, r5, r6, lr}
 80029c4:	461e      	mov	r6, r3
 80029c6:	4c0e      	ldr	r4, [pc, #56]	; (8002a00 <__libc_init_array+0x40>)
 80029c8:	2500      	movs	r5, #0
 80029ca:	1ae4      	subs	r4, r4, r3
 80029cc:	10a4      	asrs	r4, r4, #2
 80029ce:	42a5      	cmp	r5, r4
 80029d0:	d004      	beq.n	80029dc <__libc_init_array+0x1c>
 80029d2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80029d6:	4798      	blx	r3
 80029d8:	3501      	adds	r5, #1
 80029da:	e7f8      	b.n	80029ce <__libc_init_array+0xe>
 80029dc:	f000 f85e 	bl	8002a9c <_init>
 80029e0:	4b08      	ldr	r3, [pc, #32]	; (8002a04 <__libc_init_array+0x44>)
 80029e2:	4c09      	ldr	r4, [pc, #36]	; (8002a08 <__libc_init_array+0x48>)
 80029e4:	461e      	mov	r6, r3
 80029e6:	1ae4      	subs	r4, r4, r3
 80029e8:	10a4      	asrs	r4, r4, #2
 80029ea:	2500      	movs	r5, #0
 80029ec:	42a5      	cmp	r5, r4
 80029ee:	d004      	beq.n	80029fa <__libc_init_array+0x3a>
 80029f0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80029f4:	4798      	blx	r3
 80029f6:	3501      	adds	r5, #1
 80029f8:	e7f8      	b.n	80029ec <__libc_init_array+0x2c>
 80029fa:	bd70      	pop	{r4, r5, r6, pc}
 80029fc:	080030f4 	.word	0x080030f4
 8002a00:	080030f4 	.word	0x080030f4
 8002a04:	080030f4 	.word	0x080030f4
 8002a08:	080030f8 	.word	0x080030f8

08002a0c <round>:
 8002a0c:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8002a10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a12:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8002a16:	2e13      	cmp	r6, #19
 8002a18:	4605      	mov	r5, r0
 8002a1a:	460c      	mov	r4, r1
 8002a1c:	460b      	mov	r3, r1
 8002a1e:	468e      	mov	lr, r1
 8002a20:	dc16      	bgt.n	8002a50 <round+0x44>
 8002a22:	2e00      	cmp	r6, #0
 8002a24:	da08      	bge.n	8002a38 <round+0x2c>
 8002a26:	3601      	adds	r6, #1
 8002a28:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 8002a2c:	d12c      	bne.n	8002a88 <round+0x7c>
 8002a2e:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8002a32:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8002a36:	e027      	b.n	8002a88 <round+0x7c>
 8002a38:	4817      	ldr	r0, [pc, #92]	; (8002a98 <round+0x8c>)
 8002a3a:	4130      	asrs	r0, r6
 8002a3c:	4201      	tst	r1, r0
 8002a3e:	d100      	bne.n	8002a42 <round+0x36>
 8002a40:	b335      	cbz	r5, 8002a90 <round+0x84>
 8002a42:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002a46:	4133      	asrs	r3, r6
 8002a48:	4473      	add	r3, lr
 8002a4a:	ea23 0300 	bic.w	r3, r3, r0
 8002a4e:	e01b      	b.n	8002a88 <round+0x7c>
 8002a50:	2e33      	cmp	r6, #51	; 0x33
 8002a52:	dd07      	ble.n	8002a64 <round+0x58>
 8002a54:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8002a58:	d11a      	bne.n	8002a90 <round+0x84>
 8002a5a:	4602      	mov	r2, r0
 8002a5c:	460b      	mov	r3, r1
 8002a5e:	f7fd fb9b 	bl	8000198 <__adddf3>
 8002a62:	e017      	b.n	8002a94 <round+0x88>
 8002a64:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 8002a68:	f04f 31ff 	mov.w	r1, #4294967295
 8002a6c:	fa21 f002 	lsr.w	r0, r1, r2
 8002a70:	4205      	tst	r5, r0
 8002a72:	d00d      	beq.n	8002a90 <round+0x84>
 8002a74:	f1c6 0633 	rsb	r6, r6, #51	; 0x33
 8002a78:	2101      	movs	r1, #1
 8002a7a:	40b1      	lsls	r1, r6
 8002a7c:	1949      	adds	r1, r1, r5
 8002a7e:	bf28      	it	cs
 8002a80:	3301      	addcs	r3, #1
 8002a82:	ea21 0200 	bic.w	r2, r1, r0
 8002a86:	e000      	b.n	8002a8a <round+0x7e>
 8002a88:	2200      	movs	r2, #0
 8002a8a:	4619      	mov	r1, r3
 8002a8c:	4610      	mov	r0, r2
 8002a8e:	e001      	b.n	8002a94 <round+0x88>
 8002a90:	4628      	mov	r0, r5
 8002a92:	4621      	mov	r1, r4
 8002a94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002a96:	bf00      	nop
 8002a98:	000fffff 	.word	0x000fffff

08002a9c <_init>:
 8002a9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a9e:	bf00      	nop
 8002aa0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002aa2:	bc08      	pop	{r3}
 8002aa4:	469e      	mov	lr, r3
 8002aa6:	4770      	bx	lr

08002aa8 <_fini>:
 8002aa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002aaa:	bf00      	nop
 8002aac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002aae:	bc08      	pop	{r3}
 8002ab0:	469e      	mov	lr, r3
 8002ab2:	4770      	bx	lr
